//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace C4d {

public class BaseContainer : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal BaseContainer(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(BaseContainer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~BaseContainer() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          C4dApiPINVOKE.delete_BaseContainer(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public BaseContainer() : this(C4dApiPINVOKE.new_BaseContainer__SWIG_0(), true) {
  }

  public BaseContainer(int id) : this(C4dApiPINVOKE.new_BaseContainer__SWIG_1(id), true) {
  }

  public BaseContainer(BaseContainer n) : this(C4dApiPINVOKE.new_BaseContainer__SWIG_2(BaseContainer.getCPtr(n)), true) {
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public BaseContainer GetClone(COPYFLAGS flags, AliasTrans trans) {
    global::System.IntPtr cPtr = C4dApiPINVOKE.BaseContainer_GetClone(swigCPtr, (int)flags, AliasTrans.getCPtr(trans));
    BaseContainer ret = (cPtr == global::System.IntPtr.Zero) ? null : new BaseContainer(cPtr, false);
    return ret;
  }

  public bool CopyTo(BaseContainer dst, COPYFLAGS flags, AliasTrans trans) {
    bool ret = C4dApiPINVOKE.BaseContainer_CopyTo(swigCPtr, BaseContainer.getCPtr(dst), (int)flags, AliasTrans.getCPtr(trans));
    return ret;
  }

  public void FlushAll() {
    C4dApiPINVOKE.BaseContainer_FlushAll(swigCPtr);
  }

  public int GetId() {
    int ret = C4dApiPINVOKE.BaseContainer_GetId(swigCPtr);
    return ret;
  }

  public void SetId(int c_id) {
    C4dApiPINVOKE.BaseContainer_SetId(swigCPtr, c_id);
  }

  public uint GetDirty() {
    uint ret = C4dApiPINVOKE.BaseContainer_GetDirty(swigCPtr);
    return ret;
  }

  public bool RemoveData(int id) {
    bool ret = C4dApiPINVOKE.BaseContainer_RemoveData(swigCPtr, id);
    return ret;
  }

  public bool RemoveIndex(int i) {
    bool ret = C4dApiPINVOKE.BaseContainer_RemoveIndex(swigCPtr, i);
    return ret;
  }

  public int FindIndex(int id, SWIGTYPE_p_p_GeData ppData) {
    int ret = C4dApiPINVOKE.BaseContainer_FindIndex__SWIG_0(swigCPtr, id, SWIGTYPE_p_p_GeData.getCPtr(ppData));
    return ret;
  }

  public int FindIndex(int id) {
    int ret = C4dApiPINVOKE.BaseContainer_FindIndex__SWIG_1(swigCPtr, id);
    return ret;
  }

  public int GetIndexId(int index) {
    int ret = C4dApiPINVOKE.BaseContainer_GetIndexId(swigCPtr, index);
    return ret;
  }

  public GeData GetDataPointer(int id) {
    global::System.IntPtr cPtr = C4dApiPINVOKE.BaseContainer_GetDataPointer(swigCPtr, id);
    GeData ret = (cPtr == global::System.IntPtr.Zero) ? null : new GeData(cPtr, false);
    return ret;
  }

  public void GetDataPointers(SWIGTYPE_p_Int32 ids, int cnt, SWIGTYPE_p_p_GeData data) {
    C4dApiPINVOKE.BaseContainer_GetDataPointers(swigCPtr, SWIGTYPE_p_Int32.getCPtr(ids), cnt, SWIGTYPE_p_p_GeData.getCPtr(data));
  }

  public GeData GetIndexData(int index) {
    global::System.IntPtr cPtr = C4dApiPINVOKE.BaseContainer_GetIndexData(swigCPtr, index);
    GeData ret = (cPtr == global::System.IntPtr.Zero) ? null : new GeData(cPtr, false);
    return ret;
  }

  public GeData InsData(int id, GeData n) {
    global::System.IntPtr cPtr = C4dApiPINVOKE.BaseContainer_InsData(swigCPtr, id, GeData.getCPtr(n));
    GeData ret = (cPtr == global::System.IntPtr.Zero) ? null : new GeData(cPtr, false);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public GeData InsDataAfter(int id, GeData n, GeData last) {
    global::System.IntPtr cPtr = C4dApiPINVOKE.BaseContainer_InsDataAfter(swigCPtr, id, GeData.getCPtr(n), GeData.getCPtr(last));
    GeData ret = (cPtr == global::System.IntPtr.Zero) ? null : new GeData(cPtr, false);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public GeData SetData(int id, GeData n) {
    global::System.IntPtr cPtr = C4dApiPINVOKE.BaseContainer_SetData(swigCPtr, id, GeData.getCPtr(n));
    GeData ret = (cPtr == global::System.IntPtr.Zero) ? null : new GeData(cPtr, false);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public GeData GetData(int id) {
    GeData ret = new GeData(C4dApiPINVOKE.BaseContainer_GetData(swigCPtr, id), false);
    return ret;
  }

  public bool GetBool(int id, bool preset) {
    bool ret = C4dApiPINVOKE.BaseContainer_GetBool__SWIG_0(swigCPtr, id, preset);
    return ret;
  }

  public bool GetBool(int id) {
    bool ret = C4dApiPINVOKE.BaseContainer_GetBool__SWIG_1(swigCPtr, id);
    return ret;
  }

  public int GetInt32(int id, int preset) {
    int ret = C4dApiPINVOKE.BaseContainer_GetInt32__SWIG_0(swigCPtr, id, preset);
    return ret;
  }

  public int GetInt32(int id) {
    int ret = C4dApiPINVOKE.BaseContainer_GetInt32__SWIG_1(swigCPtr, id);
    return ret;
  }

  public uint GetUInt32(int id, uint preset) {
    uint ret = C4dApiPINVOKE.BaseContainer_GetUInt32__SWIG_0(swigCPtr, id, preset);
    return ret;
  }

  public uint GetUInt32(int id) {
    uint ret = C4dApiPINVOKE.BaseContainer_GetUInt32__SWIG_1(swigCPtr, id);
    return ret;
  }

  public long GetInt64(int id, long preset) {
    long ret = C4dApiPINVOKE.BaseContainer_GetInt64__SWIG_0(swigCPtr, id, preset);
    return ret;
  }

  public long GetInt64(int id) {
    long ret = C4dApiPINVOKE.BaseContainer_GetInt64__SWIG_1(swigCPtr, id);
    return ret;
  }

  public ulong GetUInt64(int id, ulong preset) {
    ulong ret = C4dApiPINVOKE.BaseContainer_GetUInt64__SWIG_0(swigCPtr, id, preset);
    return ret;
  }

  public ulong GetUInt64(int id) {
    ulong ret = C4dApiPINVOKE.BaseContainer_GetUInt64__SWIG_1(swigCPtr, id);
    return ret;
  }

  public double GetFloat(int id, double preset) {
    double ret = C4dApiPINVOKE.BaseContainer_GetFloat__SWIG_0(swigCPtr, id, preset);
    return ret;
  }

  public double GetFloat(int id) {
    double ret = C4dApiPINVOKE.BaseContainer_GetFloat__SWIG_1(swigCPtr, id);
    return ret;
  }

  public SWIGTYPE_p_void GetVoid(int id, SWIGTYPE_p_void preset) {
    global::System.IntPtr cPtr = C4dApiPINVOKE.BaseContainer_GetVoid__SWIG_0(swigCPtr, id, SWIGTYPE_p_void.getCPtr(preset));
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_void GetVoid(int id) {
    global::System.IntPtr cPtr = C4dApiPINVOKE.BaseContainer_GetVoid__SWIG_1(swigCPtr, id);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_void GetMemoryAndRelease(int id, SWIGTYPE_p_Int count, SWIGTYPE_p_void preset) {
    global::System.IntPtr cPtr = C4dApiPINVOKE.BaseContainer_GetMemoryAndRelease__SWIG_0(swigCPtr, id, SWIGTYPE_p_Int.getCPtr(count), SWIGTYPE_p_void.getCPtr(preset));
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_void GetMemoryAndRelease(int id, SWIGTYPE_p_Int count) {
    global::System.IntPtr cPtr = C4dApiPINVOKE.BaseContainer_GetMemoryAndRelease__SWIG_1(swigCPtr, id, SWIGTYPE_p_Int.getCPtr(count));
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_void GetMemory(int id, SWIGTYPE_p_Int count, SWIGTYPE_p_void preset) {
    global::System.IntPtr cPtr = C4dApiPINVOKE.BaseContainer_GetMemory__SWIG_0(swigCPtr, id, SWIGTYPE_p_Int.getCPtr(count), SWIGTYPE_p_void.getCPtr(preset));
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_void GetMemory(int id, SWIGTYPE_p_Int count) {
    global::System.IntPtr cPtr = C4dApiPINVOKE.BaseContainer_GetMemory__SWIG_1(swigCPtr, id, SWIGTYPE_p_Int.getCPtr(count));
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Fusee.Math.Core.double3 /* Vector_cstype_out */ GetVector(int id, Fusee.Math.Core.double3 /* constVector&_cstype */ preset)  {  /* <Vector_csout> */
      Fusee.Math.Core.double3 ret = C4dApiPINVOKE.BaseContainer_GetVector__SWIG_0(swigCPtr, id, ref preset /* constVector&_csin */);
      return ret;
   } /* <Vector_csout> */ 

  public Fusee.Math.Core.double3 /* Vector_cstype_out */ GetVector(int id)  {  /* <Vector_csout> */
      Fusee.Math.Core.double3 ret = C4dApiPINVOKE.BaseContainer_GetVector__SWIG_1(swigCPtr, id);
      return ret;
   } /* <Vector_csout> */ 

  public Fusee.Math.Core.double4x4 /* Matrix_cstype */ GetMatrix(int id, ref Fusee.Math.Core.double4x4 /* constMatrix&_cstype */ preset) {
    double[] adbl_preset;
    unsafe {adbl_preset = Fusee.Math.ArrayConvert.double4x4ToArrayDoubleC4DLayout(preset);    fixed (double *pdbl_preset = adbl_preset) {
    /* constMatrix&_csin_pre */
    try  {  /* <Matrix_csout> */
        C34M ret_c34m = C4dApiPINVOKE.BaseContainer_GetMatrix__SWIG_0(swigCPtr, id, (global::System.IntPtr) pdbl_preset /* constMatrix&_csin */);
	  Fusee.Math.Core.double4x4 ret;
	  unsafe {ret = Fusee.Math.ArrayConvert.ArrayDoubleC4DLayoutTodouble4x4(ret_c34m.m);}
        return ret;
     } /* </Matrix_csout> */  finally {
        // NOP preset = Fusee.Math.ArrayConvert.ArrayDoubleC4DLayoutTodouble4x4(pdbl_preset);
        /* constMatrix&_csin_post */
    }
} } /* constMatrix&_csin_terminator */
  }

  public Fusee.Math.Core.double4x4 /* Matrix_cstype */ GetMatrix(int id)  {  /* <Matrix_csout> */
      C34M ret_c34m = C4dApiPINVOKE.BaseContainer_GetMatrix__SWIG_1(swigCPtr, id);
	  Fusee.Math.Core.double4x4 ret;
	  unsafe {ret = Fusee.Math.ArrayConvert.ArrayDoubleC4DLayoutTodouble4x4(ret_c34m.m);}
      return ret;
   } /* </Matrix_csout> */ 

  public string /* String_cstype */ GetString(int id, string /* constString&_cstype */ preset)  {  /* <String_csout> */
      string ret = C4dApiPINVOKE.BaseContainer_GetString__SWIG_0(swigCPtr, id, preset);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
      return ret;
   } /* </String_csout> */ 

  public string /* String_cstype */ GetString(int id)  {  /* <String_csout> */
      string ret = C4dApiPINVOKE.BaseContainer_GetString__SWIG_1(swigCPtr, id);
      return ret;
   } /* </String_csout> */ 

  public SWIGTYPE_p_C4DUuid GetUuid(int id, SWIGTYPE_p_C4DUuid preset) {
    SWIGTYPE_p_C4DUuid ret = new SWIGTYPE_p_C4DUuid(C4dApiPINVOKE.BaseContainer_GetUuid__SWIG_0(swigCPtr, id, SWIGTYPE_p_C4DUuid.getCPtr(preset)), true);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_C4DUuid GetUuid(int id) {
    SWIGTYPE_p_C4DUuid ret = new SWIGTYPE_p_C4DUuid(C4dApiPINVOKE.BaseContainer_GetUuid__SWIG_1(swigCPtr, id), true);
    return ret;
  }

  public Filename GetFilename(int id, Filename preset) {
    Filename ret = new Filename(C4dApiPINVOKE.BaseContainer_GetFilename__SWIG_0(swigCPtr, id, Filename.getCPtr(preset)), true);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Filename GetFilename(int id) {
    Filename ret = new Filename(C4dApiPINVOKE.BaseContainer_GetFilename__SWIG_1(swigCPtr, id), true);
    return ret;
  }

  public BaseTime GetTime(int id, BaseTime preset) {
    BaseTime ret = new BaseTime(C4dApiPINVOKE.BaseContainer_GetTime__SWIG_0(swigCPtr, id, BaseTime.getCPtr(preset)), true);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public BaseTime GetTime(int id) {
    BaseTime ret = new BaseTime(C4dApiPINVOKE.BaseContainer_GetTime__SWIG_1(swigCPtr, id), true);
    return ret;
  }

  public BaseContainer GetContainer(int id) {
    BaseContainer ret = new BaseContainer(C4dApiPINVOKE.BaseContainer_GetContainer(swigCPtr, id), true);
    return ret;
  }

  public BaseContainer GetContainerInstance(int id) {
    global::System.IntPtr cPtr = C4dApiPINVOKE.BaseContainer_GetContainerInstance__SWIG_0(swigCPtr, id);
    BaseContainer ret = (cPtr == global::System.IntPtr.Zero) ? null : new BaseContainer(cPtr, false);
    return ret;
  }

  public BaseList2D GetLink(int id, BaseDocument doc, int instanceof) {
    global::System.IntPtr cPtr = C4dApiPINVOKE.BaseContainer_GetLink__SWIG_0(swigCPtr, id, BaseDocument.getCPtr(doc), instanceof);
    BaseList2D ret = (cPtr == global::System.IntPtr.Zero) ? null : new BaseList2D(cPtr, false);
    return ret;
  }

  public BaseList2D GetLink(int id, BaseDocument doc) {
    global::System.IntPtr cPtr = C4dApiPINVOKE.BaseContainer_GetLink__SWIG_1(swigCPtr, id, BaseDocument.getCPtr(doc));
    BaseList2D ret = (cPtr == global::System.IntPtr.Zero) ? null : new BaseList2D(cPtr, false);
    return ret;
  }

  public BaseObject GetObjectLink(int id, BaseDocument doc) {
    global::System.IntPtr cPtr = C4dApiPINVOKE.BaseContainer_GetObjectLink(swigCPtr, id, BaseDocument.getCPtr(doc));
    BaseObject ret = (BaseObject) C4dApiPINVOKE.InstantiateConcreteObject(cPtr, false);
    return ret;
}

  public BaseMaterial GetMaterialLink(int id, BaseDocument doc) {
    global::System.IntPtr cPtr = C4dApiPINVOKE.BaseContainer_GetMaterialLink(swigCPtr, id, BaseDocument.getCPtr(doc));
    BaseMaterial ret = (BaseMaterial) C4dApiPINVOKE.InstantiateConcreteMaterial(cPtr, false);
    return ret;
}

  public BaseLink GetBaseLink(int id) {
    global::System.IntPtr cPtr = C4dApiPINVOKE.BaseContainer_GetBaseLink(swigCPtr, id);
    BaseLink ret = (cPtr == global::System.IntPtr.Zero) ? null : new BaseLink(cPtr, false);
    return ret;
  }

  public CustomDataType GetCustomDataType(int id, int datatype) {
    global::System.IntPtr cPtr = C4dApiPINVOKE.BaseContainer_GetCustomDataType(swigCPtr, id, datatype);
    CustomDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new CustomDataType(cPtr, false);
    return ret;
  }

  public int GetTypeC4D(int id) {
    int ret = C4dApiPINVOKE.BaseContainer_GetTypeC4D(swigCPtr, id);
    return ret;
  }

  public void SetBool(int id, bool b) {
    C4dApiPINVOKE.BaseContainer_SetBool(swigCPtr, id, b);
  }

  public void SetInt32(int id, int l) {
    C4dApiPINVOKE.BaseContainer_SetInt32(swigCPtr, id, l);
  }

  public void SetUInt32(int id, uint l) {
    C4dApiPINVOKE.BaseContainer_SetUInt32(swigCPtr, id, l);
  }

  public void SetInt64(int id, long l) {
    C4dApiPINVOKE.BaseContainer_SetInt64(swigCPtr, id, l);
  }

  public void SetUInt64(int id, ulong l) {
    C4dApiPINVOKE.BaseContainer_SetUInt64(swigCPtr, id, l);
  }

  public void SetFloat(int id, double r) {
    C4dApiPINVOKE.BaseContainer_SetFloat(swigCPtr, id, r);
  }

  public void SetVoid(int id, SWIGTYPE_p_void v) {
    C4dApiPINVOKE.BaseContainer_SetVoid(swigCPtr, id, SWIGTYPE_p_void.getCPtr(v));
  }

  public void SetMemory(int id, SWIGTYPE_p_void mem, int count) {
    C4dApiPINVOKE.BaseContainer_SetMemory(swigCPtr, id, SWIGTYPE_p_void.getCPtr(mem), count);
  }

  public void SetVector(int id, Fusee.Math.Core.double3 /* constVector&_cstype */ v) {
    C4dApiPINVOKE.BaseContainer_SetVector(swigCPtr, id, ref v /* constVector&_csin */);
  }

  public void SetMatrix(int id, ref Fusee.Math.Core.double4x4 /* constMatrix&_cstype */ m) {
    double[] adbl_m;
    unsafe {adbl_m = Fusee.Math.ArrayConvert.double4x4ToArrayDoubleC4DLayout(m);    fixed (double *pdbl_m = adbl_m) {
    /* constMatrix&_csin_pre */
    try {
      C4dApiPINVOKE.BaseContainer_SetMatrix(swigCPtr, id, (global::System.IntPtr) pdbl_m /* constMatrix&_csin */);
    } finally {
        // NOP m = Fusee.Math.ArrayConvert.ArrayDoubleC4DLayoutTodouble4x4(pdbl_m);
        /* constMatrix&_csin_post */
    }
} } /* constMatrix&_csin_terminator */
  }

  public void SetString(int id, string /* constString&_cstype */ s) {
    C4dApiPINVOKE.BaseContainer_SetString(swigCPtr, id, s);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetUuid(int id, SWIGTYPE_p_C4DUuid u) {
    C4dApiPINVOKE.BaseContainer_SetUuid(swigCPtr, id, SWIGTYPE_p_C4DUuid.getCPtr(u));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetFilename(int id, Filename f) {
    C4dApiPINVOKE.BaseContainer_SetFilename(swigCPtr, id, Filename.getCPtr(f));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetTime(int id, BaseTime b) {
    C4dApiPINVOKE.BaseContainer_SetTime(swigCPtr, id, BaseTime.getCPtr(b));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetContainer(int id, BaseContainer s) {
    C4dApiPINVOKE.BaseContainer_SetContainer(swigCPtr, id, BaseContainer.getCPtr(s));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetLink(int id, C4DAtomGoal link) {
    C4dApiPINVOKE.BaseContainer_SetLink(swigCPtr, id, C4DAtomGoal.getCPtr(link));
  }

  public void MergeContainer(BaseContainer src) {
    C4dApiPINVOKE.BaseContainer_MergeContainer(swigCPtr, BaseContainer.getCPtr(src));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool GetParameter(DescID id, GeData t_data) {
    bool ret = C4dApiPINVOKE.BaseContainer_GetParameter(swigCPtr, DescID.getCPtr(id), GeData.getCPtr(t_data));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool SetParameter(DescID id, GeData t_data) {
    bool ret = C4dApiPINVOKE.BaseContainer_SetParameter(swigCPtr, DescID.getCPtr(id), GeData.getCPtr(t_data));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Sort() {
    C4dApiPINVOKE.BaseContainer_Sort(swigCPtr);
  }

}

}
