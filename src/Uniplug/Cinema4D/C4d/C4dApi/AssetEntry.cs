//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace C4d {

public class AssetEntry : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal AssetEntry(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(AssetEntry obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~AssetEntry() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          C4dApiPINVOKE.delete_AssetEntry(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public Filename _filename {
    set {
      C4dApiPINVOKE.AssetEntry__filename_set(swigCPtr, Filename.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = C4dApiPINVOKE.AssetEntry__filename_get(swigCPtr);
      Filename ret = (cPtr == global::System.IntPtr.Zero) ? null : new Filename(cPtr, false);
      return ret;
    } 
  }

  public string /* constString&_cstype */ _assetname {
    set {
      C4dApiPINVOKE.AssetEntry__assetname_set(swigCPtr, value);
      if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = C4dApiPINVOKE.AssetEntry__assetname_get(swigCPtr);
      if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int _channelId {
    set {
      C4dApiPINVOKE.AssetEntry__channelId_set(swigCPtr, value);
    } 
    get {
      int ret = C4dApiPINVOKE.AssetEntry__channelId_get(swigCPtr);
      return ret;
    } 
  }

  public bool _netRequestOnDemand {
    set {
      C4dApiPINVOKE.AssetEntry__netRequestOnDemand_set(swigCPtr, value);
    } 
    get {
      bool ret = C4dApiPINVOKE.AssetEntry__netRequestOnDemand_get(swigCPtr);
      return ret;
    } 
  }

  public AssetEntry(Filename filename, string /* constString&_cstype */ assetname, int channelId, bool netRequestOnDemand) : this(C4dApiPINVOKE.new_AssetEntry(Filename.getCPtr(filename), assetname, channelId, netRequestOnDemand), true) {
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
