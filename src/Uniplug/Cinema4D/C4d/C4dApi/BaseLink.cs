//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace C4d {

public class BaseLink : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal BaseLink(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(BaseLink obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public static BaseLink Alloc() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.BaseLink_Alloc();
    BaseLink ret = (cPtr == global::System.IntPtr.Zero) ? null : new BaseLink(cPtr, false);
    return ret;
  }

  public static void Free(SWIGTYPE_p_p_BaseLink link) {
    C4dApiPINVOKE.BaseLink_Free(SWIGTYPE_p_p_BaseLink.getCPtr(link));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public BaseList2D GetLink(BaseDocument doc, int instanceof) {
    global::System.IntPtr cPtr = C4dApiPINVOKE.BaseLink_GetLink__SWIG_0(swigCPtr, BaseDocument.getCPtr(doc), instanceof);
    BaseList2D ret = (cPtr == global::System.IntPtr.Zero) ? null : new BaseList2D(cPtr, false);
    return ret;
  }

  public BaseList2D GetLink(BaseDocument doc) {
    global::System.IntPtr cPtr = C4dApiPINVOKE.BaseLink_GetLink__SWIG_1(swigCPtr, BaseDocument.getCPtr(doc));
    BaseList2D ret = (cPtr == global::System.IntPtr.Zero) ? null : new BaseList2D(cPtr, false);
    return ret;
  }

  public C4DAtomGoal GetLinkAtom(BaseDocument doc, int instanceof) {
    global::System.IntPtr cPtr = C4dApiPINVOKE.BaseLink_GetLinkAtom__SWIG_0(swigCPtr, BaseDocument.getCPtr(doc), instanceof);
    C4DAtomGoal ret = (cPtr == global::System.IntPtr.Zero) ? null : new C4DAtomGoal(cPtr, false);
    return ret;
  }

  public C4DAtomGoal GetLinkAtom(BaseDocument doc) {
    global::System.IntPtr cPtr = C4dApiPINVOKE.BaseLink_GetLinkAtom__SWIG_1(swigCPtr, BaseDocument.getCPtr(doc));
    C4DAtomGoal ret = (cPtr == global::System.IntPtr.Zero) ? null : new C4DAtomGoal(cPtr, false);
    return ret;
  }

  public BaseList2D ForceGetLink() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.BaseLink_ForceGetLink(swigCPtr);
    BaseList2D ret = (cPtr == global::System.IntPtr.Zero) ? null : new BaseList2D(cPtr, false);
    return ret;
  }

  public C4DAtomGoal ForceGetLinkAtom() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.BaseLink_ForceGetLinkAtom(swigCPtr);
    C4DAtomGoal ret = (cPtr == global::System.IntPtr.Zero) ? null : new C4DAtomGoal(cPtr, false);
    return ret;
  }

  public void SetLink(C4DAtomGoal list) {
    C4dApiPINVOKE.BaseLink_SetLink(swigCPtr, C4DAtomGoal.getCPtr(list));
  }

  public bool Read(HyperFile hf) {
    bool ret = C4dApiPINVOKE.BaseLink_Read(swigCPtr, HyperFile.getCPtr(hf));
    return ret;
  }

  public bool Write(HyperFile hf) {
    bool ret = C4dApiPINVOKE.BaseLink_Write(swigCPtr, HyperFile.getCPtr(hf));
    return ret;
  }

  public BaseLink GetClone(COPYFLAGS flags, AliasTrans trn) {
    global::System.IntPtr cPtr = C4dApiPINVOKE.BaseLink_GetClone(swigCPtr, (int)flags, AliasTrans.getCPtr(trn));
    BaseLink ret = (cPtr == global::System.IntPtr.Zero) ? null : new BaseLink(cPtr, false);
    return ret;
  }

  public bool CopyTo(BaseLink dst, COPYFLAGS flags, AliasTrans trn) {
    bool ret = C4dApiPINVOKE.BaseLink_CopyTo(swigCPtr, BaseLink.getCPtr(dst), (int)flags, AliasTrans.getCPtr(trn));
    return ret;
  }

  public bool IsCacheLink() {
    bool ret = C4dApiPINVOKE.BaseLink_IsCacheLink(swigCPtr);
    return ret;
  }

  public void SetUpPointer(C4DAtom t_up_pointer) {
    C4dApiPINVOKE.BaseLink_SetUpPointer(swigCPtr, C4DAtom.getCPtr(t_up_pointer));
  }

}

}
