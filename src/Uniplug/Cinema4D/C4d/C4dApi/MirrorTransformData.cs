//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace C4d {

public class MirrorTransformData : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal MirrorTransformData(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MirrorTransformData obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~MirrorTransformData() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          C4dApiPINVOKE.delete_MirrorTransformData(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public Fusee.Math.Core.double3 /* Vector_cstype_out */ m_Mp {
    /* <Vector_csvarin> */
    set 
	{
      C4dApiPINVOKE.MirrorTransformData_m_Mp_set(swigCPtr, value /* Vector_csin */);
    }  /* </Vector_csvarin> */   
   /* <Vector_csvarout> */
   get
   {  
      Fusee.Math.Core.double3 ret = C4dApiPINVOKE.MirrorTransformData_m_Mp_get(swigCPtr);
      return ret;
   } /* <Vector_csvarout> */ 
  }

  public Fusee.Math.Core.double3 /* Vector_cstype_out */ m_Mn {
    /* <Vector_csvarin> */
    set 
	{
      C4dApiPINVOKE.MirrorTransformData_m_Mn_set(swigCPtr, value /* Vector_csin */);
    }  /* </Vector_csvarin> */   
   /* <Vector_csvarout> */
   get
   {  
      Fusee.Math.Core.double3 ret = C4dApiPINVOKE.MirrorTransformData_m_Mn_get(swigCPtr);
      return ret;
   } /* <Vector_csvarout> */ 
  }

  public Fusee.Math.Core.double4x4 /* Matrix_cstype */ m_Mg {
    /* <Matrix_csvarin> */
    set 
	{
       double[] adbl_value;
       unsafe 
	   {
		   adbl_value = Fusee.Math.ArrayConvert.double4x4ToArrayDoubleC4DLayout(value);
           fixed (double *pdbl_value = adbl_value) 
		   {
              C4dApiPINVOKE.MirrorTransformData_m_Mg_set(swigCPtr, (global::System.IntPtr) pdbl_value /*  Matrix_csin */);
		   }
	   }
    }  /* </Matrix_csvarin> */   
   /* <Matrix_csvarout> */
   get
   {  
      C34M ret_c34m = C4dApiPINVOKE.MirrorTransformData_m_Mg_get(swigCPtr);
	  Fusee.Math.Core.double4x4 ret;
	  unsafe {ret = Fusee.Math.ArrayConvert.ArrayDoubleC4DLayoutTodouble4x4(ret_c34m.m);}
      return ret;   
   } /* <Matrix_csvarout> */ 
  }

  public Fusee.Math.Core.double4x4 /* Matrix_cstype */ m_Mi {
    /* <Matrix_csvarin> */
    set 
	{
       double[] adbl_value;
       unsafe 
	   {
		   adbl_value = Fusee.Math.ArrayConvert.double4x4ToArrayDoubleC4DLayout(value);
           fixed (double *pdbl_value = adbl_value) 
		   {
              C4dApiPINVOKE.MirrorTransformData_m_Mi_set(swigCPtr, (global::System.IntPtr) pdbl_value /*  Matrix_csin */);
		   }
	   }
    }  /* </Matrix_csvarin> */   
   /* <Matrix_csvarout> */
   get
   {  
      C34M ret_c34m = C4dApiPINVOKE.MirrorTransformData_m_Mi_get(swigCPtr);
	  Fusee.Math.Core.double4x4 ret;
	  unsafe {ret = Fusee.Math.ArrayConvert.ArrayDoubleC4DLayoutTodouble4x4(ret_c34m.m);}
      return ret;   
   } /* <Matrix_csvarout> */ 
  }

  public BaseContainer m_pData {
    set {
      C4dApiPINVOKE.MirrorTransformData_m_pData_set(swigCPtr, BaseContainer.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = C4dApiPINVOKE.MirrorTransformData_m_pData_get(swigCPtr);
      BaseContainer ret = (cPtr == global::System.IntPtr.Zero) ? null : new BaseContainer(cPtr, false);
      return ret;
    } 
  }

  public MirrorTransformData() : this(C4dApiPINVOKE.new_MirrorTransformData(), true) {
  }

}

}
