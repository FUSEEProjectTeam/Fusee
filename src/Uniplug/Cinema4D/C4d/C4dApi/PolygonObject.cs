//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace C4d {

public class PolygonObject : PointObject {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal PolygonObject(global::System.IntPtr cPtr, bool cMemoryOwn) : base(C4dApiPINVOKE.PolygonObject_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PolygonObject obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static PolygonObject Alloc(int pcnt, int vcnt) {
    global::System.IntPtr cPtr = C4dApiPINVOKE.PolygonObject_Alloc(pcnt, vcnt);
    PolygonObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new PolygonObject(cPtr, false);
    return ret;
  }

  public static void Free(SWIGTYPE_p_p_PolygonObject bl) {
    C4dApiPINVOKE.PolygonObject_Free(SWIGTYPE_p_p_PolygonObject.getCPtr(bl));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public BaseSelect GetPolygonS() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.PolygonObject_GetPolygonS(swigCPtr);
    BaseSelect ret = (cPtr == global::System.IntPtr.Zero) ? null : new BaseSelect(cPtr, false);
    return ret;
  }

  public BaseSelect GetPolygonH() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.PolygonObject_GetPolygonH(swigCPtr);
    BaseSelect ret = (cPtr == global::System.IntPtr.Zero) ? null : new BaseSelect(cPtr, false);
    return ret;
  }

  public BaseSelect GetEdgeS() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.PolygonObject_GetEdgeS(swigCPtr);
    BaseSelect ret = (cPtr == global::System.IntPtr.Zero) ? null : new BaseSelect(cPtr, false);
    return ret;
  }

  public BaseSelect GetEdgeH() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.PolygonObject_GetEdgeH(swigCPtr);
    BaseSelect ret = (cPtr == global::System.IntPtr.Zero) ? null : new BaseSelect(cPtr, false);
    return ret;
  }

  public BaseSelect GetPhongBreak() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.PolygonObject_GetPhongBreak(swigCPtr);
    BaseSelect ret = (cPtr == global::System.IntPtr.Zero) ? null : new BaseSelect(cPtr, false);
    return ret;
  }

  public CPolygon GetPolygonR() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.PolygonObject_GetPolygonR(swigCPtr);
    CPolygon ret = (cPtr == global::System.IntPtr.Zero) ? null : new CPolygon(cPtr, false);
    return ret;
  }

  public CPolygon GetPolygonW() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.PolygonObject_GetPolygonW(swigCPtr);
    CPolygon ret = (cPtr == global::System.IntPtr.Zero) ? null : new CPolygon(cPtr, false);
    return ret;
  }

  public int GetPolygonCount() {
    int ret = C4dApiPINVOKE.PolygonObject_GetPolygonCount(swigCPtr);
    return ret;
  }

  public bool ResizeObject(int pcnt, int vcnt) {
    bool ret = C4dApiPINVOKE.PolygonObject_ResizeObject__SWIG_0(swigCPtr, pcnt, vcnt);
    return ret;
  }

  public bool ResizeObject(int pcnt, int vcnt, int ncnt) {
    bool ret = C4dApiPINVOKE.PolygonObject_ResizeObject__SWIG_1(swigCPtr, pcnt, vcnt, ncnt);
    return ret;
  }

  public bool ResizeObject(int pcnt, int vcnt, int ncnt, int vc_flags) {
    bool ret = C4dApiPINVOKE.PolygonObject_ResizeObject__SWIG_2(swigCPtr, pcnt, vcnt, ncnt, vc_flags);
    return ret;
  }

  public BaseSelect GetSelectedEdges(Neighbor e, EDGESELECTIONTYPE ltype) {
    global::System.IntPtr cPtr = C4dApiPINVOKE.PolygonObject_GetSelectedEdges__SWIG_0(swigCPtr, Neighbor.getCPtr(e), (int)ltype);
    BaseSelect ret = (cPtr == global::System.IntPtr.Zero) ? null : new BaseSelect(cPtr, false);
    return ret;
  }

  public BaseSelect GetSelectedEdges(Neighbor e, BaseSelect sel) {
    global::System.IntPtr cPtr = C4dApiPINVOKE.PolygonObject_GetSelectedEdges__SWIG_1(swigCPtr, Neighbor.getCPtr(e), BaseSelect.getCPtr(sel));
    BaseSelect ret = (cPtr == global::System.IntPtr.Zero) ? null : new BaseSelect(cPtr, false);
    return ret;
  }

  public bool SetSelectedEdges(Neighbor e, BaseSelect pSel, EDGESELECTIONTYPE ltype) {
    bool ret = C4dApiPINVOKE.PolygonObject_SetSelectedEdges(swigCPtr, Neighbor.getCPtr(e), BaseSelect.getCPtr(pSel), (int)ltype);
    return ret;
  }

  public Fusee.Math.Core.float3[] /* Vector32*PolygonObject::CreatePhongNormals_cstype */ CreatePhongNormals()  {  /* <Vector32*PolygonObject::CreatePhongNormals_csout> */
      global::System.IntPtr p_ret = C4dApiPINVOKE.PolygonObject_CreatePhongNormals(swigCPtr);
	  if (p_ret == global::System.IntPtr.Zero)
	      return null;
	  int nNormals = this.GetPolygonCount()*4;
      Fusee.Math.Core.float3[] ret = new Fusee.Math.Core.float3[nNormals];
      unsafe
	  {
	      for (int i = 0; i < nNormals; i++)
		  {
			  ret[i] = Fusee.Math.ArrayConvert.ArrayFloatTofloat3(((float *)(p_ret))+3*i);
	      }
	  }
	  C4dApi.DeleteMemPtr(p_ret);
      return ret;
   } /* </Vector32*PolygonObject::CreatePhongNormals_csout> */ 

  public bool GetPolygonTranslationMap(SWIGTYPE_p_Int32 ngoncnt, SWIGTYPE_p_p_Int32 polymap) {
    bool ret = C4dApiPINVOKE.PolygonObject_GetPolygonTranslationMap(swigCPtr, SWIGTYPE_p_Int32.getCPtr(ngoncnt), SWIGTYPE_p_p_Int32.getCPtr(polymap));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool GetNGonTranslationMap(int ngoncnt, SWIGTYPE_p_Int32 polymap, SWIGTYPE_p_p_p_Int32 ngons) {
    bool ret = C4dApiPINVOKE.PolygonObject_GetNGonTranslationMap(swigCPtr, ngoncnt, SWIGTYPE_p_Int32.getCPtr(polymap), SWIGTYPE_p_p_p_Int32.getCPtr(ngons));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_Pgon GetAndBuildNgon() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.PolygonObject_GetAndBuildNgon(swigCPtr);
    SWIGTYPE_p_Pgon ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Pgon(cPtr, false);
    return ret;
  }

  public int GetNgonCount() {
    int ret = C4dApiPINVOKE.PolygonObject_GetNgonCount(swigCPtr);
    return ret;
  }

  public void GetSelectedNgons(BaseSelect sel) {
    C4dApiPINVOKE.PolygonObject_GetSelectedNgons(swigCPtr, BaseSelect.getCPtr(sel));
  }

  public void GetHiddenNgons(BaseSelect sel) {
    C4dApiPINVOKE.PolygonObject_GetHiddenNgons(swigCPtr, BaseSelect.getCPtr(sel));
  }

  public SWIGTYPE_p_NgonBase GetNgonBase() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.PolygonObject_GetNgonBase(swigCPtr);
    SWIGTYPE_p_NgonBase ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_NgonBase(cPtr, false);
    return ret;
  }

  public bool ValidateEdgeSelection(BaseSelect sel) {
    bool ret = C4dApiPINVOKE.PolygonObject_ValidateEdgeSelection__SWIG_0(swigCPtr, BaseSelect.getCPtr(sel));
    return ret;
  }

  public bool ValidateEdgeSelection() {
    bool ret = C4dApiPINVOKE.PolygonObject_ValidateEdgeSelection__SWIG_1(swigCPtr);
    return ret;
  }

  public bool GetEdgeSelection(BaseSelect sel, EDGESELECTIONTYPE type) {
    bool ret = C4dApiPINVOKE.PolygonObject_GetEdgeSelection(swigCPtr, BaseSelect.getCPtr(sel), (int)type);
    return ret;
  }

  public void GetNgonEdgesCompact(SWIGTYPE_p_p_UChar edges) {
    C4dApiPINVOKE.PolygonObject_GetNgonEdgesCompact(swigCPtr, SWIGTYPE_p_p_UChar.getCPtr(edges));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint VBOInitUpdate(BaseDraw bd) {
    uint ret = C4dApiPINVOKE.PolygonObject_VBOInitUpdate(swigCPtr, BaseDraw.getCPtr(bd));
    return ret;
  }

  public bool VBOStartUpdate(BaseDraw bd, GlVertexBufferAccessFlags access, bool latemap) {
    bool ret = C4dApiPINVOKE.PolygonObject_VBOStartUpdate(swigCPtr, BaseDraw.getCPtr(bd), (int)access, latemap);
    return ret;
  }

  public SWIGTYPE_p_GlVertexBufferAttributeInfo VBOUpdateVectorGetAttribute(uint flags) {
    global::System.IntPtr cPtr = C4dApiPINVOKE.PolygonObject_VBOUpdateVectorGetAttribute(swigCPtr, flags);
    SWIGTYPE_p_GlVertexBufferAttributeInfo ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_GlVertexBufferAttributeInfo(cPtr, false);
    return ret;
  }

  public void VBOUpdateVector(int i, SWIGTYPE_p_Vector32 v, SWIGTYPE_p_GlVertexBufferAttributeInfo pInfo) {
    C4dApiPINVOKE.PolygonObject_VBOUpdateVector(swigCPtr, i, SWIGTYPE_p_Vector32.getCPtr(v), SWIGTYPE_p_GlVertexBufferAttributeInfo.getCPtr(pInfo));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void VBOUpdateFaceVector(int i, SWIGTYPE_p_Vector32 v, SWIGTYPE_p_GlVertexBufferAttributeInfo pInfo) {
    C4dApiPINVOKE.PolygonObject_VBOUpdateFaceVector(swigCPtr, i, SWIGTYPE_p_Vector32.getCPtr(v), SWIGTYPE_p_GlVertexBufferAttributeInfo.getCPtr(pInfo));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void VBOInvalidate() {
    C4dApiPINVOKE.PolygonObject_VBOInvalidate(swigCPtr);
  }

  public void VBOEndUpdate(BaseDraw bd) {
    C4dApiPINVOKE.PolygonObject_VBOEndUpdate(swigCPtr, BaseDraw.getCPtr(bd));
  }

  public void VBOFreeUpdate() {
    C4dApiPINVOKE.PolygonObject_VBOFreeUpdate(swigCPtr);
  }

  public new Fusee.Math.Core.double3 /* Vector_cstype_out */ GetPointAt(int inx)  {  /* <Vector_csout> */
      Fusee.Math.Core.double3 ret = C4dApiPINVOKE.PolygonObject_GetPointAt(swigCPtr, inx);
      return ret;
   } /* <Vector_csout> */ 

  public new void SetPointAt(int inx, Fusee.Math.Core.double3 /* Vector_cstype */ v) {
    C4dApiPINVOKE.PolygonObject_SetPointAt(swigCPtr, inx, v /* Vector_csin */);
  }

  public CPolygon GetPolygonAt(int inx) {
    CPolygon ret = new CPolygon(C4dApiPINVOKE.PolygonObject_GetPolygonAt(swigCPtr, inx), true);
    return ret;
  }

  public void SetPolygonAt(int inx, CPolygon v) {
    C4dApiPINVOKE.PolygonObject_SetPolygonAt(swigCPtr, inx, CPolygon.getCPtr(v));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
