//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace C4d {

public class LayerData : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal LayerData(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(LayerData obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~LayerData() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          C4dApiPINVOKE.delete_LayerData(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public bool solo {
    set {
      C4dApiPINVOKE.LayerData_solo_set(swigCPtr, value);
    } 
    get {
      bool ret = C4dApiPINVOKE.LayerData_solo_get(swigCPtr);
      return ret;
    } 
  }

  public bool view {
    set {
      C4dApiPINVOKE.LayerData_view_set(swigCPtr, value);
    } 
    get {
      bool ret = C4dApiPINVOKE.LayerData_view_get(swigCPtr);
      return ret;
    } 
  }

  public bool render {
    set {
      C4dApiPINVOKE.LayerData_render_set(swigCPtr, value);
    } 
    get {
      bool ret = C4dApiPINVOKE.LayerData_render_get(swigCPtr);
      return ret;
    } 
  }

  public bool manager {
    set {
      C4dApiPINVOKE.LayerData_manager_set(swigCPtr, value);
    } 
    get {
      bool ret = C4dApiPINVOKE.LayerData_manager_get(swigCPtr);
      return ret;
    } 
  }

  public bool locked {
    set {
      C4dApiPINVOKE.LayerData_locked_set(swigCPtr, value);
    } 
    get {
      bool ret = C4dApiPINVOKE.LayerData_locked_get(swigCPtr);
      return ret;
    } 
  }

  public bool generators {
    set {
      C4dApiPINVOKE.LayerData_generators_set(swigCPtr, value);
    } 
    get {
      bool ret = C4dApiPINVOKE.LayerData_generators_get(swigCPtr);
      return ret;
    } 
  }

  public bool deformers {
    set {
      C4dApiPINVOKE.LayerData_deformers_set(swigCPtr, value);
    } 
    get {
      bool ret = C4dApiPINVOKE.LayerData_deformers_get(swigCPtr);
      return ret;
    } 
  }

  public bool expressions {
    set {
      C4dApiPINVOKE.LayerData_expressions_set(swigCPtr, value);
    } 
    get {
      bool ret = C4dApiPINVOKE.LayerData_expressions_get(swigCPtr);
      return ret;
    } 
  }

  public bool animation {
    set {
      C4dApiPINVOKE.LayerData_animation_set(swigCPtr, value);
    } 
    get {
      bool ret = C4dApiPINVOKE.LayerData_animation_get(swigCPtr);
      return ret;
    } 
  }

  public Fusee.Math.Core.double3 /* Vector_cstype_out */ color {
    /* <Vector_csvarin> */
    set 
	{
      C4dApiPINVOKE.LayerData_color_set(swigCPtr, value /* Vector_csin */);
    }  /* </Vector_csvarin> */   
   /* <Vector_csvarout> */
   get
   {  
      Fusee.Math.Core.double3 ret = C4dApiPINVOKE.LayerData_color_get(swigCPtr);
      return ret;
   } /* <Vector_csvarout> */ 
  }

  public bool xref {
    set {
      C4dApiPINVOKE.LayerData_xref_set(swigCPtr, value);
    } 
    get {
      bool ret = C4dApiPINVOKE.LayerData_xref_get(swigCPtr);
      return ret;
    } 
  }

  public LayerData() : this(C4dApiPINVOKE.new_LayerData(), true) {
  }

}

}
