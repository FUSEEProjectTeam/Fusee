//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace C4d {

public class Material : BaseMaterial {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal Material(global::System.IntPtr cPtr, bool cMemoryOwn) : base(C4dApiPINVOKE.Material_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Material obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static Material Alloc() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.Material_Alloc();
    Material ret = (cPtr == global::System.IntPtr.Zero) ? null : new Material(cPtr, false);
    return ret;
  }

  public static void Free(SWIGTYPE_p_p_Material bl) {
    C4dApiPINVOKE.Material_Free(SWIGTYPE_p_p_Material.getCPtr(bl));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool GetChannelState(int channel) {
    bool ret = C4dApiPINVOKE.Material_GetChannelState(swigCPtr, channel);
    return ret;
  }

  public void SetChannelState(int channel, bool state) {
    C4dApiPINVOKE.Material_SetChannelState(swigCPtr, channel, state);
  }

  public SWIGTYPE_p_ReflectionLayer AddReflectionLayer() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.Material_AddReflectionLayer(swigCPtr);
    SWIGTYPE_p_ReflectionLayer ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ReflectionLayer(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_ReflectionLayer GetReflectionLayerID(int id) {
    global::System.IntPtr cPtr = C4dApiPINVOKE.Material_GetReflectionLayerID(swigCPtr, id);
    SWIGTYPE_p_ReflectionLayer ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ReflectionLayer(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_ReflectionLayer GetReflectionLayerIndex(int index) {
    global::System.IntPtr cPtr = C4dApiPINVOKE.Material_GetReflectionLayerIndex(swigCPtr, index);
    SWIGTYPE_p_ReflectionLayer ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ReflectionLayer(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_ReflectionLayer GetReflectionLayerTrans() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.Material_GetReflectionLayerTrans(swigCPtr);
    SWIGTYPE_p_ReflectionLayer ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ReflectionLayer(cPtr, false);
    return ret;
  }

  public int GetReflectionLayerCount() {
    int ret = C4dApiPINVOKE.Material_GetReflectionLayerCount(swigCPtr);
    return ret;
  }

  public void RemoveReflectionLayerID(int id) {
    C4dApiPINVOKE.Material_RemoveReflectionLayerID(swigCPtr, id);
  }

  public void RemoveReflectionLayerIndex(int index) {
    C4dApiPINVOKE.Material_RemoveReflectionLayerIndex(swigCPtr, index);
  }

  public void RemoveReflectionAllLayers() {
    C4dApiPINVOKE.Material_RemoveReflectionAllLayers(swigCPtr);
  }

  public void GetAllReflectionShaders(SWIGTYPE_p_maxon__BaseArrayT_BaseShader_p_t shaders) {
    C4dApiPINVOKE.Material_GetAllReflectionShaders(swigCPtr, SWIGTYPE_p_maxon__BaseArrayT_BaseShader_p_t.getCPtr(shaders));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetReflectionPrimaryLayers(SWIGTYPE_p_Int32 reflection_layer, SWIGTYPE_p_Int32 specular_layer) {
    C4dApiPINVOKE.Material_GetReflectionPrimaryLayers(swigCPtr, SWIGTYPE_p_Int32.getCPtr(reflection_layer), SWIGTYPE_p_Int32.getCPtr(specular_layer));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
