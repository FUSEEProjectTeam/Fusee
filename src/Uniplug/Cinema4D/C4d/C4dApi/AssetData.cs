//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace C4d {

public class AssetData : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal AssetData(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(AssetData obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~AssetData() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          C4dApiPINVOKE.delete_AssetData(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public AssetData(BaseDocument t_doc, SWIGTYPE_p_RootTextureString t_rs, ASSETDATA_FLAG t_flags) : this(C4dApiPINVOKE.new_AssetData(BaseDocument.getCPtr(t_doc), SWIGTYPE_p_RootTextureString.getCPtr(t_rs), (int)t_flags), true) {
  }

  public BaseDocument doc {
    set {
      C4dApiPINVOKE.AssetData_doc_set(swigCPtr, BaseDocument.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = C4dApiPINVOKE.AssetData_doc_get(swigCPtr);
      BaseDocument ret = (cPtr == global::System.IntPtr.Zero) ? null : new BaseDocument(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_RootTextureString rs {
    set {
      C4dApiPINVOKE.AssetData_rs_set(swigCPtr, SWIGTYPE_p_RootTextureString.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = C4dApiPINVOKE.AssetData_rs_get(swigCPtr);
      SWIGTYPE_p_RootTextureString ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_RootTextureString(cPtr, false);
      return ret;
    } 
  }

  public ASSETDATA_FLAG flags {
    set {
      C4dApiPINVOKE.AssetData_flags_set(swigCPtr, (int)value);
    } 
    get {
      ASSETDATA_FLAG ret = (ASSETDATA_FLAG)C4dApiPINVOKE.AssetData_flags_get(swigCPtr);
      return ret;
    } 
  }

  public bool Add(Filename fn, BaseList2D bl, bool netRequestOnDemand) {
    bool ret = C4dApiPINVOKE.AssetData_Add__SWIG_0(swigCPtr, Filename.getCPtr(fn), BaseList2D.getCPtr(bl), netRequestOnDemand);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Add(Filename fn, BaseList2D bl) {
    bool ret = C4dApiPINVOKE.AssetData_Add__SWIG_1(swigCPtr, Filename.getCPtr(fn), BaseList2D.getCPtr(bl));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
