//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace C4d {

public class RenderData : BaseList2D {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal RenderData(global::System.IntPtr cPtr, bool cMemoryOwn) : base(C4dApiPINVOKE.RenderData_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(RenderData obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static RenderData Alloc() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.RenderData_Alloc();
    RenderData ret = (cPtr == global::System.IntPtr.Zero) ? null : new RenderData(cPtr, false);
    return ret;
  }

  public static void Free(SWIGTYPE_p_p_RenderData bl) {
    C4dApiPINVOKE.RenderData_Free(SWIGTYPE_p_p_RenderData.getCPtr(bl));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public new RenderData GetNext() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.RenderData_GetNext(swigCPtr);
    RenderData ret = (cPtr == global::System.IntPtr.Zero) ? null : new RenderData(cPtr, false);
    return ret;
  }

  public new RenderData GetPred() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.RenderData_GetPred(swigCPtr);
    RenderData ret = (cPtr == global::System.IntPtr.Zero) ? null : new RenderData(cPtr, false);
    return ret;
  }

  public new RenderData GetUp() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.RenderData_GetUp(swigCPtr);
    RenderData ret = (cPtr == global::System.IntPtr.Zero) ? null : new RenderData(cPtr, false);
    return ret;
  }

  public new RenderData GetDown() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.RenderData_GetDown(swigCPtr);
    RenderData ret = (cPtr == global::System.IntPtr.Zero) ? null : new RenderData(cPtr, false);
    return ret;
  }

  public new RenderData GetDownLast() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.RenderData_GetDownLast(swigCPtr);
    RenderData ret = (cPtr == global::System.IntPtr.Zero) ? null : new RenderData(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_BaseVideoPost GetFirstVideoPost() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.RenderData_GetFirstVideoPost(swigCPtr);
    SWIGTYPE_p_BaseVideoPost ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_BaseVideoPost(cPtr, false);
    return ret;
  }

  public void InsertVideoPost(SWIGTYPE_p_BaseVideoPost pvp, SWIGTYPE_p_BaseVideoPost pred) {
    C4dApiPINVOKE.RenderData_InsertVideoPost__SWIG_0(swigCPtr, SWIGTYPE_p_BaseVideoPost.getCPtr(pvp), SWIGTYPE_p_BaseVideoPost.getCPtr(pred));
  }

  public void InsertVideoPost(SWIGTYPE_p_BaseVideoPost pvp) {
    C4dApiPINVOKE.RenderData_InsertVideoPost__SWIG_1(swigCPtr, SWIGTYPE_p_BaseVideoPost.getCPtr(pvp));
  }

  public void InsertVideoPostLast(SWIGTYPE_p_BaseVideoPost pvp) {
    C4dApiPINVOKE.RenderData_InsertVideoPostLast(swigCPtr, SWIGTYPE_p_BaseVideoPost.getCPtr(pvp));
  }

  public MultipassObject GetFirstMultipass() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.RenderData_GetFirstMultipass(swigCPtr);
    MultipassObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new MultipassObject(cPtr, false);
    return ret;
  }

  public void InsertMultipass(MultipassObject obj, MultipassObject pred) {
    C4dApiPINVOKE.RenderData_InsertMultipass__SWIG_0(swigCPtr, MultipassObject.getCPtr(obj), MultipassObject.getCPtr(pred));
  }

  public void InsertMultipass(MultipassObject obj) {
    C4dApiPINVOKE.RenderData_InsertMultipass__SWIG_1(swigCPtr, MultipassObject.getCPtr(obj));
  }

}

}
