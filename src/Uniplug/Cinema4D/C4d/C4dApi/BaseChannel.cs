//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace C4d {

public class BaseChannel : C4DAtom {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal BaseChannel(global::System.IntPtr cPtr, bool cMemoryOwn) : base(C4dApiPINVOKE.BaseChannel_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(BaseChannel obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static BaseChannel Alloc() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.BaseChannel_Alloc();
    BaseChannel ret = (cPtr == global::System.IntPtr.Zero) ? null : new BaseChannel(cPtr, false);
    return ret;
  }

  public static void Free(SWIGTYPE_p_p_BaseChannel bc) {
    C4dApiPINVOKE.BaseChannel_Free(SWIGTYPE_p_p_BaseChannel.getCPtr(bc));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public INITRENDERRESULT InitTexture(InitRenderStruct irs) {
    INITRENDERRESULT ret = (INITRENDERRESULT)C4dApiPINVOKE.BaseChannel_InitTexture(swigCPtr, InitRenderStruct.getCPtr(irs));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void FreeTexture() {
    C4dApiPINVOKE.BaseChannel_FreeTexture(swigCPtr);
  }

  public BaseContainer GetData() {
    BaseContainer ret = new BaseContainer(C4dApiPINVOKE.BaseChannel_GetData(swigCPtr), true);
    return ret;
  }

  public void SetData(BaseContainer ct) {
    C4dApiPINVOKE.BaseChannel_SetData(swigCPtr, BaseContainer.getCPtr(ct));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public int GetShaderID() {
    int ret = C4dApiPINVOKE.BaseChannel_GetShaderID(swigCPtr);
    return ret;
  }

  public BaseShader GetShader() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.BaseChannel_GetShader(swigCPtr);
    BaseShader ret = (cPtr == global::System.IntPtr.Zero) ? null : new BaseShader(cPtr, false);
    return ret;
  }

  public BaseBitmap GetBitmap() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.BaseChannel_GetBitmap(swigCPtr);
    BaseBitmap ret = (cPtr == global::System.IntPtr.Zero) ? null : new BaseBitmap(cPtr, false);
    return ret;
  }

  public Fusee.Math.Core.double3 /* Vector_cstype_out */ Sample(SWIGTYPE_p_VolumeData vd, ref Fusee.Math.Core.double3 /* Vector*&_cstype */ p, ref Fusee.Math.Core.double3 /* Vector*&_cstype */ delta, ref Fusee.Math.Core.double3 /* Vector*&_cstype */ n, double t, int tflag, double off, double scale)  {  /* <Vector_csout> */
      Fusee.Math.Core.double3 ret = C4dApiPINVOKE.BaseChannel_Sample(swigCPtr, SWIGTYPE_p_VolumeData.getCPtr(vd), ref p /* Vector*&_csin */, ref delta /* Vector*&_csin */, ref n /* Vector*&_csin */, t, tflag, off, scale);
      return ret;
   } /* <Vector_csout> */ 

  public bool Compare(BaseChannel dst) {
    bool ret = C4dApiPINVOKE.BaseChannel_Compare(swigCPtr, BaseChannel.getCPtr(dst));
    return ret;
  }

  public bool Attach(GeListNode element) {
    bool ret = C4dApiPINVOKE.BaseChannel_Attach(swigCPtr, GeListNode.getCPtr(element));
    return ret;
  }

}

}
