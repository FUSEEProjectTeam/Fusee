//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace C4d {

public class HierarchyHelp : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal HierarchyHelp(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(HierarchyHelp obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public double GetLOD() {
    double ret = C4dApiPINVOKE.HierarchyHelp_GetLOD(swigCPtr);
    return ret;
  }

  public BUILDFLAGS GetBuildFlags() {
    BUILDFLAGS ret = (BUILDFLAGS)C4dApiPINVOKE.HierarchyHelp_GetBuildFlags(swigCPtr);
    return ret;
  }

  public Fusee.Math.Core.double4x4 /* constMatrix&_cstype_out */ GetMg()  {  /* <constMatrix&_csout> */
      global::System.IntPtr p_ret = C4dApiPINVOKE.HierarchyHelp_GetMg(swigCPtr);
      Fusee.Math.Core.double4x4 ret;
      unsafe {ret = Fusee.Math.ArrayConvert.ArrayDoubleC4DLayoutTodouble4x4((double *)p_ret);}
      return ret;
   } /* </constMatrix&_csout> */ 

  public BaseThread GetThread() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.HierarchyHelp_GetThread(swigCPtr);
    BaseThread ret = (cPtr == global::System.IntPtr.Zero) ? null : new BaseThread(cPtr, false);
    return ret;
  }

  public BaseDocument GetDocument() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.HierarchyHelp_GetDocument(swigCPtr);
    BaseDocument ret = (cPtr == global::System.IntPtr.Zero) ? null : new BaseDocument(cPtr, false);
    return ret;
  }

}

}
