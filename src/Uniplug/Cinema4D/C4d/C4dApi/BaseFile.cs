//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace C4d {

public class BaseFile : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal BaseFile(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(BaseFile obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public static BaseFile Alloc() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.BaseFile_Alloc();
    BaseFile ret = (cPtr == global::System.IntPtr.Zero) ? null : new BaseFile(cPtr, false);
    return ret;
  }

  public static void Free(SWIGTYPE_p_p_BaseFile fl) {
    C4dApiPINVOKE.BaseFile_Free(SWIGTYPE_p_p_BaseFile.getCPtr(fl));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool Open(Filename name, FILEOPEN mode, FILEDIALOG error_dialog, BYTEORDER order, int type, int creator) {
    bool ret = C4dApiPINVOKE.BaseFile_Open__SWIG_0(swigCPtr, Filename.getCPtr(name), (int)mode, (int)error_dialog, (int)order, type, creator);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Open(Filename name, FILEOPEN mode, FILEDIALOG error_dialog, BYTEORDER order, int type) {
    bool ret = C4dApiPINVOKE.BaseFile_Open__SWIG_1(swigCPtr, Filename.getCPtr(name), (int)mode, (int)error_dialog, (int)order, type);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Open(Filename name, FILEOPEN mode, FILEDIALOG error_dialog, BYTEORDER order) {
    bool ret = C4dApiPINVOKE.BaseFile_Open__SWIG_2(swigCPtr, Filename.getCPtr(name), (int)mode, (int)error_dialog, (int)order);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Open(Filename name, FILEOPEN mode, FILEDIALOG error_dialog) {
    bool ret = C4dApiPINVOKE.BaseFile_Open__SWIG_3(swigCPtr, Filename.getCPtr(name), (int)mode, (int)error_dialog);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Open(Filename name, FILEOPEN mode) {
    bool ret = C4dApiPINVOKE.BaseFile_Open__SWIG_4(swigCPtr, Filename.getCPtr(name), (int)mode);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Open(Filename name) {
    bool ret = C4dApiPINVOKE.BaseFile_Open__SWIG_5(swigCPtr, Filename.getCPtr(name));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Close() {
    bool ret = C4dApiPINVOKE.BaseFile_Close(swigCPtr);
    return ret;
  }

  public int ReadBytes(SWIGTYPE_p_void data, int len, bool just_try_it) {
    int ret = C4dApiPINVOKE.BaseFile_ReadBytes__SWIG_0(swigCPtr, SWIGTYPE_p_void.getCPtr(data), len, just_try_it);
    return ret;
  }

  public int ReadBytes(SWIGTYPE_p_void data, int len) {
    int ret = C4dApiPINVOKE.BaseFile_ReadBytes__SWIG_1(swigCPtr, SWIGTYPE_p_void.getCPtr(data), len);
    return ret;
  }

  public int TryReadBytes(SWIGTYPE_p_void data, int len) {
    int ret = C4dApiPINVOKE.BaseFile_TryReadBytes(swigCPtr, SWIGTYPE_p_void.getCPtr(data), len);
    return ret;
  }

  public bool WriteBytes(SWIGTYPE_p_void data, int len) {
    bool ret = C4dApiPINVOKE.BaseFile_WriteBytes(swigCPtr, SWIGTYPE_p_void.getCPtr(data), len);
    return ret;
  }

  public bool Seek(long pos, FILESEEK mode) {
    bool ret = C4dApiPINVOKE.BaseFile_Seek__SWIG_0(swigCPtr, pos, (int)mode);
    return ret;
  }

  public bool Seek(long pos) {
    bool ret = C4dApiPINVOKE.BaseFile_Seek__SWIG_1(swigCPtr, pos);
    return ret;
  }

  public long GetPosition() {
    long ret = C4dApiPINVOKE.BaseFile_GetPosition(swigCPtr);
    return ret;
  }

  public long GetLength() {
    long ret = C4dApiPINVOKE.BaseFile_GetLength(swigCPtr);
    return ret;
  }

  public LOCATION GetLocation() {
    LOCATION ret = (LOCATION)C4dApiPINVOKE.BaseFile_GetLocation(swigCPtr);
    return ret;
  }

  public FILEERROR GetError() {
    FILEERROR ret = (FILEERROR)C4dApiPINVOKE.BaseFile_GetError(swigCPtr);
    return ret;
  }

  public void SetError(FILEERROR error) {
    C4dApiPINVOKE.BaseFile_SetError(swigCPtr, (int)error);
  }

  public void SetOrder(BYTEORDER order) {
    C4dApiPINVOKE.BaseFile_SetOrder(swigCPtr, (int)order);
  }

  public bool ReadChar(SWIGTYPE_p_Char v) {
    bool ret = C4dApiPINVOKE.BaseFile_ReadChar(swigCPtr, SWIGTYPE_p_Char.getCPtr(v));
    return ret;
  }

  public bool ReadUChar(SWIGTYPE_p_UChar v) {
    bool ret = C4dApiPINVOKE.BaseFile_ReadUChar(swigCPtr, SWIGTYPE_p_UChar.getCPtr(v));
    return ret;
  }

  public bool ReadInt16(SWIGTYPE_p_Int16 v) {
    bool ret = C4dApiPINVOKE.BaseFile_ReadInt16(swigCPtr, SWIGTYPE_p_Int16.getCPtr(v));
    return ret;
  }

  public bool ReadUInt16(SWIGTYPE_p_UInt16 v) {
    bool ret = C4dApiPINVOKE.BaseFile_ReadUInt16(swigCPtr, SWIGTYPE_p_UInt16.getCPtr(v));
    return ret;
  }

  public bool ReadInt32(SWIGTYPE_p_Int32 v) {
    bool ret = C4dApiPINVOKE.BaseFile_ReadInt32(swigCPtr, SWIGTYPE_p_Int32.getCPtr(v));
    return ret;
  }

  public bool ReadUInt32(SWIGTYPE_p_UInt32 v) {
    bool ret = C4dApiPINVOKE.BaseFile_ReadUInt32(swigCPtr, SWIGTYPE_p_UInt32.getCPtr(v));
    return ret;
  }

  public bool ReadFloat32(SWIGTYPE_p_Float32 v) {
    bool ret = C4dApiPINVOKE.BaseFile_ReadFloat32(swigCPtr, SWIGTYPE_p_Float32.getCPtr(v));
    return ret;
  }

  public bool ReadFloat64(SWIGTYPE_p_Float64 v) {
    bool ret = C4dApiPINVOKE.BaseFile_ReadFloat64(swigCPtr, SWIGTYPE_p_Float64.getCPtr(v));
    return ret;
  }

  public bool ReadInt64(SWIGTYPE_p_Int64 v) {
    bool ret = C4dApiPINVOKE.BaseFile_ReadInt64(swigCPtr, SWIGTYPE_p_Int64.getCPtr(v));
    return ret;
  }

  public bool ReadUInt64(SWIGTYPE_p_UInt64 v) {
    bool ret = C4dApiPINVOKE.BaseFile_ReadUInt64(swigCPtr, SWIGTYPE_p_UInt64.getCPtr(v));
    return ret;
  }

  public bool ReadFilename(Filename v) {
    bool ret = C4dApiPINVOKE.BaseFile_ReadFilename(swigCPtr, Filename.getCPtr(v));
    return ret;
  }

  public bool ReadBool(SWIGTYPE_p_Bool v) {
    bool ret = C4dApiPINVOKE.BaseFile_ReadBool(swigCPtr, SWIGTYPE_p_Bool.getCPtr(v));
    return ret;
  }

  public bool ReadString(SWIGTYPE_p_String v) {
    bool ret = C4dApiPINVOKE.BaseFile_ReadString(swigCPtr, SWIGTYPE_p_String.getCPtr(v));
    return ret;
  }

  public bool ReadVector32(SWIGTYPE_p_Vector32 v) {
    bool ret = C4dApiPINVOKE.BaseFile_ReadVector32(swigCPtr, SWIGTYPE_p_Vector32.getCPtr(v));
    return ret;
  }

  public bool ReadVector64(SWIGTYPE_p_Vector64 v) {
    bool ret = C4dApiPINVOKE.BaseFile_ReadVector64(swigCPtr, SWIGTYPE_p_Vector64.getCPtr(v));
    return ret;
  }

  public bool ReadMatrix32(SWIGTYPE_p_Matrix32 v) {
    bool ret = C4dApiPINVOKE.BaseFile_ReadMatrix32(swigCPtr, SWIGTYPE_p_Matrix32.getCPtr(v));
    return ret;
  }

  public bool ReadMatrix64(SWIGTYPE_p_Matrix64 v) {
    bool ret = C4dApiPINVOKE.BaseFile_ReadMatrix64(swigCPtr, SWIGTYPE_p_Matrix64.getCPtr(v));
    return ret;
  }

  public bool WriteChar(char v) {
    bool ret = C4dApiPINVOKE.BaseFile_WriteChar(swigCPtr, v);
    return ret;
  }

  public bool WriteUChar(byte v) {
    bool ret = C4dApiPINVOKE.BaseFile_WriteUChar(swigCPtr, v);
    return ret;
  }

  public bool WriteInt16(short v) {
    bool ret = C4dApiPINVOKE.BaseFile_WriteInt16(swigCPtr, v);
    return ret;
  }

  public bool WriteUInt16(ushort v) {
    bool ret = C4dApiPINVOKE.BaseFile_WriteUInt16(swigCPtr, v);
    return ret;
  }

  public bool WriteInt32(int v) {
    bool ret = C4dApiPINVOKE.BaseFile_WriteInt32(swigCPtr, v);
    return ret;
  }

  public bool WriteUInt32(uint v) {
    bool ret = C4dApiPINVOKE.BaseFile_WriteUInt32(swigCPtr, v);
    return ret;
  }

  public bool WriteFloat32(float v) {
    bool ret = C4dApiPINVOKE.BaseFile_WriteFloat32(swigCPtr, v);
    return ret;
  }

  public bool WriteFloat64(double v) {
    bool ret = C4dApiPINVOKE.BaseFile_WriteFloat64(swigCPtr, v);
    return ret;
  }

  public bool WriteInt64(long v) {
    bool ret = C4dApiPINVOKE.BaseFile_WriteInt64(swigCPtr, v);
    return ret;
  }

  public bool WriteUInt64(ulong v) {
    bool ret = C4dApiPINVOKE.BaseFile_WriteUInt64(swigCPtr, v);
    return ret;
  }

  public bool WriteFilename(Filename v) {
    bool ret = C4dApiPINVOKE.BaseFile_WriteFilename(swigCPtr, Filename.getCPtr(v));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool WriteBool(bool v) {
    bool ret = C4dApiPINVOKE.BaseFile_WriteBool(swigCPtr, v);
    return ret;
  }

  public bool WriteString(string /* constString&_cstype */ v) {
    bool ret = C4dApiPINVOKE.BaseFile_WriteString(swigCPtr, v);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool WriteVector32(SWIGTYPE_p_Vector32 v) {
    bool ret = C4dApiPINVOKE.BaseFile_WriteVector32(swigCPtr, SWIGTYPE_p_Vector32.getCPtr(v));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool WriteVector64(SWIGTYPE_p_Vector64 v) {
    bool ret = C4dApiPINVOKE.BaseFile_WriteVector64(swigCPtr, SWIGTYPE_p_Vector64.getCPtr(v));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool WriteMatrix32(SWIGTYPE_p_Matrix32 v) {
    bool ret = C4dApiPINVOKE.BaseFile_WriteMatrix32(swigCPtr, SWIGTYPE_p_Matrix32.getCPtr(v));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool WriteMatrix64(SWIGTYPE_p_Matrix64 v) {
    bool ret = C4dApiPINVOKE.BaseFile_WriteMatrix64(swigCPtr, SWIGTYPE_p_Matrix64.getCPtr(v));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
