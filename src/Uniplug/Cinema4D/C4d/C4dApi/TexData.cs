//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace C4d {

public class TexData : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal TexData(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(TexData obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public Fusee.Math.Core.double4x4 /* Matrix_cstype */ m {
    /* <Matrix_csvarin> */
    set 
	{
       double[] adbl_value;
       unsafe 
	   {
		   adbl_value = Fusee.Math.ArrayConvert.double4x4ToArrayDoubleC4DLayout(value);
           fixed (double *pdbl_value = adbl_value) 
		   {
              C4dApiPINVOKE.TexData_m_set(swigCPtr, (global::System.IntPtr) pdbl_value /*  Matrix_csin */);
		   }
	   }
    }  /* </Matrix_csvarin> */   
   /* <Matrix_csvarout> */
   get
   {  
      C34M ret_c34m = C4dApiPINVOKE.TexData_m_get(swigCPtr);
	  Fusee.Math.Core.double4x4 ret;
	  unsafe {ret = Fusee.Math.ArrayConvert.ArrayDoubleC4DLayoutTodouble4x4(ret_c34m.m);}
      return ret;   
   } /* <Matrix_csvarout> */ 
  }

  public Fusee.Math.Core.double4x4 /* Matrix_cstype */ im {
    /* <Matrix_csvarin> */
    set 
	{
       double[] adbl_value;
       unsafe 
	   {
		   adbl_value = Fusee.Math.ArrayConvert.double4x4ToArrayDoubleC4DLayout(value);
           fixed (double *pdbl_value = adbl_value) 
		   {
              C4dApiPINVOKE.TexData_im_set(swigCPtr, (global::System.IntPtr) pdbl_value /*  Matrix_csin */);
		   }
	   }
    }  /* </Matrix_csvarin> */   
   /* <Matrix_csvarout> */
   get
   {  
      C34M ret_c34m = C4dApiPINVOKE.TexData_im_get(swigCPtr);
	  Fusee.Math.Core.double4x4 ret;
	  unsafe {ret = Fusee.Math.ArrayConvert.ArrayDoubleC4DLayoutTodouble4x4(ret_c34m.m);}
      return ret;   
   } /* <Matrix_csvarout> */ 
  }

  public char texflag {
    set {
      C4dApiPINVOKE.TexData_texflag_set(swigCPtr, value);
    } 
    get {
      char ret = C4dApiPINVOKE.TexData_texflag_get(swigCPtr);
      return ret;
    } 
  }

  public char additive {
    set {
      C4dApiPINVOKE.TexData_additive_set(swigCPtr, value);
    } 
    get {
      char ret = C4dApiPINVOKE.TexData_additive_get(swigCPtr);
      return ret;
    } 
  }

  public char proj {
    set {
      C4dApiPINVOKE.TexData_proj_set(swigCPtr, value);
    } 
    get {
      char ret = C4dApiPINVOKE.TexData_proj_get(swigCPtr);
      return ret;
    } 
  }

  public char side {
    set {
      C4dApiPINVOKE.TexData_side_set(swigCPtr, value);
    } 
    get {
      char ret = C4dApiPINVOKE.TexData_side_get(swigCPtr);
      return ret;
    } 
  }

  public int restrict {
    set {
      C4dApiPINVOKE.TexData_restrict_set(swigCPtr, value);
    } 
    get {
      int ret = C4dApiPINVOKE.TexData_restrict_get(swigCPtr);
      return ret;
    } 
  }

  public double ox {
    set {
      C4dApiPINVOKE.TexData_ox_set(swigCPtr, value);
    } 
    get {
      double ret = C4dApiPINVOKE.TexData_ox_get(swigCPtr);
      return ret;
    } 
  }

  public double oy {
    set {
      C4dApiPINVOKE.TexData_oy_set(swigCPtr, value);
    } 
    get {
      double ret = C4dApiPINVOKE.TexData_oy_get(swigCPtr);
      return ret;
    } 
  }

  public double lenx {
    set {
      C4dApiPINVOKE.TexData_lenx_set(swigCPtr, value);
    } 
    get {
      double ret = C4dApiPINVOKE.TexData_lenx_get(swigCPtr);
      return ret;
    } 
  }

  public double leny {
    set {
      C4dApiPINVOKE.TexData_leny_set(swigCPtr, value);
    } 
    get {
      double ret = C4dApiPINVOKE.TexData_leny_get(swigCPtr);
      return ret;
    } 
  }

  public double repetitionx {
    set {
      C4dApiPINVOKE.TexData_repetitionx_set(swigCPtr, value);
    } 
    get {
      double ret = C4dApiPINVOKE.TexData_repetitionx_get(swigCPtr);
      return ret;
    } 
  }

  public double repetitiony {
    set {
      C4dApiPINVOKE.TexData_repetitiony_set(swigCPtr, value);
    } 
    get {
      double ret = C4dApiPINVOKE.TexData_repetitiony_get(swigCPtr);
      return ret;
    } 
  }

  public GeListNode mp {
    set {
      C4dApiPINVOKE.TexData_mp_set(swigCPtr, GeListNode.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = C4dApiPINVOKE.TexData_mp_get(swigCPtr);
      GeListNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new GeListNode(cPtr, false);
      return ret;
    } 
  }

  public int uvwind {
    set {
      C4dApiPINVOKE.TexData_uvwind_set(swigCPtr, value);
    } 
    get {
      int ret = C4dApiPINVOKE.TexData_uvwind_get(swigCPtr);
      return ret;
    } 
  }

  public BaseView camera {
    set {
      C4dApiPINVOKE.TexData_camera_set(swigCPtr, BaseView.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = C4dApiPINVOKE.TexData_camera_get(swigCPtr);
      BaseView ret = (cPtr == global::System.IntPtr.Zero) ? null : new BaseView(cPtr, false);
      return ret;
    } 
  }

  public char uvbump {
    set {
      C4dApiPINVOKE.TexData_uvbump_set(swigCPtr, value);
    } 
    get {
      char ret = C4dApiPINVOKE.TexData_uvbump_get(swigCPtr);
      return ret;
    } 
  }

  public BaseTag link {
    set {
      C4dApiPINVOKE.TexData_link_set(swigCPtr, BaseTag.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = C4dApiPINVOKE.TexData_link_get(swigCPtr);
      BaseTag ret = (cPtr == global::System.IntPtr.Zero) ? null : new BaseTag(cPtr, false);
      return ret;
    } 
  }

  public static TexData Alloc() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.TexData_Alloc();
    TexData ret = (cPtr == global::System.IntPtr.Zero) ? null : new TexData(cPtr, false);
    return ret;
  }

  public static void Free(SWIGTYPE_p_p_TexData td) {
    C4dApiPINVOKE.TexData_Free(SWIGTYPE_p_p_TexData.getCPtr(td));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Init() {
    C4dApiPINVOKE.TexData_Init(swigCPtr);
  }

}

}
