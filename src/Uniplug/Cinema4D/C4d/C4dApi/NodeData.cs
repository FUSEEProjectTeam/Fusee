//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace C4d {

public class NodeData : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal NodeData(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(NodeData obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~NodeData() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          C4dApiPINVOKE.delete_NodeData(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public NodeData() : this(C4dApiPINVOKE.new_NodeData(), true) {
  }

  public GeListNode Get() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.NodeData_Get(swigCPtr);
    GeListNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new GeListNode(cPtr, false);
    return ret;
  }

  public virtual bool Init(GeListNode node) {
    bool ret = C4dApiPINVOKE.NodeData_Init(swigCPtr, GeListNode.getCPtr(node));
    return ret;
  }

  public virtual void Free(GeListNode node) {
    C4dApiPINVOKE.NodeData_Free(swigCPtr, GeListNode.getCPtr(node));
  }

  public virtual bool Read(GeListNode node, HyperFile hf, int level) {
    bool ret = C4dApiPINVOKE.NodeData_Read(swigCPtr, GeListNode.getCPtr(node), HyperFile.getCPtr(hf), level);
    return ret;
  }

  public virtual bool Write(GeListNode node, HyperFile hf) {
    bool ret = C4dApiPINVOKE.NodeData_Write(swigCPtr, GeListNode.getCPtr(node), HyperFile.getCPtr(hf));
    return ret;
  }

  public virtual bool CopyTo(NodeData dest, GeListNode snode, GeListNode dnode, COPYFLAGS flags, AliasTrans trn) {
    bool ret = C4dApiPINVOKE.NodeData_CopyTo(swigCPtr, NodeData.getCPtr(dest), GeListNode.getCPtr(snode), GeListNode.getCPtr(dnode), (int)flags, AliasTrans.getCPtr(trn));
    return ret;
  }

  public virtual bool Message(GeListNode node, int type, SWIGTYPE_p_void data) {
    bool ret = C4dApiPINVOKE.NodeData_Message(swigCPtr, GeListNode.getCPtr(node), type, SWIGTYPE_p_void.getCPtr(data));
    return ret;
  }

  public virtual void GetBubbleHelp(GeListNode node, SWIGTYPE_p_String str) {
    C4dApiPINVOKE.NodeData_GetBubbleHelp(swigCPtr, GeListNode.getCPtr(node), SWIGTYPE_p_String.getCPtr(str));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual BaseDocument GetDocument(GeListNode node) {
    global::System.IntPtr cPtr = C4dApiPINVOKE.NodeData_GetDocument(swigCPtr, GeListNode.getCPtr(node));
    BaseDocument ret = (cPtr == global::System.IntPtr.Zero) ? null : new BaseDocument(cPtr, false);
    return ret;
  }

  public virtual int GetBranchInfo(GeListNode node, BranchInfo info, int max, GETBRANCHINFO flags) {
    int ret = C4dApiPINVOKE.NodeData_GetBranchInfo(swigCPtr, GeListNode.getCPtr(node), BranchInfo.getCPtr(info), max, (int)flags);
    return ret;
  }

  public virtual bool IsInstanceOf(GeListNode node, int type) {
    bool ret = C4dApiPINVOKE.NodeData_IsInstanceOf(swigCPtr, GeListNode.getCPtr(node), type);
    return ret;
  }

  public virtual bool GetDDescription(GeListNode node, Description description, SWIGTYPE_p_DESCFLAGS_DESC flags) {
    bool ret = C4dApiPINVOKE.NodeData_GetDDescription(swigCPtr, GeListNode.getCPtr(node), Description.getCPtr(description), SWIGTYPE_p_DESCFLAGS_DESC.getCPtr(flags));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool GetDParameter(GeListNode node, DescID id, GeData t_data, SWIGTYPE_p_DESCFLAGS_GET flags) {
    bool ret = C4dApiPINVOKE.NodeData_GetDParameter(swigCPtr, GeListNode.getCPtr(node), DescID.getCPtr(id), GeData.getCPtr(t_data), SWIGTYPE_p_DESCFLAGS_GET.getCPtr(flags));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool SetDParameter(GeListNode node, DescID id, GeData t_data, SWIGTYPE_p_DESCFLAGS_SET flags) {
    bool ret = C4dApiPINVOKE.NodeData_SetDParameter(swigCPtr, GeListNode.getCPtr(node), DescID.getCPtr(id), GeData.getCPtr(t_data), SWIGTYPE_p_DESCFLAGS_SET.getCPtr(flags));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool GetDEnabling(GeListNode node, DescID id, GeData t_data, DESCFLAGS_ENABLE flags, BaseContainer itemdesc) {
    bool ret = C4dApiPINVOKE.NodeData_GetDEnabling(swigCPtr, GeListNode.getCPtr(node), DescID.getCPtr(id), GeData.getCPtr(t_data), (int)flags, BaseContainer.getCPtr(itemdesc));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool TranslateDescID(GeListNode node, DescID id, DescID res_id, SWIGTYPE_p_p_C4DAtom res_at) {
    bool ret = C4dApiPINVOKE.NodeData_TranslateDescID(swigCPtr, GeListNode.getCPtr(node), DescID.getCPtr(id), DescID.getCPtr(res_id), SWIGTYPE_p_p_C4DAtom.getCPtr(res_at));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool IsDocumentRelated(GeListNode node, SWIGTYPE_p_Bool docrelated) {
    bool ret = C4dApiPINVOKE.NodeData_IsDocumentRelated(swigCPtr, GeListNode.getCPtr(node), SWIGTYPE_p_Bool.getCPtr(docrelated));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
