//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace C4d {

public class BaseMaterial : BaseList2D {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal BaseMaterial(global::System.IntPtr cPtr, bool cMemoryOwn) : base(C4dApiPINVOKE.BaseMaterial_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(BaseMaterial obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public new static BaseMaterial Alloc(int type) {
    global::System.IntPtr cPtr = C4dApiPINVOKE.BaseMaterial_Alloc(type);
    BaseMaterial ret = (BaseMaterial) C4dApiPINVOKE.InstantiateConcreteMaterial(cPtr, false);
    return ret;
}

  public static void Free(SWIGTYPE_p_p_BaseMaterial bl) {
    C4dApiPINVOKE.BaseMaterial_Free(SWIGTYPE_p_p_BaseMaterial.getCPtr(bl));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public new BaseMaterial GetNext() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.BaseMaterial_GetNext(swigCPtr);
    BaseMaterial ret = (BaseMaterial) C4dApiPINVOKE.InstantiateConcreteMaterial(cPtr, false);
    return ret;
}

  public new BaseMaterial GetPred() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.BaseMaterial_GetPred(swigCPtr);
    BaseMaterial ret = (BaseMaterial) C4dApiPINVOKE.InstantiateConcreteMaterial(cPtr, false);
    return ret;
}

  public void Update(bool preview, bool rttm) {
    C4dApiPINVOKE.BaseMaterial_Update(swigCPtr, preview, rttm);
  }

  public BaseChannel GetChannel(int id) {
    global::System.IntPtr cPtr = C4dApiPINVOKE.BaseMaterial_GetChannel(swigCPtr, id);
    BaseChannel ret = (cPtr == global::System.IntPtr.Zero) ? null : new BaseChannel(cPtr, false);
    return ret;
  }

  public INITRENDERRESULT InitTextures(InitRenderStruct irs) {
    INITRENDERRESULT ret = (INITRENDERRESULT)C4dApiPINVOKE.BaseMaterial_InitTextures(swigCPtr, InitRenderStruct.getCPtr(irs));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void UnlockTextures() {
    C4dApiPINVOKE.BaseMaterial_UnlockTextures(swigCPtr);
  }

  public void Displace(SWIGTYPE_p_VolumeData sd) {
    C4dApiPINVOKE.BaseMaterial_Displace(swigCPtr, SWIGTYPE_p_VolumeData.getCPtr(sd));
  }

  public void ChangeNormal(SWIGTYPE_p_VolumeData sd) {
    C4dApiPINVOKE.BaseMaterial_ChangeNormal(swigCPtr, SWIGTYPE_p_VolumeData.getCPtr(sd));
  }

  public void CalcSurface(SWIGTYPE_p_VolumeData sd) {
    C4dApiPINVOKE.BaseMaterial_CalcSurface(swigCPtr, SWIGTYPE_p_VolumeData.getCPtr(sd));
  }

  public void CalcTransparency(SWIGTYPE_p_VolumeData sd) {
    C4dApiPINVOKE.BaseMaterial_CalcTransparency(swigCPtr, SWIGTYPE_p_VolumeData.getCPtr(sd));
  }

  public void CalcAlpha(SWIGTYPE_p_VolumeData sd) {
    C4dApiPINVOKE.BaseMaterial_CalcAlpha(swigCPtr, SWIGTYPE_p_VolumeData.getCPtr(sd));
  }

  public void CalcVolumetric(SWIGTYPE_p_VolumeData sd) {
    C4dApiPINVOKE.BaseMaterial_CalcVolumetric(swigCPtr, SWIGTYPE_p_VolumeData.getCPtr(sd));
  }

  public void InitCalculation(SWIGTYPE_p_VolumeData sd, INITCALCULATION type) {
    C4dApiPINVOKE.BaseMaterial_InitCalculation(swigCPtr, SWIGTYPE_p_VolumeData.getCPtr(sd), (int)type);
  }

  public bool Compare(BaseMaterial snd) {
    bool ret = C4dApiPINVOKE.BaseMaterial_Compare(swigCPtr, BaseMaterial.getCPtr(snd));
    return ret;
  }

  public BaseBitmap GetPreview(int flags) {
    global::System.IntPtr cPtr = C4dApiPINVOKE.BaseMaterial_GetPreview(swigCPtr, flags);
    BaseBitmap ret = (cPtr == global::System.IntPtr.Zero) ? null : new BaseBitmap(cPtr, false);
    return ret;
  }

  public RayIllumination GetRayIllumination() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.BaseMaterial_GetRayIllumination(swigCPtr);
    RayIllumination ret = (cPtr == global::System.IntPtr.Zero) ? null : new RayIllumination(cPtr, false);
    return ret;
  }

  public Fusee.Math.Core.double3 /* Vector_cstype_out */ GetAverageColor(int channel)  {  /* <Vector_csout> */
      Fusee.Math.Core.double3 ret = C4dApiPINVOKE.BaseMaterial_GetAverageColor__SWIG_0(swigCPtr, channel);
      return ret;
   } /* <Vector_csout> */ 

  public Fusee.Math.Core.double3 /* Vector_cstype_out */ GetAverageColor()  {  /* <Vector_csout> */
      Fusee.Math.Core.double3 ret = C4dApiPINVOKE.BaseMaterial_GetAverageColor__SWIG_1(swigCPtr);
      return ret;
   } /* <Vector_csout> */ 

  public VOLUMEINFO GetRenderInfo() {
    VOLUMEINFO ret = (VOLUMEINFO)C4dApiPINVOKE.BaseMaterial_GetRenderInfo(swigCPtr);
    return ret;
  }

  public bool HasEditorTransparency() {
    bool ret = C4dApiPINVOKE.BaseMaterial_HasEditorTransparency(swigCPtr);
    return ret;
  }

  public GL_MESSAGE GlMessage(int type, SWIGTYPE_p_void data) {
    GL_MESSAGE ret = (GL_MESSAGE)C4dApiPINVOKE.BaseMaterial_GlMessage__SWIG_0(swigCPtr, type, SWIGTYPE_p_void.getCPtr(data));
    return ret;
  }

  public GL_MESSAGE GlMessage(int type) {
    GL_MESSAGE ret = (GL_MESSAGE)C4dApiPINVOKE.BaseMaterial_GlMessage__SWIG_1(swigCPtr, type);
    return ret;
  }

}

}
