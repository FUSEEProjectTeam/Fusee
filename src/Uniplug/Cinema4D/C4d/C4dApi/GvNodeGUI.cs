//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace C4d {

public class GvNodeGUI : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal GvNodeGUI(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(GvNodeGUI obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public bool Attach(SWIGTYPE_p_GeDialog dialog, GvNodeMaster master) {
    bool ret = C4dApiPINVOKE.GvNodeGUI_Attach(swigCPtr, SWIGTYPE_p_GeDialog.getCPtr(dialog), GvNodeMaster.getCPtr(master));
    return ret;
  }

  public void Detach() {
    C4dApiPINVOKE.GvNodeGUI_Detach(swigCPtr);
  }

  public bool InitShapes() {
    bool ret = C4dApiPINVOKE.GvNodeGUI_InitShapes(swigCPtr);
    return ret;
  }

  public void Draw() {
    C4dApiPINVOKE.GvNodeGUI_Draw(swigCPtr);
  }

  public void MouseDown(int x, int y, int chn, int qa, BaseContainer msg) {
    C4dApiPINVOKE.GvNodeGUI_MouseDown(swigCPtr, x, y, chn, qa, BaseContainer.getCPtr(msg));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public int Message(BaseContainer msg, BaseContainer result) {
    int ret = C4dApiPINVOKE.GvNodeGUI_Message(swigCPtr, BaseContainer.getCPtr(msg), BaseContainer.getCPtr(result));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int Command(int id) {
    int ret = C4dApiPINVOKE.GvNodeGUI_Command(swigCPtr, id);
    return ret;
  }

  public void Redraw() {
    C4dApiPINVOKE.GvNodeGUI_Redraw(swigCPtr);
  }

  public SWIGTYPE_p_GeUserArea GetUserArea() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.GvNodeGUI_GetUserArea(swigCPtr);
    SWIGTYPE_p_GeUserArea ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_GeUserArea(cPtr, false);
    return ret;
  }

  public GvNodeMaster GetMaster() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.GvNodeGUI_GetMaster(swigCPtr);
    GvNodeMaster ret = (cPtr == global::System.IntPtr.Zero) ? null : new GvNodeMaster(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_GeDialog GetDialog() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.GvNodeGUI_GetDialog(swigCPtr);
    SWIGTYPE_p_GeDialog ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_GeDialog(cPtr, false);
    return ret;
  }

  public void SelectAllNodes(GvNode node, bool select_state, bool add_to_selection) {
    C4dApiPINVOKE.GvNodeGUI_SelectAllNodes__SWIG_0(swigCPtr, GvNode.getCPtr(node), select_state, add_to_selection);
  }

  public void SelectAllNodes(GvNode node, bool select_state) {
    C4dApiPINVOKE.GvNodeGUI_SelectAllNodes__SWIG_1(swigCPtr, GvNode.getCPtr(node), select_state);
  }

  public void RemoveAllSelectedNodes(GvNode node) {
    C4dApiPINVOKE.GvNodeGUI_RemoveAllSelectedNodes(swigCPtr, GvNode.getCPtr(node));
  }

  public void SelectNode(GvNode node, bool select_state, bool add_to_selection, bool send_message) {
    C4dApiPINVOKE.GvNodeGUI_SelectNode__SWIG_0(swigCPtr, GvNode.getCPtr(node), select_state, add_to_selection, send_message);
  }

  public void SelectNode(GvNode node, bool select_state, bool add_to_selection) {
    C4dApiPINVOKE.GvNodeGUI_SelectNode__SWIG_1(swigCPtr, GvNode.getCPtr(node), select_state, add_to_selection);
  }

  public void SelectNode(GvNode node, bool select_state) {
    C4dApiPINVOKE.GvNodeGUI_SelectNode__SWIG_2(swigCPtr, GvNode.getCPtr(node), select_state);
  }

  public void DisableSelected(GvNode node, bool disable_state) {
    C4dApiPINVOKE.GvNodeGUI_DisableSelected(swigCPtr, GvNode.getCPtr(node), disable_state);
  }

  public void SetFocus(GvNode node, bool activate) {
    C4dApiPINVOKE.GvNodeGUI_SetFocus(swigCPtr, GvNode.getCPtr(node), activate);
  }

  public GvNode GetNodeGlobal(int x, int y) {
    global::System.IntPtr cPtr = C4dApiPINVOKE.GvNodeGUI_GetNodeGlobal(swigCPtr, x, y);
    GvNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new GvNode(cPtr, false);
    return ret;
  }

  public GvNode GetNodeLocal(GvNode node, int x, int y) {
    global::System.IntPtr cPtr = C4dApiPINVOKE.GvNodeGUI_GetNodeLocal(swigCPtr, GvNode.getCPtr(node), x, y);
    GvNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new GvNode(cPtr, false);
    return ret;
  }

  public bool IsInNodeBody(GvNode node, int x, int y) {
    bool ret = C4dApiPINVOKE.GvNodeGUI_IsInNodeBody(swigCPtr, GvNode.getCPtr(node), x, y);
    return ret;
  }

  public bool IsInNodeHead(GvNode node, int x, int y) {
    bool ret = C4dApiPINVOKE.GvNodeGUI_IsInNodeHead(swigCPtr, GvNode.getCPtr(node), x, y);
    return ret;
  }

  public bool NodeContextMenu(GvNode node) {
    bool ret = C4dApiPINVOKE.GvNodeGUI_NodeContextMenu(swigCPtr, GvNode.getCPtr(node));
    return ret;
  }

  public void SetPrefs(BaseContainer bc) {
    C4dApiPINVOKE.GvNodeGUI_SetPrefs(swigCPtr, BaseContainer.getCPtr(bc));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetPrefs(BaseContainer bc) {
    C4dApiPINVOKE.GvNodeGUI_GetPrefs(swigCPtr, BaseContainer.getCPtr(bc));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetNodePosGlobal(GvNode node, int x, int y, bool center) {
    C4dApiPINVOKE.GvNodeGUI_SetNodePosGlobal__SWIG_0(swigCPtr, GvNode.getCPtr(node), x, y, center);
  }

  public void SetNodePosGlobal(GvNode node, int x, int y) {
    C4dApiPINVOKE.GvNodeGUI_SetNodePosGlobal__SWIG_1(swigCPtr, GvNode.getCPtr(node), x, y);
  }

  public void SetNodePos(GvNode node, int x, int y) {
    C4dApiPINVOKE.GvNodeGUI_SetNodePos(swigCPtr, GvNode.getCPtr(node), x, y);
  }

  public void SetNodeSize(GvNode node, int width, int height) {
    C4dApiPINVOKE.GvNodeGUI_SetNodeSize(swigCPtr, GvNode.getCPtr(node), width, height);
  }

  public void OptimizeNode(GvNode node) {
    C4dApiPINVOKE.GvNodeGUI_OptimizeNode(swigCPtr, GvNode.getCPtr(node));
  }

  public void ShowAllNodes(GvNode node) {
    C4dApiPINVOKE.GvNodeGUI_ShowAllNodes(swigCPtr, GvNode.getCPtr(node));
  }

  public void CenterNodes(GvNode node) {
    C4dApiPINVOKE.GvNodeGUI_CenterNodes(swigCPtr, GvNode.getCPtr(node));
  }

  public void AlignNodesToUpperLeft(GvNode node) {
    C4dApiPINVOKE.GvNodeGUI_AlignNodesToUpperLeft(swigCPtr, GvNode.getCPtr(node));
  }

  public void GetZoom(GvNode node, SWIGTYPE_p_Float zoom) {
    C4dApiPINVOKE.GvNodeGUI_GetZoom(swigCPtr, GvNode.getCPtr(node), SWIGTYPE_p_Float.getCPtr(zoom));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
