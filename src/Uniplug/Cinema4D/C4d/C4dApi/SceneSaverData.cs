//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace C4d {

public class SceneSaverData : NodeData {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SceneSaverData(global::System.IntPtr cPtr, bool cMemoryOwn) : base(C4dApiPINVOKE.SceneSaverData_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SceneSaverData obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~SceneSaverData() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          C4dApiPINVOKE.delete_SceneSaverData(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public SceneSaverData(bool memOwn) : this(C4dApiPINVOKE.new_SceneSaverData(), memOwn) {
    SwigDirectorConnect();
  }

  public virtual FILEERROR Save(BaseSceneSaver node, Filename name, BaseDocument doc, SCENEFILTER filterflags) {
    FILEERROR ret = (FILEERROR)C4dApiPINVOKE.SceneSaverData_Save(swigCPtr, BaseSceneSaver.getCPtr(node), Filename.getCPtr(name), BaseDocument.getCPtr(doc), (int)filterflags);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private SceneSaverData() : this(C4dApiPINVOKE.new_SceneSaverData(), true) {
    SwigDirectorConnect();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("Init", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateSceneSaverData_0(SwigDirectorInit);
    if (SwigDerivedClassHasMethod("Free", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateSceneSaverData_1(SwigDirectorFree);
    if (SwigDerivedClassHasMethod("Read", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateSceneSaverData_2(SwigDirectorRead);
    if (SwigDerivedClassHasMethod("Write", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateSceneSaverData_3(SwigDirectorWrite);
    if (SwigDerivedClassHasMethod("CopyTo", swigMethodTypes4))
      swigDelegate4 = new SwigDelegateSceneSaverData_4(SwigDirectorCopyTo);
    if (SwigDerivedClassHasMethod("Message", swigMethodTypes5))
      swigDelegate5 = new SwigDelegateSceneSaverData_5(SwigDirectorMessage);
    if (SwigDerivedClassHasMethod("GetBubbleHelp", swigMethodTypes6))
      swigDelegate6 = new SwigDelegateSceneSaverData_6(SwigDirectorGetBubbleHelp);
    if (SwigDerivedClassHasMethod("GetDocument", swigMethodTypes7))
      swigDelegate7 = new SwigDelegateSceneSaverData_7(SwigDirectorGetDocument);
    if (SwigDerivedClassHasMethod("GetBranchInfo", swigMethodTypes8))
      swigDelegate8 = new SwigDelegateSceneSaverData_8(SwigDirectorGetBranchInfo);
    if (SwigDerivedClassHasMethod("IsInstanceOf", swigMethodTypes9))
      swigDelegate9 = new SwigDelegateSceneSaverData_9(SwigDirectorIsInstanceOf);
    if (SwigDerivedClassHasMethod("GetDDescription", swigMethodTypes10))
      swigDelegate10 = new SwigDelegateSceneSaverData_10(SwigDirectorGetDDescription);
    if (SwigDerivedClassHasMethod("GetDParameter", swigMethodTypes11))
      swigDelegate11 = new SwigDelegateSceneSaverData_11(SwigDirectorGetDParameter);
    if (SwigDerivedClassHasMethod("SetDParameter", swigMethodTypes12))
      swigDelegate12 = new SwigDelegateSceneSaverData_12(SwigDirectorSetDParameter);
    if (SwigDerivedClassHasMethod("GetDEnabling", swigMethodTypes13))
      swigDelegate13 = new SwigDelegateSceneSaverData_13(SwigDirectorGetDEnabling);
    if (SwigDerivedClassHasMethod("TranslateDescID", swigMethodTypes14))
      swigDelegate14 = new SwigDelegateSceneSaverData_14(SwigDirectorTranslateDescID);
    if (SwigDerivedClassHasMethod("IsDocumentRelated", swigMethodTypes15))
      swigDelegate15 = new SwigDelegateSceneSaverData_15(SwigDirectorIsDocumentRelated);
    if (SwigDerivedClassHasMethod("Save", swigMethodTypes16))
      swigDelegate16 = new SwigDelegateSceneSaverData_16(SwigDirectorSave);
    C4dApiPINVOKE.SceneSaverData_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4, swigDelegate5, swigDelegate6, swigDelegate7, swigDelegate8, swigDelegate9, swigDelegate10, swigDelegate11, swigDelegate12, swigDelegate13, swigDelegate14, swigDelegate15, swigDelegate16);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(SceneSaverData));
    return hasDerivedMethod;
  }

  private bool SwigDirectorInit(global::System.IntPtr node) {
    return Init((node == global::System.IntPtr.Zero) ? null : new GeListNode(node, false));
  }

  private void SwigDirectorFree(global::System.IntPtr node) {
    Free((node == global::System.IntPtr.Zero) ? null : new GeListNode(node, false));
  }

  private bool SwigDirectorRead(global::System.IntPtr node, global::System.IntPtr hf, int level) {
    return Read((node == global::System.IntPtr.Zero) ? null : new GeListNode(node, false), (hf == global::System.IntPtr.Zero) ? null : new HyperFile(hf, false), level);
  }

  private bool SwigDirectorWrite(global::System.IntPtr node, global::System.IntPtr hf) {
    return Write((node == global::System.IntPtr.Zero) ? null : new GeListNode(node, false), (hf == global::System.IntPtr.Zero) ? null : new HyperFile(hf, false));
  }

  private bool SwigDirectorCopyTo(global::System.IntPtr dest, global::System.IntPtr snode, global::System.IntPtr dnode, int flags, global::System.IntPtr trn) {
    return CopyTo((dest == global::System.IntPtr.Zero) ? null : new NodeData(dest, false), (snode == global::System.IntPtr.Zero) ? null : new GeListNode(snode, false), (dnode == global::System.IntPtr.Zero) ? null : new GeListNode(dnode, false), (COPYFLAGS)flags, (trn == global::System.IntPtr.Zero) ? null : new AliasTrans(trn, false));
  }

  private bool SwigDirectorMessage(global::System.IntPtr node, int type, global::System.IntPtr data) {
    return Message((node == global::System.IntPtr.Zero) ? null : new GeListNode(node, false), type, (data == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(data, false));
  }

  private void SwigDirectorGetBubbleHelp(global::System.IntPtr node, global::System.IntPtr str) {
    GetBubbleHelp((node == global::System.IntPtr.Zero) ? null : new GeListNode(node, false), new SWIGTYPE_p_String(str, false));
  }

  private global::System.IntPtr SwigDirectorGetDocument(global::System.IntPtr node) {
    return BaseDocument.getCPtr(GetDocument((node == global::System.IntPtr.Zero) ? null : new GeListNode(node, false))).Handle;
  }

  private int SwigDirectorGetBranchInfo(global::System.IntPtr node, global::System.IntPtr info, int max, int flags) {
    return GetBranchInfo((node == global::System.IntPtr.Zero) ? null : new GeListNode(node, false), (info == global::System.IntPtr.Zero) ? null : new BranchInfo(info, false), max, (GETBRANCHINFO)flags);
  }

  private bool SwigDirectorIsInstanceOf(global::System.IntPtr node, int type) {
    return IsInstanceOf((node == global::System.IntPtr.Zero) ? null : new GeListNode(node, false), type);
  }

  private bool SwigDirectorGetDDescription(global::System.IntPtr node, global::System.IntPtr description, global::System.IntPtr flags) {
    return GetDDescription((node == global::System.IntPtr.Zero) ? null : new GeListNode(node, false), (description == global::System.IntPtr.Zero) ? null : new Description(description, false), new SWIGTYPE_p_DESCFLAGS_DESC(flags, false));
  }

  private bool SwigDirectorGetDParameter(global::System.IntPtr node, global::System.IntPtr id, global::System.IntPtr t_data, global::System.IntPtr flags) {
    return GetDParameter((node == global::System.IntPtr.Zero) ? null : new GeListNode(node, false), new DescID(id, false), new GeData(t_data, false), new SWIGTYPE_p_DESCFLAGS_GET(flags, false));
  }

  private bool SwigDirectorSetDParameter(global::System.IntPtr node, global::System.IntPtr id, global::System.IntPtr t_data, global::System.IntPtr flags) {
    return SetDParameter((node == global::System.IntPtr.Zero) ? null : new GeListNode(node, false), new DescID(id, false), new GeData(t_data, false), new SWIGTYPE_p_DESCFLAGS_SET(flags, false));
  }

  private bool SwigDirectorGetDEnabling(global::System.IntPtr node, global::System.IntPtr id, global::System.IntPtr t_data, int flags, global::System.IntPtr itemdesc) {
    return GetDEnabling((node == global::System.IntPtr.Zero) ? null : new GeListNode(node, false), new DescID(id, false), new GeData(t_data, false), (DESCFLAGS_ENABLE)flags, (itemdesc == global::System.IntPtr.Zero) ? null : new BaseContainer(itemdesc, false));
  }

  private bool SwigDirectorTranslateDescID(global::System.IntPtr node, global::System.IntPtr id, global::System.IntPtr res_id, global::System.IntPtr res_at) {
    return TranslateDescID((node == global::System.IntPtr.Zero) ? null : new GeListNode(node, false), new DescID(id, false), new DescID(res_id, false), new SWIGTYPE_p_p_C4DAtom(res_at, false));
  }

  private bool SwigDirectorIsDocumentRelated(global::System.IntPtr node, global::System.IntPtr docrelated) {
    return IsDocumentRelated((node == global::System.IntPtr.Zero) ? null : new GeListNode(node, false), new SWIGTYPE_p_Bool(docrelated, false));
  }

  private int SwigDirectorSave(global::System.IntPtr node, global::System.IntPtr name, global::System.IntPtr doc, int filterflags) {
    return (int)Save((node == global::System.IntPtr.Zero) ? null : new BaseSceneSaver(node, false), new Filename(name, false), (doc == global::System.IntPtr.Zero) ? null : new BaseDocument(doc, false), (SCENEFILTER)filterflags);
  }

  public delegate bool SwigDelegateSceneSaverData_0(global::System.IntPtr node);
  public delegate void SwigDelegateSceneSaverData_1(global::System.IntPtr node);
  public delegate bool SwigDelegateSceneSaverData_2(global::System.IntPtr node, global::System.IntPtr hf, int level);
  public delegate bool SwigDelegateSceneSaverData_3(global::System.IntPtr node, global::System.IntPtr hf);
  public delegate bool SwigDelegateSceneSaverData_4(global::System.IntPtr dest, global::System.IntPtr snode, global::System.IntPtr dnode, int flags, global::System.IntPtr trn);
  public delegate bool SwigDelegateSceneSaverData_5(global::System.IntPtr node, int type, global::System.IntPtr data);
  public delegate void SwigDelegateSceneSaverData_6(global::System.IntPtr node, global::System.IntPtr str);
  public delegate global::System.IntPtr SwigDelegateSceneSaverData_7(global::System.IntPtr node);
  public delegate int SwigDelegateSceneSaverData_8(global::System.IntPtr node, global::System.IntPtr info, int max, int flags);
  public delegate bool SwigDelegateSceneSaverData_9(global::System.IntPtr node, int type);
  public delegate bool SwigDelegateSceneSaverData_10(global::System.IntPtr node, global::System.IntPtr description, global::System.IntPtr flags);
  public delegate bool SwigDelegateSceneSaverData_11(global::System.IntPtr node, global::System.IntPtr id, global::System.IntPtr t_data, global::System.IntPtr flags);
  public delegate bool SwigDelegateSceneSaverData_12(global::System.IntPtr node, global::System.IntPtr id, global::System.IntPtr t_data, global::System.IntPtr flags);
  public delegate bool SwigDelegateSceneSaverData_13(global::System.IntPtr node, global::System.IntPtr id, global::System.IntPtr t_data, int flags, global::System.IntPtr itemdesc);
  public delegate bool SwigDelegateSceneSaverData_14(global::System.IntPtr node, global::System.IntPtr id, global::System.IntPtr res_id, global::System.IntPtr res_at);
  public delegate bool SwigDelegateSceneSaverData_15(global::System.IntPtr node, global::System.IntPtr docrelated);
  public delegate int SwigDelegateSceneSaverData_16(global::System.IntPtr node, global::System.IntPtr name, global::System.IntPtr doc, int filterflags);

  private SwigDelegateSceneSaverData_0 swigDelegate0;
  private SwigDelegateSceneSaverData_1 swigDelegate1;
  private SwigDelegateSceneSaverData_2 swigDelegate2;
  private SwigDelegateSceneSaverData_3 swigDelegate3;
  private SwigDelegateSceneSaverData_4 swigDelegate4;
  private SwigDelegateSceneSaverData_5 swigDelegate5;
  private SwigDelegateSceneSaverData_6 swigDelegate6;
  private SwigDelegateSceneSaverData_7 swigDelegate7;
  private SwigDelegateSceneSaverData_8 swigDelegate8;
  private SwigDelegateSceneSaverData_9 swigDelegate9;
  private SwigDelegateSceneSaverData_10 swigDelegate10;
  private SwigDelegateSceneSaverData_11 swigDelegate11;
  private SwigDelegateSceneSaverData_12 swigDelegate12;
  private SwigDelegateSceneSaverData_13 swigDelegate13;
  private SwigDelegateSceneSaverData_14 swigDelegate14;
  private SwigDelegateSceneSaverData_15 swigDelegate15;
  private SwigDelegateSceneSaverData_16 swigDelegate16;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] { typeof(GeListNode) };
  private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] { typeof(GeListNode) };
  private static global::System.Type[] swigMethodTypes2 = new global::System.Type[] { typeof(GeListNode), typeof(HyperFile), typeof(int) };
  private static global::System.Type[] swigMethodTypes3 = new global::System.Type[] { typeof(GeListNode), typeof(HyperFile) };
  private static global::System.Type[] swigMethodTypes4 = new global::System.Type[] { typeof(NodeData), typeof(GeListNode), typeof(GeListNode), typeof(COPYFLAGS), typeof(AliasTrans) };
  private static global::System.Type[] swigMethodTypes5 = new global::System.Type[] { typeof(GeListNode), typeof(int), typeof(SWIGTYPE_p_void) };
  private static global::System.Type[] swigMethodTypes6 = new global::System.Type[] { typeof(GeListNode), typeof(SWIGTYPE_p_String) };
  private static global::System.Type[] swigMethodTypes7 = new global::System.Type[] { typeof(GeListNode) };
  private static global::System.Type[] swigMethodTypes8 = new global::System.Type[] { typeof(GeListNode), typeof(BranchInfo), typeof(int), typeof(GETBRANCHINFO) };
  private static global::System.Type[] swigMethodTypes9 = new global::System.Type[] { typeof(GeListNode), typeof(int) };
  private static global::System.Type[] swigMethodTypes10 = new global::System.Type[] { typeof(GeListNode), typeof(Description), typeof(SWIGTYPE_p_DESCFLAGS_DESC) };
  private static global::System.Type[] swigMethodTypes11 = new global::System.Type[] { typeof(GeListNode), typeof(DescID), typeof(GeData), typeof(SWIGTYPE_p_DESCFLAGS_GET) };
  private static global::System.Type[] swigMethodTypes12 = new global::System.Type[] { typeof(GeListNode), typeof(DescID), typeof(GeData), typeof(SWIGTYPE_p_DESCFLAGS_SET) };
  private static global::System.Type[] swigMethodTypes13 = new global::System.Type[] { typeof(GeListNode), typeof(DescID), typeof(GeData), typeof(DESCFLAGS_ENABLE), typeof(BaseContainer) };
  private static global::System.Type[] swigMethodTypes14 = new global::System.Type[] { typeof(GeListNode), typeof(DescID), typeof(DescID), typeof(SWIGTYPE_p_p_C4DAtom) };
  private static global::System.Type[] swigMethodTypes15 = new global::System.Type[] { typeof(GeListNode), typeof(SWIGTYPE_p_Bool) };
  private static global::System.Type[] swigMethodTypes16 = new global::System.Type[] { typeof(BaseSceneSaver), typeof(Filename), typeof(BaseDocument), typeof(SCENEFILTER) };
}

}
