//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace C4d {

public class GvCalcTime : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal GvCalcTime(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(GvCalcTime obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public bool init {
    set {
      C4dApiPINVOKE.GvCalcTime_init_set(swigCPtr, value);
    } 
    get {
      bool ret = C4dApiPINVOKE.GvCalcTime_init_get(swigCPtr);
      return ret;
    } 
  }

  public bool init_time {
    set {
      C4dApiPINVOKE.GvCalcTime_init_time_set(swigCPtr, value);
    } 
    get {
      bool ret = C4dApiPINVOKE.GvCalcTime_init_time_get(swigCPtr);
      return ret;
    } 
  }

  public bool time_changed {
    set {
      C4dApiPINVOKE.GvCalcTime_time_changed_set(swigCPtr, value);
    } 
    get {
      bool ret = C4dApiPINVOKE.GvCalcTime_time_changed_get(swigCPtr);
      return ret;
    } 
  }

  public bool loop_changed {
    set {
      C4dApiPINVOKE.GvCalcTime_loop_changed_set(swigCPtr, value);
    } 
    get {
      bool ret = C4dApiPINVOKE.GvCalcTime_loop_changed_get(swigCPtr);
      return ret;
    } 
  }

  public bool length_changed {
    set {
      C4dApiPINVOKE.GvCalcTime_length_changed_set(swigCPtr, value);
    } 
    get {
      bool ret = C4dApiPINVOKE.GvCalcTime_length_changed_get(swigCPtr);
      return ret;
    } 
  }

  public BaseTime time {
    set {
      C4dApiPINVOKE.GvCalcTime_time_set(swigCPtr, BaseTime.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = C4dApiPINVOKE.GvCalcTime_time_get(swigCPtr);
      BaseTime ret = (cPtr == global::System.IntPtr.Zero) ? null : new BaseTime(cPtr, false);
      return ret;
    } 
  }

  public BaseTime delta {
    set {
      C4dApiPINVOKE.GvCalcTime_delta_set(swigCPtr, BaseTime.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = C4dApiPINVOKE.GvCalcTime_delta_get(swigCPtr);
      BaseTime ret = (cPtr == global::System.IntPtr.Zero) ? null : new BaseTime(cPtr, false);
      return ret;
    } 
  }

  public BaseTime start {
    set {
      C4dApiPINVOKE.GvCalcTime_start_set(swigCPtr, BaseTime.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = C4dApiPINVOKE.GvCalcTime_start_get(swigCPtr);
      BaseTime ret = (cPtr == global::System.IntPtr.Zero) ? null : new BaseTime(cPtr, false);
      return ret;
    } 
  }

  public BaseTime end {
    set {
      C4dApiPINVOKE.GvCalcTime_end_set(swigCPtr, BaseTime.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = C4dApiPINVOKE.GvCalcTime_end_get(swigCPtr);
      BaseTime ret = (cPtr == global::System.IntPtr.Zero) ? null : new BaseTime(cPtr, false);
      return ret;
    } 
  }

  public BaseTime loop_start {
    set {
      C4dApiPINVOKE.GvCalcTime_loop_start_set(swigCPtr, BaseTime.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = C4dApiPINVOKE.GvCalcTime_loop_start_get(swigCPtr);
      BaseTime ret = (cPtr == global::System.IntPtr.Zero) ? null : new BaseTime(cPtr, false);
      return ret;
    } 
  }

  public BaseTime loop_end {
    set {
      C4dApiPINVOKE.GvCalcTime_loop_end_set(swigCPtr, BaseTime.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = C4dApiPINVOKE.GvCalcTime_loop_end_get(swigCPtr);
      BaseTime ret = (cPtr == global::System.IntPtr.Zero) ? null : new BaseTime(cPtr, false);
      return ret;
    } 
  }

  public BaseTime previous {
    set {
      C4dApiPINVOKE.GvCalcTime_previous_set(swigCPtr, BaseTime.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = C4dApiPINVOKE.GvCalcTime_previous_get(swigCPtr);
      BaseTime ret = (cPtr == global::System.IntPtr.Zero) ? null : new BaseTime(cPtr, false);
      return ret;
    } 
  }

  public int fps {
    set {
      C4dApiPINVOKE.GvCalcTime_fps_set(swigCPtr, value);
    } 
    get {
      int ret = C4dApiPINVOKE.GvCalcTime_fps_get(swigCPtr);
      return ret;
    } 
  }

}

}
