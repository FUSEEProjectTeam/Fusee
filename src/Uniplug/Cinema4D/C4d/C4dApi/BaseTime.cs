//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace C4d {

public class BaseTime : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal BaseTime(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(BaseTime obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~BaseTime() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          C4dApiPINVOKE.delete_BaseTime(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public BaseTime() : this(C4dApiPINVOKE.new_BaseTime__SWIG_0(), true) {
  }

  public BaseTime(double r) : this(C4dApiPINVOKE.new_BaseTime__SWIG_1(r), true) {
  }

  public BaseTime(double z, double n) : this(C4dApiPINVOKE.new_BaseTime__SWIG_2(z, n), true) {
  }

  public double Get() {
    double ret = C4dApiPINVOKE.BaseTime_Get(swigCPtr);
    return ret;
  }

  public double GetNumerator() {
    double ret = C4dApiPINVOKE.BaseTime_GetNumerator(swigCPtr);
    return ret;
  }

  public double GetDenominator() {
    double ret = C4dApiPINVOKE.BaseTime_GetDenominator(swigCPtr);
    return ret;
  }

  public void SetNumerator(double r) {
    C4dApiPINVOKE.BaseTime_SetNumerator(swigCPtr, r);
  }

  public void SetDenominator(double r) {
    C4dApiPINVOKE.BaseTime_SetDenominator(swigCPtr, r);
  }

  public int GetFrame(double fps) {
    int ret = C4dApiPINVOKE.BaseTime_GetFrame(swigCPtr, fps);
    return ret;
  }

  public void Quantize(double fps) {
    C4dApiPINVOKE.BaseTime_Quantize(swigCPtr, fps);
  }

  public int TimeDif(BaseTime t2) {
    int ret = C4dApiPINVOKE.BaseTime_TimeDif(swigCPtr, BaseTime.getCPtr(t2));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
