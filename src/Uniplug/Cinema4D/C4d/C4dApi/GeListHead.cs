//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace C4d {

public class GeListHead : GeListNode {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal GeListHead(global::System.IntPtr cPtr, bool cMemoryOwn) : base(C4dApiPINVOKE.GeListHead_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(GeListHead obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static GeListHead Alloc() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.GeListHead_Alloc();
    GeListHead ret = (cPtr == global::System.IntPtr.Zero) ? null : new GeListHead(cPtr, false);
    return ret;
  }

  public static void Free(SWIGTYPE_p_p_GeListHead v) {
    C4dApiPINVOKE.GeListHead_Free(SWIGTYPE_p_p_GeListHead.getCPtr(v));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetParent(GeListNode parent) {
    C4dApiPINVOKE.GeListHead_SetParent(swigCPtr, GeListNode.getCPtr(parent));
  }

  public GeListNode GetParent() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.GeListHead_GetParent(swigCPtr);
    GeListNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new GeListNode(cPtr, false);
    return ret;
  }

  public GeListNode GetFirst() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.GeListHead_GetFirst(swigCPtr);
    GeListNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new GeListNode(cPtr, false);
    return ret;
  }

  public GeListNode GetLast() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.GeListHead_GetLast(swigCPtr);
    GeListNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new GeListNode(cPtr, false);
    return ret;
  }

  public void FlushAll() {
    C4dApiPINVOKE.GeListHead_FlushAll(swigCPtr);
  }

  public void InsertFirst(GeListNode bn) {
    C4dApiPINVOKE.GeListHead_InsertFirst(swigCPtr, GeListNode.getCPtr(bn));
  }

  public void InsertLast(GeListNode bn) {
    C4dApiPINVOKE.GeListHead_InsertLast(swigCPtr, GeListNode.getCPtr(bn));
  }

  public void Insert(GeListNode bn, GeListNode parent, GeListNode prev) {
    C4dApiPINVOKE.GeListHead_Insert(swigCPtr, GeListNode.getCPtr(bn), GeListNode.getCPtr(parent), GeListNode.getCPtr(prev));
  }

}

}
