//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace C4d {

public class HyperFile : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal HyperFile(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(HyperFile obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public static HyperFile Alloc() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.HyperFile_Alloc();
    HyperFile ret = (cPtr == global::System.IntPtr.Zero) ? null : new HyperFile(cPtr, false);
    return ret;
  }

  public static void Free(SWIGTYPE_p_p_HyperFile fl) {
    C4dApiPINVOKE.HyperFile_Free(SWIGTYPE_p_p_HyperFile.getCPtr(fl));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool Open(int ident, Filename filename, FILEOPEN mode, FILEDIALOG error_dialog) {
    bool ret = C4dApiPINVOKE.HyperFile_Open(swigCPtr, ident, Filename.getCPtr(filename), (int)mode, (int)error_dialog);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Close() {
    bool ret = C4dApiPINVOKE.HyperFile_Close(swigCPtr);
    return ret;
  }

  public bool ReadChar(SWIGTYPE_p_Char v) {
    bool ret = C4dApiPINVOKE.HyperFile_ReadChar(swigCPtr, SWIGTYPE_p_Char.getCPtr(v));
    return ret;
  }

  public bool ReadUChar(SWIGTYPE_p_UChar v) {
    bool ret = C4dApiPINVOKE.HyperFile_ReadUChar(swigCPtr, SWIGTYPE_p_UChar.getCPtr(v));
    return ret;
  }

  public bool ReadInt16(SWIGTYPE_p_Int16 v) {
    bool ret = C4dApiPINVOKE.HyperFile_ReadInt16(swigCPtr, SWIGTYPE_p_Int16.getCPtr(v));
    return ret;
  }

  public bool ReadUInt16(SWIGTYPE_p_UInt16 v) {
    bool ret = C4dApiPINVOKE.HyperFile_ReadUInt16(swigCPtr, SWIGTYPE_p_UInt16.getCPtr(v));
    return ret;
  }

  public bool ReadInt32(SWIGTYPE_p_Int32 v) {
    bool ret = C4dApiPINVOKE.HyperFile_ReadInt32(swigCPtr, SWIGTYPE_p_Int32.getCPtr(v));
    return ret;
  }

  public bool ReadUInt32(SWIGTYPE_p_UInt32 v) {
    bool ret = C4dApiPINVOKE.HyperFile_ReadUInt32(swigCPtr, SWIGTYPE_p_UInt32.getCPtr(v));
    return ret;
  }

  public bool ReadInt64(SWIGTYPE_p_Int64 v) {
    bool ret = C4dApiPINVOKE.HyperFile_ReadInt64(swigCPtr, SWIGTYPE_p_Int64.getCPtr(v));
    return ret;
  }

  public bool ReadUInt64(SWIGTYPE_p_UInt64 v) {
    bool ret = C4dApiPINVOKE.HyperFile_ReadUInt64(swigCPtr, SWIGTYPE_p_UInt64.getCPtr(v));
    return ret;
  }

  public bool ReadFloat(SWIGTYPE_p_Float v) {
    bool ret = C4dApiPINVOKE.HyperFile_ReadFloat(swigCPtr, SWIGTYPE_p_Float.getCPtr(v));
    return ret;
  }

  public bool ReadFloat32(SWIGTYPE_p_Float32 v) {
    bool ret = C4dApiPINVOKE.HyperFile_ReadFloat32(swigCPtr, SWIGTYPE_p_Float32.getCPtr(v));
    return ret;
  }

  public bool ReadFloat64(SWIGTYPE_p_Float64 v) {
    bool ret = C4dApiPINVOKE.HyperFile_ReadFloat64(swigCPtr, SWIGTYPE_p_Float64.getCPtr(v));
    return ret;
  }

  public bool ReadBool(SWIGTYPE_p_Bool v) {
    bool ret = C4dApiPINVOKE.HyperFile_ReadBool(swigCPtr, SWIGTYPE_p_Bool.getCPtr(v));
    return ret;
  }

  public bool ReadTime(BaseTime v) {
    bool ret = C4dApiPINVOKE.HyperFile_ReadTime(swigCPtr, BaseTime.getCPtr(v));
    return ret;
  }

  public bool ReadVector(ref Fusee.Math.Core.double3 /* Vector*&_cstype */ v) {
    bool ret = C4dApiPINVOKE.HyperFile_ReadVector(swigCPtr, ref v /* Vector*&_csin */);
    return ret;
  }

  public bool ReadVector32(SWIGTYPE_p_Vector32 v) {
    bool ret = C4dApiPINVOKE.HyperFile_ReadVector32(swigCPtr, SWIGTYPE_p_Vector32.getCPtr(v));
    return ret;
  }

  public bool ReadVector64(SWIGTYPE_p_Vector64 v) {
    bool ret = C4dApiPINVOKE.HyperFile_ReadVector64(swigCPtr, SWIGTYPE_p_Vector64.getCPtr(v));
    return ret;
  }

  public bool ReadMatrix(ref Fusee.Math.Core.double4x4 /* Matrix*&_cstype */ v) {
    double[] adbl_v;
    unsafe {adbl_v = Fusee.Math.ArrayConvert.double4x4ToArrayDoubleC4DLayout(v);    fixed (double *pdbl_v = adbl_v) {
    /* Matrix*&_csin_pre */
    try {
      bool ret = C4dApiPINVOKE.HyperFile_ReadMatrix(swigCPtr, (global::System.IntPtr) pdbl_v /* Matrix*&_csin */);
      return ret;
    } finally {
        v = Fusee.Math.ArrayConvert.ArrayDoubleC4DLayoutTodouble4x4(pdbl_v);
        /* Matrix*&_csin_post */
    }
} } /* Matrix*&_csin_terminator */
  }

  public bool ReadMatrix32(SWIGTYPE_p_Matrix32 v) {
    bool ret = C4dApiPINVOKE.HyperFile_ReadMatrix32(swigCPtr, SWIGTYPE_p_Matrix32.getCPtr(v));
    return ret;
  }

  public bool ReadMatrix64(SWIGTYPE_p_Matrix64 v) {
    bool ret = C4dApiPINVOKE.HyperFile_ReadMatrix64(swigCPtr, SWIGTYPE_p_Matrix64.getCPtr(v));
    return ret;
  }

  public bool ReadString(SWIGTYPE_p_String v) {
    bool ret = C4dApiPINVOKE.HyperFile_ReadString(swigCPtr, SWIGTYPE_p_String.getCPtr(v));
    return ret;
  }

  public bool ReadFilename(Filename v) {
    bool ret = C4dApiPINVOKE.HyperFile_ReadFilename(swigCPtr, Filename.getCPtr(v));
    return ret;
  }

  public bool ReadImage(BaseBitmap v) {
    bool ret = C4dApiPINVOKE.HyperFile_ReadImage(swigCPtr, BaseBitmap.getCPtr(v));
    return ret;
  }

  public bool ReadGeData(GeData v) {
    bool ret = C4dApiPINVOKE.HyperFile_ReadGeData(swigCPtr, GeData.getCPtr(v));
    return ret;
  }

  public bool ReadContainer(BaseContainer v, bool flush) {
    bool ret = C4dApiPINVOKE.HyperFile_ReadContainer(swigCPtr, BaseContainer.getCPtr(v), flush);
    return ret;
  }

  public bool ReadMemory(SWIGTYPE_p_p_void data, SWIGTYPE_p_Int size) {
    bool ret = C4dApiPINVOKE.HyperFile_ReadMemory(swigCPtr, SWIGTYPE_p_p_void.getCPtr(data), SWIGTYPE_p_Int.getCPtr(size));
    return ret;
  }

  public bool ReadChannel(BaseChannel bc) {
    bool ret = C4dApiPINVOKE.HyperFile_ReadChannel(swigCPtr, BaseChannel.getCPtr(bc));
    return ret;
  }

  public bool ReadChannelConvert(GeListNode node, int link_id) {
    bool ret = C4dApiPINVOKE.HyperFile_ReadChannelConvert(swigCPtr, GeListNode.getCPtr(node), link_id);
    return ret;
  }

  public bool ReadArray(SWIGTYPE_p_void data, HYPERFILEARRAY type, int structure_increment, int count) {
    bool ret = C4dApiPINVOKE.HyperFile_ReadArray(swigCPtr, SWIGTYPE_p_void.getCPtr(data), (int)type, structure_increment, count);
    return ret;
  }

  public bool ReadUuid(SWIGTYPE_p_C4DUuid v) {
    bool ret = C4dApiPINVOKE.HyperFile_ReadUuid(swigCPtr, SWIGTYPE_p_C4DUuid.getCPtr(v));
    return ret;
  }

  public bool WriteChar(char v) {
    bool ret = C4dApiPINVOKE.HyperFile_WriteChar(swigCPtr, v);
    return ret;
  }

  public bool WriteUChar(byte v) {
    bool ret = C4dApiPINVOKE.HyperFile_WriteUChar(swigCPtr, v);
    return ret;
  }

  public bool WriteInt16(short v) {
    bool ret = C4dApiPINVOKE.HyperFile_WriteInt16(swigCPtr, v);
    return ret;
  }

  public bool WriteUInt16(ushort v) {
    bool ret = C4dApiPINVOKE.HyperFile_WriteUInt16(swigCPtr, v);
    return ret;
  }

  public bool WriteInt32(int v) {
    bool ret = C4dApiPINVOKE.HyperFile_WriteInt32(swigCPtr, v);
    return ret;
  }

  public bool WriteUInt32(uint v) {
    bool ret = C4dApiPINVOKE.HyperFile_WriteUInt32(swigCPtr, v);
    return ret;
  }

  public bool WriteInt64(long v) {
    bool ret = C4dApiPINVOKE.HyperFile_WriteInt64(swigCPtr, v);
    return ret;
  }

  public bool WriteUInt64(ulong v) {
    bool ret = C4dApiPINVOKE.HyperFile_WriteUInt64(swigCPtr, v);
    return ret;
  }

  public bool WriteFloat(double v) {
    bool ret = C4dApiPINVOKE.HyperFile_WriteFloat(swigCPtr, v);
    return ret;
  }

  public bool WriteFloat32(float v) {
    bool ret = C4dApiPINVOKE.HyperFile_WriteFloat32(swigCPtr, v);
    return ret;
  }

  public bool WriteFloat64(double v) {
    bool ret = C4dApiPINVOKE.HyperFile_WriteFloat64(swigCPtr, v);
    return ret;
  }

  public bool WriteBool(bool v) {
    bool ret = C4dApiPINVOKE.HyperFile_WriteBool(swigCPtr, v);
    return ret;
  }

  public bool WriteTime(BaseTime v) {
    bool ret = C4dApiPINVOKE.HyperFile_WriteTime(swigCPtr, BaseTime.getCPtr(v));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool WriteVector(Fusee.Math.Core.double3 /* constVector&_cstype */ v) {
    bool ret = C4dApiPINVOKE.HyperFile_WriteVector(swigCPtr, ref v /* constVector&_csin */);
    return ret;
  }

  public bool WriteVector32(SWIGTYPE_p_Vector32 v) {
    bool ret = C4dApiPINVOKE.HyperFile_WriteVector32(swigCPtr, SWIGTYPE_p_Vector32.getCPtr(v));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool WriteVector64(SWIGTYPE_p_Vector64 v) {
    bool ret = C4dApiPINVOKE.HyperFile_WriteVector64(swigCPtr, SWIGTYPE_p_Vector64.getCPtr(v));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool WriteMatrix(ref Fusee.Math.Core.double4x4 /* constMatrix&_cstype */ v) {
    double[] adbl_v;
    unsafe {adbl_v = Fusee.Math.ArrayConvert.double4x4ToArrayDoubleC4DLayout(v);    fixed (double *pdbl_v = adbl_v) {
    /* constMatrix&_csin_pre */
    try {
      bool ret = C4dApiPINVOKE.HyperFile_WriteMatrix(swigCPtr, (global::System.IntPtr) pdbl_v /* constMatrix&_csin */);
      return ret;
    } finally {
        // NOP v = Fusee.Math.ArrayConvert.ArrayDoubleC4DLayoutTodouble4x4(pdbl_v);
        /* constMatrix&_csin_post */
    }
} } /* constMatrix&_csin_terminator */
  }

  public bool WriteMatrix32(SWIGTYPE_p_Matrix32 v) {
    bool ret = C4dApiPINVOKE.HyperFile_WriteMatrix32(swigCPtr, SWIGTYPE_p_Matrix32.getCPtr(v));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool WriteMatrix64(SWIGTYPE_p_Matrix64 v) {
    bool ret = C4dApiPINVOKE.HyperFile_WriteMatrix64(swigCPtr, SWIGTYPE_p_Matrix64.getCPtr(v));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool WriteString(string /* constString&_cstype */ v) {
    bool ret = C4dApiPINVOKE.HyperFile_WriteString(swigCPtr, v);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool WriteFilename(Filename v) {
    bool ret = C4dApiPINVOKE.HyperFile_WriteFilename(swigCPtr, Filename.getCPtr(v));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool WriteImage(BaseBitmap bmp, int format, BaseContainer data, SAVEBIT savebits) {
    bool ret = C4dApiPINVOKE.HyperFile_WriteImage__SWIG_0(swigCPtr, BaseBitmap.getCPtr(bmp), format, BaseContainer.getCPtr(data), (int)savebits);
    return ret;
  }

  public bool WriteImage(BaseBitmap bmp, int format, BaseContainer data) {
    bool ret = C4dApiPINVOKE.HyperFile_WriteImage__SWIG_1(swigCPtr, BaseBitmap.getCPtr(bmp), format, BaseContainer.getCPtr(data));
    return ret;
  }

  public bool WriteGeData(GeData v) {
    bool ret = C4dApiPINVOKE.HyperFile_WriteGeData(swigCPtr, GeData.getCPtr(v));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool WriteContainer(BaseContainer v) {
    bool ret = C4dApiPINVOKE.HyperFile_WriteContainer(swigCPtr, BaseContainer.getCPtr(v));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool WriteMemory(SWIGTYPE_p_void data, int count) {
    bool ret = C4dApiPINVOKE.HyperFile_WriteMemory(swigCPtr, SWIGTYPE_p_void.getCPtr(data), count);
    return ret;
  }

  public bool WriteChannel(BaseChannel bc) {
    bool ret = C4dApiPINVOKE.HyperFile_WriteChannel(swigCPtr, BaseChannel.getCPtr(bc));
    return ret;
  }

  public bool WriteArray(SWIGTYPE_p_void data, HYPERFILEARRAY datatype, int structure_increment, int count) {
    bool ret = C4dApiPINVOKE.HyperFile_WriteArray(swigCPtr, SWIGTYPE_p_void.getCPtr(data), (int)datatype, structure_increment, count);
    return ret;
  }

  public bool WriteUuid(SWIGTYPE_p_C4DUuid v) {
    bool ret = C4dApiPINVOKE.HyperFile_WriteUuid(swigCPtr, SWIGTYPE_p_C4DUuid.getCPtr(v));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public FILEERROR GetError() {
    FILEERROR ret = (FILEERROR)C4dApiPINVOKE.HyperFile_GetError(swigCPtr);
    return ret;
  }

  public void SetError(FILEERROR err) {
    C4dApiPINVOKE.HyperFile_SetError(swigCPtr, (int)err);
  }

  public bool ReadValueHeader(SWIGTYPE_p_HYPERFILEVALUE h) {
    bool ret = C4dApiPINVOKE.HyperFile_ReadValueHeader(swigCPtr, SWIGTYPE_p_HYPERFILEVALUE.getCPtr(h));
    return ret;
  }

  public bool SkipValue(HYPERFILEVALUE h) {
    bool ret = C4dApiPINVOKE.HyperFile_SkipValue(swigCPtr, (int)h);
    return ret;
  }

  public bool WriteChunkStart(int id, int level) {
    bool ret = C4dApiPINVOKE.HyperFile_WriteChunkStart(swigCPtr, id, level);
    return ret;
  }

  public bool WriteChunkEnd() {
    bool ret = C4dApiPINVOKE.HyperFile_WriteChunkEnd(swigCPtr);
    return ret;
  }

  public bool ReadChunkStart(SWIGTYPE_p_Int32 id, SWIGTYPE_p_Int32 level) {
    bool ret = C4dApiPINVOKE.HyperFile_ReadChunkStart(swigCPtr, SWIGTYPE_p_Int32.getCPtr(id), SWIGTYPE_p_Int32.getCPtr(level));
    return ret;
  }

  public bool ReadChunkEnd() {
    bool ret = C4dApiPINVOKE.HyperFile_ReadChunkEnd(swigCPtr);
    return ret;
  }

  public bool SkipToEndChunk() {
    bool ret = C4dApiPINVOKE.HyperFile_SkipToEndChunk(swigCPtr);
    return ret;
  }

  public int GetFileVersion() {
    int ret = C4dApiPINVOKE.HyperFile_GetFileVersion(swigCPtr);
    return ret;
  }

  public void SetFileVersion(int val) {
    C4dApiPINVOKE.HyperFile_SetFileVersion(swigCPtr, val);
  }

  public BaseDocument GetDocument() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.HyperFile_GetDocument(swigCPtr);
    BaseDocument ret = (cPtr == global::System.IntPtr.Zero) ? null : new BaseDocument(cPtr, false);
    return ret;
  }

  public LOCATION GetLocation() {
    LOCATION ret = (LOCATION)C4dApiPINVOKE.HyperFile_GetLocation(swigCPtr);
    return ret;
  }

}

}
