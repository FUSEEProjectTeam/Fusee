//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace C4d {

public class CAMorphNode : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CAMorphNode(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CAMorphNode obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public CAMorphNode GetNext() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.CAMorphNode_GetNext(swigCPtr);
    CAMorphNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new CAMorphNode(cPtr, false);
    return ret;
  }

  public CAMorphNode GetPrev() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.CAMorphNode_GetPrev(swigCPtr);
    CAMorphNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new CAMorphNode(cPtr, false);
    return ret;
  }

  public CAMorphNode GetUp() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.CAMorphNode_GetUp(swigCPtr);
    CAMorphNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new CAMorphNode(cPtr, false);
    return ret;
  }

  public CAMorphNode GetDown() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.CAMorphNode_GetDown(swigCPtr);
    CAMorphNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new CAMorphNode(cPtr, false);
    return ret;
  }

  public BaseList2D GetLink(CAPoseMorphTag tag, CAMorph morph, BaseDocument doc) {
    global::System.IntPtr cPtr = C4dApiPINVOKE.CAMorphNode_GetLink(swigCPtr, CAPoseMorphTag.getCPtr(tag), CAMorph.getCPtr(morph), BaseDocument.getCPtr(doc));
    BaseList2D ret = (cPtr == global::System.IntPtr.Zero) ? null : new BaseList2D(cPtr, false);
    return ret;
  }

  public CAMORPH_DATA_FLAGS GetInfo() {
    CAMORPH_DATA_FLAGS ret = (CAMORPH_DATA_FLAGS)C4dApiPINVOKE.CAMorphNode_GetInfo(swigCPtr);
    return ret;
  }

  public Fusee.Math.Core.double3 /* Vector_cstype_out */ GetP()  {  /* <Vector_csout> */
      Fusee.Math.Core.double3 ret = C4dApiPINVOKE.CAMorphNode_GetP(swigCPtr);
      return ret;
   } /* <Vector_csout> */ 

  public Fusee.Math.Core.double3 /* Vector_cstype_out */ GetS()  {  /* <Vector_csout> */
      Fusee.Math.Core.double3 ret = C4dApiPINVOKE.CAMorphNode_GetS(swigCPtr);
      return ret;
   } /* <Vector_csout> */ 

  public Fusee.Math.Core.double3 /* Vector_cstype_out */ GetR()  {  /* <Vector_csout> */
      Fusee.Math.Core.double3 ret = C4dApiPINVOKE.CAMorphNode_GetR(swigCPtr);
      return ret;
   } /* <Vector_csout> */ 

  public void SetP(Fusee.Math.Core.double3 /* constVector&_cstype */ p) {
    C4dApiPINVOKE.CAMorphNode_SetP(swigCPtr, ref p /* constVector&_csin */);
  }

  public void SetS(Fusee.Math.Core.double3 /* constVector&_cstype */ s) {
    C4dApiPINVOKE.CAMorphNode_SetS(swigCPtr, ref s /* constVector&_csin */);
  }

  public void SetR(Fusee.Math.Core.double3 /* constVector&_cstype */ r) {
    C4dApiPINVOKE.CAMorphNode_SetR(swigCPtr, ref r /* constVector&_csin */);
  }

  public int GetPointCount() {
    int ret = C4dApiPINVOKE.CAMorphNode_GetPointCount(swigCPtr);
    return ret;
  }

  public bool SetPointCount(int cnt) {
    bool ret = C4dApiPINVOKE.CAMorphNode_SetPointCount(swigCPtr, cnt);
    return ret;
  }

  public Fusee.Math.Core.double3 /* Vector_cstype_out */ GetPoint(int index)  {  /* <Vector_csout> */
      Fusee.Math.Core.double3 ret = C4dApiPINVOKE.CAMorphNode_GetPoint(swigCPtr, index);
      return ret;
   } /* <Vector_csout> */ 

  public void SetPoint(int index, Fusee.Math.Core.double3 /* constVector&_cstype */ pnt) {
    C4dApiPINVOKE.CAMorphNode_SetPoint(swigCPtr, index, ref pnt /* constVector&_csin */);
  }

  public int GetTangentCount() {
    int ret = C4dApiPINVOKE.CAMorphNode_GetTangentCount(swigCPtr);
    return ret;
  }

  public bool SetTangentCount(int cnt) {
    bool ret = C4dApiPINVOKE.CAMorphNode_SetTangentCount(swigCPtr, cnt);
    return ret;
  }

  public Fusee.Math.Core.double3 /* Vector_cstype_out */ GetTangent(int index)  {  /* <Vector_csout> */
      Fusee.Math.Core.double3 ret = C4dApiPINVOKE.CAMorphNode_GetTangent(swigCPtr, index);
      return ret;
   } /* <Vector_csout> */ 

  public void SetTangent(int index, Fusee.Math.Core.double3 /* constVector&_cstype */ v) {
    C4dApiPINVOKE.CAMorphNode_SetTangent(swigCPtr, index, ref v /* constVector&_csin */);
  }

  public int GetVertexMapTagCount() {
    int ret = C4dApiPINVOKE.CAMorphNode_GetVertexMapTagCount(swigCPtr);
    return ret;
  }

  public int GetVertexMapCount(int tindex) {
    int ret = C4dApiPINVOKE.CAMorphNode_GetVertexMapCount(swigCPtr, tindex);
    return ret;
  }

  public bool SetVertexMapCount(int tindex, int cnt) {
    bool ret = C4dApiPINVOKE.CAMorphNode_SetVertexMapCount(swigCPtr, tindex, cnt);
    return ret;
  }

  public double GetVertexMap(int tindex, int index) {
    double ret = C4dApiPINVOKE.CAMorphNode_GetVertexMap(swigCPtr, tindex, index);
    return ret;
  }

  public void SetVertexMap(int tindex, int index, double v) {
    C4dApiPINVOKE.CAMorphNode_SetVertexMap(swigCPtr, tindex, index, v);
  }

  public int GetParamCount() {
    int ret = C4dApiPINVOKE.CAMorphNode_GetParamCount(swigCPtr);
    return ret;
  }

  public bool SetParamCount(int cnt) {
    bool ret = C4dApiPINVOKE.CAMorphNode_SetParamCount(swigCPtr, cnt);
    return ret;
  }

  public bool GetParam(int index, GeData data, DescID id) {
    bool ret = C4dApiPINVOKE.CAMorphNode_GetParam(swigCPtr, index, GeData.getCPtr(data), DescID.getCPtr(id));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetParam(int index, GeData data, DescID id) {
    C4dApiPINVOKE.CAMorphNode_SetParam(swigCPtr, index, GeData.getCPtr(data), DescID.getCPtr(id));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public int GetUVTagCount() {
    int ret = C4dApiPINVOKE.CAMorphNode_GetUVTagCount(swigCPtr);
    return ret;
  }

  public int GetUVCount(int tindex) {
    int ret = C4dApiPINVOKE.CAMorphNode_GetUVCount(swigCPtr, tindex);
    return ret;
  }

  public bool SetUVCount(int tindex, int cnt) {
    bool ret = C4dApiPINVOKE.CAMorphNode_SetUVCount(swigCPtr, tindex, cnt);
    return ret;
  }

  public void GetUV(int tindex, int index, UVWStruct uv) {
    C4dApiPINVOKE.CAMorphNode_GetUV(swigCPtr, tindex, index, UVWStruct.getCPtr(uv));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetUV(int tindex, int index, UVWStruct uv) {
    C4dApiPINVOKE.CAMorphNode_SetUV(swigCPtr, tindex, index, UVWStruct.getCPtr(uv));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public int GetWeightMapTagCount() {
    int ret = C4dApiPINVOKE.CAMorphNode_GetWeightMapTagCount(swigCPtr);
    return ret;
  }

  public int GetWeightMapJointCount(int tindex) {
    int ret = C4dApiPINVOKE.CAMorphNode_GetWeightMapJointCount(swigCPtr, tindex);
    return ret;
  }

  public int GetWeightMapCount(int tindex, int jindex) {
    int ret = C4dApiPINVOKE.CAMorphNode_GetWeightMapCount(swigCPtr, tindex, jindex);
    return ret;
  }

  public bool SetWeightMapCount(int tindex, int jindex, int cnt) {
    bool ret = C4dApiPINVOKE.CAMorphNode_SetWeightMapCount(swigCPtr, tindex, jindex, cnt);
    return ret;
  }

  public double GetWeightMap(int tindex, int jindex, int index) {
    double ret = C4dApiPINVOKE.CAMorphNode_GetWeightMap(swigCPtr, tindex, jindex, index);
    return ret;
  }

  public void SetWeightMap(int tindex, int jindex, int index, double v) {
    C4dApiPINVOKE.CAMorphNode_SetWeightMap(swigCPtr, tindex, jindex, index, v);
  }

}

}
