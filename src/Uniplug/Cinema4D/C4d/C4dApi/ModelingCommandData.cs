//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace C4d {

public class ModelingCommandData : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ModelingCommandData(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ModelingCommandData obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ModelingCommandData() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          C4dApiPINVOKE.delete_ModelingCommandData(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public ModelingCommandData() : this(C4dApiPINVOKE.new_ModelingCommandData__SWIG_0(), true) {
  }

  public BaseDocument doc {
    set {
      C4dApiPINVOKE.ModelingCommandData_doc_set(swigCPtr, BaseDocument.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = C4dApiPINVOKE.ModelingCommandData_doc_get(swigCPtr);
      BaseDocument ret = (cPtr == global::System.IntPtr.Zero) ? null : new BaseDocument(cPtr, false);
      return ret;
    } 
  }

  public BaseObject op {
    set {
      C4dApiPINVOKE.ModelingCommandData_op_set(swigCPtr, BaseObject.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = C4dApiPINVOKE.ModelingCommandData_op_get(swigCPtr);
      BaseObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new BaseObject(cPtr, false);
      return ret;
    } 
  }

  public BaseContainer bc {
    set {
      C4dApiPINVOKE.ModelingCommandData_bc_set(swigCPtr, BaseContainer.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = C4dApiPINVOKE.ModelingCommandData_bc_get(swigCPtr);
      BaseContainer ret = (cPtr == global::System.IntPtr.Zero) ? null : new BaseContainer(cPtr, false);
      return ret;
    } 
  }

  public MODELINGCOMMANDMODE mode {
    set {
      C4dApiPINVOKE.ModelingCommandData_mode_set(swigCPtr, (int)value);
    } 
    get {
      MODELINGCOMMANDMODE ret = (MODELINGCOMMANDMODE)C4dApiPINVOKE.ModelingCommandData_mode_get(swigCPtr);
      return ret;
    } 
  }

  public MODELINGCOMMANDFLAGS flags {
    set {
      C4dApiPINVOKE.ModelingCommandData_flags_set(swigCPtr, (int)value);
    } 
    get {
      MODELINGCOMMANDFLAGS ret = (MODELINGCOMMANDFLAGS)C4dApiPINVOKE.ModelingCommandData_flags_get(swigCPtr);
      return ret;
    } 
  }

  public AtomArray arr {
    set {
      C4dApiPINVOKE.ModelingCommandData_arr_set(swigCPtr, AtomArray.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = C4dApiPINVOKE.ModelingCommandData_arr_get(swigCPtr);
      AtomArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new AtomArray(cPtr, false);
      return ret;
    } 
  }

  public AtomArray result {
    set {
      C4dApiPINVOKE.ModelingCommandData_result_set(swigCPtr, AtomArray.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = C4dApiPINVOKE.ModelingCommandData_result_get(swigCPtr);
      AtomArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new AtomArray(cPtr, false);
      return ret;
    } 
  }

  public ModelingCommandData(BaseDocument doc, BaseObject op, BaseContainer bc, MODELINGCOMMANDMODE mode, MODELINGCOMMANDFLAGS flags, AtomArray result, AtomArray arr) : this(C4dApiPINVOKE.new_ModelingCommandData__SWIG_1(BaseDocument.getCPtr(doc), BaseObject.getCPtr(op), BaseContainer.getCPtr(bc), (int)mode, (int)flags, AtomArray.getCPtr(result), AtomArray.getCPtr(arr)), true) {
  }

  public ModelingCommandData(BaseDocument doc, BaseObject op, BaseContainer bc, MODELINGCOMMANDMODE mode, MODELINGCOMMANDFLAGS flags, AtomArray result) : this(C4dApiPINVOKE.new_ModelingCommandData__SWIG_2(BaseDocument.getCPtr(doc), BaseObject.getCPtr(op), BaseContainer.getCPtr(bc), (int)mode, (int)flags, AtomArray.getCPtr(result)), true) {
  }

  public ModelingCommandData(BaseDocument doc, BaseObject op, BaseContainer bc, MODELINGCOMMANDMODE mode, MODELINGCOMMANDFLAGS flags) : this(C4dApiPINVOKE.new_ModelingCommandData__SWIG_3(BaseDocument.getCPtr(doc), BaseObject.getCPtr(op), BaseContainer.getCPtr(bc), (int)mode, (int)flags), true) {
  }

  public ModelingCommandData(BaseDocument doc, BaseObject op, BaseContainer bc, MODELINGCOMMANDMODE mode) : this(C4dApiPINVOKE.new_ModelingCommandData__SWIG_4(BaseDocument.getCPtr(doc), BaseObject.getCPtr(op), BaseContainer.getCPtr(bc), (int)mode), true) {
  }

  public ModelingCommandData(BaseDocument doc, BaseObject op, BaseContainer bc) : this(C4dApiPINVOKE.new_ModelingCommandData__SWIG_5(BaseDocument.getCPtr(doc), BaseObject.getCPtr(op), BaseContainer.getCPtr(bc)), true) {
  }

  public ModelingCommandData(BaseDocument doc, BaseObject op) : this(C4dApiPINVOKE.new_ModelingCommandData__SWIG_6(BaseDocument.getCPtr(doc), BaseObject.getCPtr(op)), true) {
  }

  public ModelingCommandData(BaseDocument doc) : this(C4dApiPINVOKE.new_ModelingCommandData__SWIG_7(BaseDocument.getCPtr(doc)), true) {
  }

}

}
