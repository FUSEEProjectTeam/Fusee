//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace C4d {

public class ObjectDataM : ObjectData {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal ObjectDataM(global::System.IntPtr cPtr, bool cMemoryOwn) : base(C4dApiPINVOKE.ObjectDataM_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ObjectDataM obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ObjectDataM() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          C4dApiPINVOKE.delete_ObjectDataM(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public ObjectDataM(bool memOwn) : this(C4dApiPINVOKE.new_ObjectDataM(), memOwn) {
    SwigDirectorConnect();
  }

  private ObjectDataM() : this(C4dApiPINVOKE.new_ObjectDataM(), true) {
    SwigDirectorConnect();
  }

  public override bool GetDDescription(GeListNode node, Description description, SWIGTYPE_p_DESCFLAGS_DESC flags) {
    bool ret = (SwigDerivedClassHasMethod("GetDDescription", swigMethodTypes10) ? C4dApiPINVOKE.ObjectDataM_GetDDescriptionSwigExplicitObjectDataM__SWIG_0(swigCPtr, GeListNode.getCPtr(node), Description.getCPtr(description), SWIGTYPE_p_DESCFLAGS_DESC.getCPtr(flags)) : C4dApiPINVOKE.ObjectDataM_GetDDescription__SWIG_0(swigCPtr, GeListNode.getCPtr(node), Description.getCPtr(description), SWIGTYPE_p_DESCFLAGS_DESC.getCPtr(flags)));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool GetDDescription(GeListNode node, DDescriptionParams descparams) {
    bool ret = (SwigDerivedClassHasMethod("GetDDescription", swigMethodTypes32) ? C4dApiPINVOKE.ObjectDataM_GetDDescriptionSwigExplicitObjectDataM__SWIG_1(swigCPtr, GeListNode.getCPtr(node), DDescriptionParams.getCPtr(descparams)) : C4dApiPINVOKE.ObjectDataM_GetDDescription__SWIG_1(swigCPtr, GeListNode.getCPtr(node), DDescriptionParams.getCPtr(descparams)));
    return ret;
  }

  public static BaseContainer GetDataInstance(BaseObject op) {
    global::System.IntPtr cPtr = C4dApiPINVOKE.ObjectDataM_GetDataInstance__SWIG_0(BaseObject.getCPtr(op));
    BaseContainer ret = (cPtr == global::System.IntPtr.Zero) ? null : new BaseContainer(cPtr, false);
    return ret;
  }

  public static BaseContainer GetDataInstance(GeListNode node) {
    global::System.IntPtr cPtr = C4dApiPINVOKE.ObjectDataM_GetDataInstance__SWIG_1(GeListNode.getCPtr(node));
    BaseContainer ret = (cPtr == global::System.IntPtr.Zero) ? null : new BaseContainer(cPtr, false);
    return ret;
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("Init", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateObjectDataM_0(SwigDirectorInit);
    if (SwigDerivedClassHasMethod("Free", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateObjectDataM_1(SwigDirectorFree);
    if (SwigDerivedClassHasMethod("Read", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateObjectDataM_2(SwigDirectorRead);
    if (SwigDerivedClassHasMethod("Write", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateObjectDataM_3(SwigDirectorWrite);
    if (SwigDerivedClassHasMethod("CopyTo", swigMethodTypes4))
      swigDelegate4 = new SwigDelegateObjectDataM_4(SwigDirectorCopyTo);
    if (SwigDerivedClassHasMethod("Message", swigMethodTypes5))
      swigDelegate5 = new SwigDelegateObjectDataM_5(SwigDirectorMessage);
    if (SwigDerivedClassHasMethod("GetBubbleHelp", swigMethodTypes6))
      swigDelegate6 = new SwigDelegateObjectDataM_6(SwigDirectorGetBubbleHelp);
    if (SwigDerivedClassHasMethod("GetDocument", swigMethodTypes7))
      swigDelegate7 = new SwigDelegateObjectDataM_7(SwigDirectorGetDocument);
    if (SwigDerivedClassHasMethod("GetBranchInfo", swigMethodTypes8))
      swigDelegate8 = new SwigDelegateObjectDataM_8(SwigDirectorGetBranchInfo);
    if (SwigDerivedClassHasMethod("IsInstanceOf", swigMethodTypes9))
      swigDelegate9 = new SwigDelegateObjectDataM_9(SwigDirectorIsInstanceOf);
    if (SwigDerivedClassHasMethod("GetDDescription", swigMethodTypes10))
      swigDelegate10 = new SwigDelegateObjectDataM_10(SwigDirectorGetDDescription__SWIG_0);
    if (SwigDerivedClassHasMethod("GetDParameter", swigMethodTypes11))
      swigDelegate11 = new SwigDelegateObjectDataM_11(SwigDirectorGetDParameter);
    if (SwigDerivedClassHasMethod("SetDParameter", swigMethodTypes12))
      swigDelegate12 = new SwigDelegateObjectDataM_12(SwigDirectorSetDParameter);
    if (SwigDerivedClassHasMethod("GetDEnabling", swigMethodTypes13))
      swigDelegate13 = new SwigDelegateObjectDataM_13(SwigDirectorGetDEnabling);
    if (SwigDerivedClassHasMethod("TranslateDescID", swigMethodTypes14))
      swigDelegate14 = new SwigDelegateObjectDataM_14(SwigDirectorTranslateDescID);
    if (SwigDerivedClassHasMethod("IsDocumentRelated", swigMethodTypes15))
      swigDelegate15 = new SwigDelegateObjectDataM_15(SwigDirectorIsDocumentRelated);
    if (SwigDerivedClassHasMethod("GetDimension", swigMethodTypes16))
      swigDelegate16 = new SwigDelegateObjectDataM_16(SwigDirectorGetDimension);
    if (SwigDerivedClassHasMethod("Draw", swigMethodTypes17))
      swigDelegate17 = new SwigDelegateObjectDataM_17(SwigDirectorDraw);
    if (SwigDerivedClassHasMethod("DrawShadow", swigMethodTypes18))
      swigDelegate18 = new SwigDelegateObjectDataM_18(SwigDirectorDrawShadow);
    if (SwigDerivedClassHasMethod("DetectHandle", swigMethodTypes19))
      swigDelegate19 = new SwigDelegateObjectDataM_19(SwigDirectorDetectHandle);
    if (SwigDerivedClassHasMethod("MoveHandle", swigMethodTypes20))
      swigDelegate20 = new SwigDelegateObjectDataM_20(SwigDirectorMoveHandle);
    if (SwigDerivedClassHasMethod("AddToExecution", swigMethodTypes21))
      swigDelegate21 = new SwigDelegateObjectDataM_21(SwigDirectorAddToExecution);
    if (SwigDerivedClassHasMethod("Execute", swigMethodTypes22))
      swigDelegate22 = new SwigDelegateObjectDataM_22(SwigDirectorExecute);
    if (SwigDerivedClassHasMethod("GetModelingAxis", swigMethodTypes23))
      swigDelegate23 = new SwigDelegateObjectDataM_23(SwigDirectorGetModelingAxis);
    if (SwigDerivedClassHasMethod("GetVirtualObjects", swigMethodTypes24))
      swigDelegate24 = new SwigDelegateObjectDataM_24(SwigDirectorGetVirtualObjects);
    if (SwigDerivedClassHasMethod("ModifyObject", swigMethodTypes25))
      swigDelegate25 = new SwigDelegateObjectDataM_25(SwigDirectorModifyObject);
    if (SwigDerivedClassHasMethod("CheckDirty", swigMethodTypes26))
      swigDelegate26 = new SwigDelegateObjectDataM_26(SwigDirectorCheckDirty);
    if (SwigDerivedClassHasMethod("GetContour", swigMethodTypes27))
      swigDelegate27 = new SwigDelegateObjectDataM_27(SwigDirectorGetContour);
    if (SwigDerivedClassHasMethod("ModifyParticles", swigMethodTypes28))
      swigDelegate28 = new SwigDelegateObjectDataM_28(SwigDirectorModifyParticles);
    if (SwigDerivedClassHasMethod("GetHandleCount", swigMethodTypes29))
      swigDelegate29 = new SwigDelegateObjectDataM_29(SwigDirectorGetHandleCount);
    if (SwigDerivedClassHasMethod("GetHandle", swigMethodTypes30))
      swigDelegate30 = new SwigDelegateObjectDataM_30(SwigDirectorGetHandle);
    if (SwigDerivedClassHasMethod("SetHandle", swigMethodTypes31))
      swigDelegate31 = new SwigDelegateObjectDataM_31(SwigDirectorSetHandle);
    if (SwigDerivedClassHasMethod("GetDDescription", swigMethodTypes32))
      swigDelegate32 = new SwigDelegateObjectDataM_32(SwigDirectorGetDDescription__SWIG_1);
    C4dApiPINVOKE.ObjectDataM_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4, swigDelegate5, swigDelegate6, swigDelegate7, swigDelegate8, swigDelegate9, swigDelegate10, swigDelegate11, swigDelegate12, swigDelegate13, swigDelegate14, swigDelegate15, swigDelegate16, swigDelegate17, swigDelegate18, swigDelegate19, swigDelegate20, swigDelegate21, swigDelegate22, swigDelegate23, swigDelegate24, swigDelegate25, swigDelegate26, swigDelegate27, swigDelegate28, swigDelegate29, swigDelegate30, swigDelegate31, swigDelegate32);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(ObjectDataM));
    return hasDerivedMethod;
  }

  private bool SwigDirectorInit(global::System.IntPtr node) {
    return Init((node == global::System.IntPtr.Zero) ? null : new GeListNode(node, false));
  }

  private void SwigDirectorFree(global::System.IntPtr node) {
    Free((node == global::System.IntPtr.Zero) ? null : new GeListNode(node, false));
  }

  private bool SwigDirectorRead(global::System.IntPtr node, global::System.IntPtr hf, int level) {
    return Read((node == global::System.IntPtr.Zero) ? null : new GeListNode(node, false), (hf == global::System.IntPtr.Zero) ? null : new HyperFile(hf, false), level);
  }

  private bool SwigDirectorWrite(global::System.IntPtr node, global::System.IntPtr hf) {
    return Write((node == global::System.IntPtr.Zero) ? null : new GeListNode(node, false), (hf == global::System.IntPtr.Zero) ? null : new HyperFile(hf, false));
  }

  private bool SwigDirectorCopyTo(global::System.IntPtr dest, global::System.IntPtr snode, global::System.IntPtr dnode, int flags, global::System.IntPtr trn) {
    return CopyTo((dest == global::System.IntPtr.Zero) ? null : new NodeData(dest, false), (snode == global::System.IntPtr.Zero) ? null : new GeListNode(snode, false), (dnode == global::System.IntPtr.Zero) ? null : new GeListNode(dnode, false), (COPYFLAGS)flags, (trn == global::System.IntPtr.Zero) ? null : new AliasTrans(trn, false));
  }

  private bool SwigDirectorMessage(global::System.IntPtr node, int type, global::System.IntPtr data) {
    return Message((node == global::System.IntPtr.Zero) ? null : new GeListNode(node, false), type, (data == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(data, false));
  }

  private void SwigDirectorGetBubbleHelp(global::System.IntPtr node, global::System.IntPtr str) {
    GetBubbleHelp((node == global::System.IntPtr.Zero) ? null : new GeListNode(node, false), new SWIGTYPE_p_String(str, false));
  }

  private global::System.IntPtr SwigDirectorGetDocument(global::System.IntPtr node) {
    return BaseDocument.getCPtr(GetDocument((node == global::System.IntPtr.Zero) ? null : new GeListNode(node, false))).Handle;
  }

  private int SwigDirectorGetBranchInfo(global::System.IntPtr node, global::System.IntPtr info, int max, int flags) {
    return GetBranchInfo((node == global::System.IntPtr.Zero) ? null : new GeListNode(node, false), (info == global::System.IntPtr.Zero) ? null : new BranchInfo(info, false), max, (GETBRANCHINFO)flags);
  }

  private bool SwigDirectorIsInstanceOf(global::System.IntPtr node, int type) {
    return IsInstanceOf((node == global::System.IntPtr.Zero) ? null : new GeListNode(node, false), type);
  }

  private bool SwigDirectorGetDDescription__SWIG_0(global::System.IntPtr node, global::System.IntPtr description, global::System.IntPtr flags) {
    return GetDDescription((node == global::System.IntPtr.Zero) ? null : new GeListNode(node, false), (description == global::System.IntPtr.Zero) ? null : new Description(description, false), new SWIGTYPE_p_DESCFLAGS_DESC(flags, false));
  }

  private bool SwigDirectorGetDParameter(global::System.IntPtr node, global::System.IntPtr id, global::System.IntPtr t_data, global::System.IntPtr flags) {
    return GetDParameter((node == global::System.IntPtr.Zero) ? null : new GeListNode(node, false), new DescID(id, false), new GeData(t_data, false), new SWIGTYPE_p_DESCFLAGS_GET(flags, false));
  }

  private bool SwigDirectorSetDParameter(global::System.IntPtr node, global::System.IntPtr id, global::System.IntPtr t_data, global::System.IntPtr flags) {
    return SetDParameter((node == global::System.IntPtr.Zero) ? null : new GeListNode(node, false), new DescID(id, false), new GeData(t_data, false), new SWIGTYPE_p_DESCFLAGS_SET(flags, false));
  }

  private bool SwigDirectorGetDEnabling(global::System.IntPtr node, global::System.IntPtr id, global::System.IntPtr t_data, int flags, global::System.IntPtr itemdesc) {
    return GetDEnabling((node == global::System.IntPtr.Zero) ? null : new GeListNode(node, false), new DescID(id, false), new GeData(t_data, false), (DESCFLAGS_ENABLE)flags, (itemdesc == global::System.IntPtr.Zero) ? null : new BaseContainer(itemdesc, false));
  }

  private bool SwigDirectorTranslateDescID(global::System.IntPtr node, global::System.IntPtr id, global::System.IntPtr res_id, global::System.IntPtr res_at) {
    return TranslateDescID((node == global::System.IntPtr.Zero) ? null : new GeListNode(node, false), new DescID(id, false), new DescID(res_id, false), new SWIGTYPE_p_p_C4DAtom(res_at, false));
  }

  private bool SwigDirectorIsDocumentRelated(global::System.IntPtr node, global::System.IntPtr docrelated) {
    return IsDocumentRelated((node == global::System.IntPtr.Zero) ? null : new GeListNode(node, false), new SWIGTYPE_p_Bool(docrelated, false));
  }

  private void SwigDirectorGetDimension(global::System.IntPtr op, global::System.IntPtr mp, global::System.IntPtr rad) {
    Fusee.Math.Core.double3 vec_mp;
    unsafe {vec_mp = Fusee.Math.ArrayConvert.ArrayDoubleTodouble3((double *)mp);}
    /* Vector*&_csdirectorin_pre */
    Fusee.Math.Core.double3 vec_rad;
    unsafe {vec_rad = Fusee.Math.ArrayConvert.ArrayDoubleTodouble3((double *)rad);}
    /* Vector*&_csdirectorin_pre */
    try {
      GetDimension((op == global::System.IntPtr.Zero) ? null : new BaseObject(op, false), ref vec_mp /* Vector*&_csdirectorin */, ref vec_rad /* Vector*&_csdirectorin */);
    } finally {
        unsafe {Fusee.Math.ArrayConvert.double3ToArrayDouble(vec_mp, (double *)mp);}
        /* Vector*&_csdirectorin_post */
        unsafe {Fusee.Math.ArrayConvert.double3ToArrayDouble(vec_rad, (double *)rad);}
        /* Vector*&_csdirectorin_post */
    }
  }

  private int SwigDirectorDraw(global::System.IntPtr op, int drawpass, global::System.IntPtr bd, global::System.IntPtr bh) {
    return (int)Draw((op == global::System.IntPtr.Zero) ? null : new BaseObject(op, false), (DRAWPASS)drawpass, (bd == global::System.IntPtr.Zero) ? null : new BaseDraw(bd, false), (bh == global::System.IntPtr.Zero) ? null : new BaseDrawHelp(bh, false));
  }

  private int SwigDirectorDrawShadow(global::System.IntPtr op, global::System.IntPtr bd, global::System.IntPtr bh) {
    return (int)DrawShadow((op == global::System.IntPtr.Zero) ? null : new BaseObject(op, false), (bd == global::System.IntPtr.Zero) ? null : new BaseDraw(bd, false), (bh == global::System.IntPtr.Zero) ? null : new BaseDrawHelp(bh, false));
  }

  private int SwigDirectorDetectHandle(global::System.IntPtr op, global::System.IntPtr bd, int x, int y, int qualifier) {
    return DetectHandle((op == global::System.IntPtr.Zero) ? null : new BaseObject(op, false), (bd == global::System.IntPtr.Zero) ? null : new BaseDraw(bd, false), x, y, (QUALIFIER)qualifier);
  }

  private bool SwigDirectorMoveHandle(global::System.IntPtr op, global::System.IntPtr undo, global::System.IntPtr /* constVector&_imtype_out */ mouse_pos, int hit_id, int qualifier, global::System.IntPtr bd) {
    Fusee.Math.Core.double3 vec_mouse_pos;
    unsafe {vec_mouse_pos = Fusee.Math.ArrayConvert.ArrayDoubleTodouble3((double *)mouse_pos);}
    /* constVector&_csdirectorin_pre */
    try {
      return MoveHandle((op == global::System.IntPtr.Zero) ? null : new BaseObject(op, false), (undo == global::System.IntPtr.Zero) ? null : new BaseObject(undo, false), vec_mouse_pos /* Vector*&_csdirectorin */, hit_id, (QUALIFIER)qualifier, (bd == global::System.IntPtr.Zero) ? null : new BaseDraw(bd, false));
    } finally {
        /* no re-conversion because of const declaration */
        /* constVector&_csdirectorin_post */
    }
  }

  private bool SwigDirectorAddToExecution(global::System.IntPtr op, global::System.IntPtr list) {
    return AddToExecution((op == global::System.IntPtr.Zero) ? null : new BaseObject(op, false), (list == global::System.IntPtr.Zero) ? null : new PriorityList(list, false));
  }

  private int SwigDirectorExecute(global::System.IntPtr op, global::System.IntPtr doc, global::System.IntPtr bt, int priority, int flags) {
    return (int)Execute((op == global::System.IntPtr.Zero) ? null : new BaseObject(op, false), (doc == global::System.IntPtr.Zero) ? null : new BaseDocument(doc, false), (bt == global::System.IntPtr.Zero) ? null : new BaseThread(bt, false), priority, (EXECUTIONFLAGS)flags);
  }

  private void SwigDirectorGetModelingAxis(global::System.IntPtr op, global::System.IntPtr doc, global::System.IntPtr axis) {
    Fusee.Math.Core.double4x4 mtx_axis;
    unsafe {mtx_axis = Fusee.Math.ArrayConvert.ArrayDoubleC4DLayoutTodouble4x4((double *)axis);}
    /* Matrix*&_csdirectorin_pre */
    try {
      GetModelingAxis((op == global::System.IntPtr.Zero) ? null : new BaseObject(op, false), (doc == global::System.IntPtr.Zero) ? null : new BaseDocument(doc, false), ref mtx_axis /* Matrix*&_csdirectorin */);
    } finally {
        unsafe {Fusee.Math.ArrayConvert.double4x4ToArrayDoubleC4DLayout(mtx_axis, (double *)axis);}
        /* Matrix*&_csdirectorin_post */
    }
  }

  private global::System.IntPtr SwigDirectorGetVirtualObjects(global::System.IntPtr op, global::System.IntPtr hh) {
    return BaseObject.getCPtr(GetVirtualObjects((op == global::System.IntPtr.Zero) ? null : new BaseObject(op, false), (hh == global::System.IntPtr.Zero) ? null : new HierarchyHelp(hh, false))).Handle;
  }

  private bool SwigDirectorModifyObject(global::System.IntPtr mod, global::System.IntPtr doc, global::System.IntPtr op, global::System.IntPtr /* constMatrix&_imtype_out */ op_mg, global::System.IntPtr /* constMatrix&_imtype_out */ mod_mg, double lod, int flags, global::System.IntPtr thread) {
    Fusee.Math.Core.double4x4 mtx_op_mg;
    unsafe {mtx_op_mg = Fusee.Math.ArrayConvert.ArrayDoubleC4DLayoutTodouble4x4((double *)op_mg);}
    /* constMatrix&_csdirectorin_pre */
    Fusee.Math.Core.double4x4 mtx_mod_mg;
    unsafe {mtx_mod_mg = Fusee.Math.ArrayConvert.ArrayDoubleC4DLayoutTodouble4x4((double *)mod_mg);}
    /* constMatrix&_csdirectorin_pre */
    try {
      return ModifyObject((mod == global::System.IntPtr.Zero) ? null : new BaseObject(mod, false), (doc == global::System.IntPtr.Zero) ? null : new BaseDocument(doc, false), (op == global::System.IntPtr.Zero) ? null : new BaseObject(op, false), ref mtx_op_mg /* constMatrix&_csdirectorin */, ref mtx_mod_mg /* constMatrix&_csdirectorin */, lod, flags, (thread == global::System.IntPtr.Zero) ? null : new BaseThread(thread, false));
    } finally {
        unsafe {Fusee.Math.ArrayConvert.double4x4ToArrayDoubleC4DLayout(mtx_op_mg, (double *)op_mg);}
        /* constMatrix&_csdirectorin_post */
        unsafe {Fusee.Math.ArrayConvert.double4x4ToArrayDoubleC4DLayout(mtx_mod_mg, (double *)mod_mg);}
        /* constMatrix&_csdirectorin_post */
    }
  }

  private void SwigDirectorCheckDirty(global::System.IntPtr op, global::System.IntPtr doc) {
    CheckDirty((op == global::System.IntPtr.Zero) ? null : new BaseObject(op, false), (doc == global::System.IntPtr.Zero) ? null : new BaseDocument(doc, false));
  }

  private global::System.IntPtr SwigDirectorGetContour(global::System.IntPtr op, global::System.IntPtr doc, double lod, global::System.IntPtr bt) {
    return SplineObject.getCPtr(GetContour((op == global::System.IntPtr.Zero) ? null : new BaseObject(op, false), (doc == global::System.IntPtr.Zero) ? null : new BaseDocument(doc, false), lod, (bt == global::System.IntPtr.Zero) ? null : new BaseThread(bt, false))).Handle;
  }

  private void SwigDirectorModifyParticles(global::System.IntPtr op, global::System.IntPtr pp, global::System.IntPtr ss, int pcnt, double diff) {
    ModifyParticles((op == global::System.IntPtr.Zero) ? null : new BaseObject(op, false), (pp == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Particle(pp, false), (ss == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_BaseParticle(ss, false), pcnt, diff);
  }

  private int SwigDirectorGetHandleCount(global::System.IntPtr op) {
    return GetHandleCount((op == global::System.IntPtr.Zero) ? null : new BaseObject(op, false));
  }

  private void SwigDirectorGetHandle(global::System.IntPtr op, int i, global::System.IntPtr info) {
    GetHandle((op == global::System.IntPtr.Zero) ? null : new BaseObject(op, false), i, new HandleInfo(info, false));
  }

  private void SwigDirectorSetHandle(global::System.IntPtr op, int i, Fusee.Math.Core.double3 /* Vector_imtype_out */ p, global::System.IntPtr info) {
/* NOP Vector_csdirectorin_pre */
    SetHandle((op == global::System.IntPtr.Zero) ? null : new BaseObject(op, false), i, p /* Vector_csdirectorin */, new HandleInfo(info, false));
  }

  private bool SwigDirectorGetDDescription__SWIG_1(global::System.IntPtr node, global::System.IntPtr descparams) {
    return GetDDescription((node == global::System.IntPtr.Zero) ? null : new GeListNode(node, false), (descparams == global::System.IntPtr.Zero) ? null : new DDescriptionParams(descparams, false));
  }

  public delegate bool SwigDelegateObjectDataM_0(global::System.IntPtr node);
  public delegate void SwigDelegateObjectDataM_1(global::System.IntPtr node);
  public delegate bool SwigDelegateObjectDataM_2(global::System.IntPtr node, global::System.IntPtr hf, int level);
  public delegate bool SwigDelegateObjectDataM_3(global::System.IntPtr node, global::System.IntPtr hf);
  public delegate bool SwigDelegateObjectDataM_4(global::System.IntPtr dest, global::System.IntPtr snode, global::System.IntPtr dnode, int flags, global::System.IntPtr trn);
  public delegate bool SwigDelegateObjectDataM_5(global::System.IntPtr node, int type, global::System.IntPtr data);
  public delegate void SwigDelegateObjectDataM_6(global::System.IntPtr node, global::System.IntPtr str);
  public delegate global::System.IntPtr SwigDelegateObjectDataM_7(global::System.IntPtr node);
  public delegate int SwigDelegateObjectDataM_8(global::System.IntPtr node, global::System.IntPtr info, int max, int flags);
  public delegate bool SwigDelegateObjectDataM_9(global::System.IntPtr node, int type);
  public delegate bool SwigDelegateObjectDataM_10(global::System.IntPtr node, global::System.IntPtr description, global::System.IntPtr flags);
  public delegate bool SwigDelegateObjectDataM_11(global::System.IntPtr node, global::System.IntPtr id, global::System.IntPtr t_data, global::System.IntPtr flags);
  public delegate bool SwigDelegateObjectDataM_12(global::System.IntPtr node, global::System.IntPtr id, global::System.IntPtr t_data, global::System.IntPtr flags);
  public delegate bool SwigDelegateObjectDataM_13(global::System.IntPtr node, global::System.IntPtr id, global::System.IntPtr t_data, int flags, global::System.IntPtr itemdesc);
  public delegate bool SwigDelegateObjectDataM_14(global::System.IntPtr node, global::System.IntPtr id, global::System.IntPtr res_id, global::System.IntPtr res_at);
  public delegate bool SwigDelegateObjectDataM_15(global::System.IntPtr node, global::System.IntPtr docrelated);
  public delegate void SwigDelegateObjectDataM_16(global::System.IntPtr op, global::System.IntPtr mp, global::System.IntPtr rad);
  public delegate int SwigDelegateObjectDataM_17(global::System.IntPtr op, int drawpass, global::System.IntPtr bd, global::System.IntPtr bh);
  public delegate int SwigDelegateObjectDataM_18(global::System.IntPtr op, global::System.IntPtr bd, global::System.IntPtr bh);
  public delegate int SwigDelegateObjectDataM_19(global::System.IntPtr op, global::System.IntPtr bd, int x, int y, int qualifier);
  public delegate bool SwigDelegateObjectDataM_20(global::System.IntPtr op, global::System.IntPtr undo, global::System.IntPtr /* constVector&_imtype_out */ mouse_pos, int hit_id, int qualifier, global::System.IntPtr bd);
  public delegate bool SwigDelegateObjectDataM_21(global::System.IntPtr op, global::System.IntPtr list);
  public delegate int SwigDelegateObjectDataM_22(global::System.IntPtr op, global::System.IntPtr doc, global::System.IntPtr bt, int priority, int flags);
  public delegate void SwigDelegateObjectDataM_23(global::System.IntPtr op, global::System.IntPtr doc, global::System.IntPtr axis);
  public delegate global::System.IntPtr SwigDelegateObjectDataM_24(global::System.IntPtr op, global::System.IntPtr hh);
  public delegate bool SwigDelegateObjectDataM_25(global::System.IntPtr mod, global::System.IntPtr doc, global::System.IntPtr op, global::System.IntPtr /* constMatrix&_imtype_out */ op_mg, global::System.IntPtr /* constMatrix&_imtype_out */ mod_mg, double lod, int flags, global::System.IntPtr thread);
  public delegate void SwigDelegateObjectDataM_26(global::System.IntPtr op, global::System.IntPtr doc);
  public delegate global::System.IntPtr SwigDelegateObjectDataM_27(global::System.IntPtr op, global::System.IntPtr doc, double lod, global::System.IntPtr bt);
  public delegate void SwigDelegateObjectDataM_28(global::System.IntPtr op, global::System.IntPtr pp, global::System.IntPtr ss, int pcnt, double diff);
  public delegate int SwigDelegateObjectDataM_29(global::System.IntPtr op);
  public delegate void SwigDelegateObjectDataM_30(global::System.IntPtr op, int i, global::System.IntPtr info);
  public delegate void SwigDelegateObjectDataM_31(global::System.IntPtr op, int i, Fusee.Math.Core.double3 /* Vector_imtype_out */ p, global::System.IntPtr info);
  public delegate bool SwigDelegateObjectDataM_32(global::System.IntPtr node, global::System.IntPtr descparams);

  private SwigDelegateObjectDataM_0 swigDelegate0;
  private SwigDelegateObjectDataM_1 swigDelegate1;
  private SwigDelegateObjectDataM_2 swigDelegate2;
  private SwigDelegateObjectDataM_3 swigDelegate3;
  private SwigDelegateObjectDataM_4 swigDelegate4;
  private SwigDelegateObjectDataM_5 swigDelegate5;
  private SwigDelegateObjectDataM_6 swigDelegate6;
  private SwigDelegateObjectDataM_7 swigDelegate7;
  private SwigDelegateObjectDataM_8 swigDelegate8;
  private SwigDelegateObjectDataM_9 swigDelegate9;
  private SwigDelegateObjectDataM_10 swigDelegate10;
  private SwigDelegateObjectDataM_11 swigDelegate11;
  private SwigDelegateObjectDataM_12 swigDelegate12;
  private SwigDelegateObjectDataM_13 swigDelegate13;
  private SwigDelegateObjectDataM_14 swigDelegate14;
  private SwigDelegateObjectDataM_15 swigDelegate15;
  private SwigDelegateObjectDataM_16 swigDelegate16;
  private SwigDelegateObjectDataM_17 swigDelegate17;
  private SwigDelegateObjectDataM_18 swigDelegate18;
  private SwigDelegateObjectDataM_19 swigDelegate19;
  private SwigDelegateObjectDataM_20 swigDelegate20;
  private SwigDelegateObjectDataM_21 swigDelegate21;
  private SwigDelegateObjectDataM_22 swigDelegate22;
  private SwigDelegateObjectDataM_23 swigDelegate23;
  private SwigDelegateObjectDataM_24 swigDelegate24;
  private SwigDelegateObjectDataM_25 swigDelegate25;
  private SwigDelegateObjectDataM_26 swigDelegate26;
  private SwigDelegateObjectDataM_27 swigDelegate27;
  private SwigDelegateObjectDataM_28 swigDelegate28;
  private SwigDelegateObjectDataM_29 swigDelegate29;
  private SwigDelegateObjectDataM_30 swigDelegate30;
  private SwigDelegateObjectDataM_31 swigDelegate31;
  private SwigDelegateObjectDataM_32 swigDelegate32;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] { typeof(GeListNode) };
  private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] { typeof(GeListNode) };
  private static global::System.Type[] swigMethodTypes2 = new global::System.Type[] { typeof(GeListNode), typeof(HyperFile), typeof(int) };
  private static global::System.Type[] swigMethodTypes3 = new global::System.Type[] { typeof(GeListNode), typeof(HyperFile) };
  private static global::System.Type[] swigMethodTypes4 = new global::System.Type[] { typeof(NodeData), typeof(GeListNode), typeof(GeListNode), typeof(COPYFLAGS), typeof(AliasTrans) };
  private static global::System.Type[] swigMethodTypes5 = new global::System.Type[] { typeof(GeListNode), typeof(int), typeof(SWIGTYPE_p_void) };
  private static global::System.Type[] swigMethodTypes6 = new global::System.Type[] { typeof(GeListNode), typeof(SWIGTYPE_p_String) };
  private static global::System.Type[] swigMethodTypes7 = new global::System.Type[] { typeof(GeListNode) };
  private static global::System.Type[] swigMethodTypes8 = new global::System.Type[] { typeof(GeListNode), typeof(BranchInfo), typeof(int), typeof(GETBRANCHINFO) };
  private static global::System.Type[] swigMethodTypes9 = new global::System.Type[] { typeof(GeListNode), typeof(int) };
  private static global::System.Type[] swigMethodTypes10 = new global::System.Type[] { typeof(GeListNode), typeof(Description), typeof(SWIGTYPE_p_DESCFLAGS_DESC) };
  private static global::System.Type[] swigMethodTypes11 = new global::System.Type[] { typeof(GeListNode), typeof(DescID), typeof(GeData), typeof(SWIGTYPE_p_DESCFLAGS_GET) };
  private static global::System.Type[] swigMethodTypes12 = new global::System.Type[] { typeof(GeListNode), typeof(DescID), typeof(GeData), typeof(SWIGTYPE_p_DESCFLAGS_SET) };
  private static global::System.Type[] swigMethodTypes13 = new global::System.Type[] { typeof(GeListNode), typeof(DescID), typeof(GeData), typeof(DESCFLAGS_ENABLE), typeof(BaseContainer) };
  private static global::System.Type[] swigMethodTypes14 = new global::System.Type[] { typeof(GeListNode), typeof(DescID), typeof(DescID), typeof(SWIGTYPE_p_p_C4DAtom) };
  private static global::System.Type[] swigMethodTypes15 = new global::System.Type[] { typeof(GeListNode), typeof(SWIGTYPE_p_Bool) };
  private static global::System.Type[] swigMethodTypes16 = new global::System.Type[] { typeof(BaseObject), typeof(Fusee.Math.Core.double3 /* Vector*&_cstype */).MakeByRefType(), typeof(Fusee.Math.Core.double3 /* Vector*&_cstype */).MakeByRefType() };
  private static global::System.Type[] swigMethodTypes17 = new global::System.Type[] { typeof(BaseObject), typeof(DRAWPASS), typeof(BaseDraw), typeof(BaseDrawHelp) };
  private static global::System.Type[] swigMethodTypes18 = new global::System.Type[] { typeof(BaseObject), typeof(BaseDraw), typeof(BaseDrawHelp) };
  private static global::System.Type[] swigMethodTypes19 = new global::System.Type[] { typeof(BaseObject), typeof(BaseDraw), typeof(int), typeof(int), typeof(QUALIFIER) };
  private static global::System.Type[] swigMethodTypes20 = new global::System.Type[] { typeof(BaseObject), typeof(BaseObject), typeof(Fusee.Math.Core.double3 /* constVector&_cstype */), typeof(int), typeof(QUALIFIER), typeof(BaseDraw) };
  private static global::System.Type[] swigMethodTypes21 = new global::System.Type[] { typeof(BaseObject), typeof(PriorityList) };
  private static global::System.Type[] swigMethodTypes22 = new global::System.Type[] { typeof(BaseObject), typeof(BaseDocument), typeof(BaseThread), typeof(int), typeof(EXECUTIONFLAGS) };
  private static global::System.Type[] swigMethodTypes23 = new global::System.Type[] { typeof(BaseObject), typeof(BaseDocument), typeof(Fusee.Math.Core.double4x4 /* Matrix*&_cstype */).MakeByRefType() };
  private static global::System.Type[] swigMethodTypes24 = new global::System.Type[] { typeof(BaseObject), typeof(HierarchyHelp) };
  private static global::System.Type[] swigMethodTypes25 = new global::System.Type[] { typeof(BaseObject), typeof(BaseDocument), typeof(BaseObject), typeof(Fusee.Math.Core.double4x4 /* constMatrix&_cstype */).MakeByRefType(), typeof(Fusee.Math.Core.double4x4 /* constMatrix&_cstype */).MakeByRefType(), typeof(double), typeof(int), typeof(BaseThread) };
  private static global::System.Type[] swigMethodTypes26 = new global::System.Type[] { typeof(BaseObject), typeof(BaseDocument) };
  private static global::System.Type[] swigMethodTypes27 = new global::System.Type[] { typeof(BaseObject), typeof(BaseDocument), typeof(double), typeof(BaseThread) };
  private static global::System.Type[] swigMethodTypes28 = new global::System.Type[] { typeof(BaseObject), typeof(SWIGTYPE_p_Particle), typeof(SWIGTYPE_p_BaseParticle), typeof(int), typeof(double) };
  private static global::System.Type[] swigMethodTypes29 = new global::System.Type[] { typeof(BaseObject) };
  private static global::System.Type[] swigMethodTypes30 = new global::System.Type[] { typeof(BaseObject), typeof(int), typeof(HandleInfo) };
  private static global::System.Type[] swigMethodTypes31 = new global::System.Type[] { typeof(BaseObject), typeof(int), typeof(Fusee.Math.Core.double3 /* Vector_cstype */), typeof(HandleInfo) };
  private static global::System.Type[] swigMethodTypes32 = new global::System.Type[] { typeof(GeListNode), typeof(DDescriptionParams) };
}

}
