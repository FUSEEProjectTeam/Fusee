//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace C4d {

public class CTrack : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CTrack(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CTrack obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public static CTrack Alloc(BaseList2D bl, DescID id) {
    global::System.IntPtr cPtr = C4dApiPINVOKE.CTrack_Alloc(BaseList2D.getCPtr(bl), DescID.getCPtr(id));
    CTrack ret = (cPtr == global::System.IntPtr.Zero) ? null : new CTrack(cPtr, false);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void Free(SWIGTYPE_p_p_CTrack bl) {
    C4dApiPINVOKE.CTrack_Free(SWIGTYPE_p_p_CTrack.getCPtr(bl));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public CTrack GetNext() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.CTrack_GetNext(swigCPtr);
    CTrack ret = (cPtr == global::System.IntPtr.Zero) ? null : new CTrack(cPtr, false);
    return ret;
  }

  public CTrack GetPred() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.CTrack_GetPred(swigCPtr);
    CTrack ret = (cPtr == global::System.IntPtr.Zero) ? null : new CTrack(cPtr, false);
    return ret;
  }

  public DescID GetDescriptionID() {
    DescID ret = new DescID(C4dApiPINVOKE.CTrack_GetDescriptionID(swigCPtr), false);
    return ret;
  }

  public bool SetDescriptionID(BaseList2D arg0, DescID id) {
    bool ret = C4dApiPINVOKE.CTrack_SetDescriptionID(swigCPtr, BaseList2D.getCPtr(arg0), DescID.getCPtr(id));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public CLOOP GetBefore() {
    CLOOP ret = (CLOOP)C4dApiPINVOKE.CTrack_GetBefore(swigCPtr);
    return ret;
  }

  public void SetBefore(CLOOP type) {
    C4dApiPINVOKE.CTrack_SetBefore(swigCPtr, (int)type);
  }

  public CLOOP GetAfter() {
    CLOOP ret = (CLOOP)C4dApiPINVOKE.CTrack_GetAfter(swigCPtr);
    return ret;
  }

  public void SetAfter(CLOOP type) {
    C4dApiPINVOKE.CTrack_SetAfter(swigCPtr, (int)type);
  }

  public CTrack GetTimeTrack(BaseDocument doc) {
    global::System.IntPtr cPtr = C4dApiPINVOKE.CTrack_GetTimeTrack(swigCPtr, BaseDocument.getCPtr(doc));
    CTrack ret = (cPtr == global::System.IntPtr.Zero) ? null : new CTrack(cPtr, false);
    return ret;
  }

  public void SetTimeTrack(CTrack track) {
    C4dApiPINVOKE.CTrack_SetTimeTrack(swigCPtr, CTrack.getCPtr(track));
  }

  public bool AnimateTrack(BaseDocument doc, BaseList2D op, BaseTime tt, int flags, SWIGTYPE_p_Bool chg, SWIGTYPE_p_void data) {
    bool ret = C4dApiPINVOKE.CTrack_AnimateTrack__SWIG_0(swigCPtr, BaseDocument.getCPtr(doc), BaseList2D.getCPtr(op), BaseTime.getCPtr(tt), flags, SWIGTYPE_p_Bool.getCPtr(chg), SWIGTYPE_p_void.getCPtr(data));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool AnimateTrack(BaseDocument doc, BaseList2D op, BaseTime tt, int flags, SWIGTYPE_p_Bool chg) {
    bool ret = C4dApiPINVOKE.CTrack_AnimateTrack__SWIG_1(swigCPtr, BaseDocument.getCPtr(doc), BaseList2D.getCPtr(op), BaseTime.getCPtr(tt), flags, SWIGTYPE_p_Bool.getCPtr(chg));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Animate(CAnimInfo info, SWIGTYPE_p_Bool chg, SWIGTYPE_p_void data) {
    bool ret = C4dApiPINVOKE.CTrack_Animate__SWIG_0(swigCPtr, CAnimInfo.getCPtr(info), SWIGTYPE_p_Bool.getCPtr(chg), SWIGTYPE_p_void.getCPtr(data));
    return ret;
  }

  public bool Animate(CAnimInfo info, SWIGTYPE_p_Bool chg) {
    bool ret = C4dApiPINVOKE.CTrack_Animate__SWIG_1(swigCPtr, CAnimInfo.getCPtr(info), SWIGTYPE_p_Bool.getCPtr(chg));
    return ret;
  }

  public bool Draw(SWIGTYPE_p_GeClipMap map, BaseTime clip_left, BaseTime clip_right) {
    bool ret = C4dApiPINVOKE.CTrack_Draw(swigCPtr, SWIGTYPE_p_GeClipMap.getCPtr(map), BaseTime.getCPtr(clip_left), BaseTime.getCPtr(clip_right));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool FillKey(BaseDocument doc, BaseList2D bl, CKey key) {
    bool ret = C4dApiPINVOKE.CTrack_FillKey(swigCPtr, BaseDocument.getCPtr(doc), BaseList2D.getCPtr(bl), CKey.getCPtr(key));
    return ret;
  }

  public void FlushData() {
    C4dApiPINVOKE.CTrack_FlushData(swigCPtr);
  }

  public CCurve GetCurve(CCURVE_ENUM type, bool bCreate) {
    global::System.IntPtr cPtr = C4dApiPINVOKE.CTrack_GetCurve__SWIG_0(swigCPtr, (int)type, bCreate);
    CCurve ret = (cPtr == global::System.IntPtr.Zero) ? null : new CCurve(cPtr, false);
    return ret;
  }

  public CCurve GetCurve(CCURVE_ENUM type) {
    global::System.IntPtr cPtr = C4dApiPINVOKE.CTrack_GetCurve__SWIG_1(swigCPtr, (int)type);
    CCurve ret = (cPtr == global::System.IntPtr.Zero) ? null : new CCurve(cPtr, false);
    return ret;
  }

  public CCurve GetCurve() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.CTrack_GetCurve__SWIG_2(swigCPtr);
    CCurve ret = (cPtr == global::System.IntPtr.Zero) ? null : new CCurve(cPtr, false);
    return ret;
  }

  public int GetTrackCategory() {
    int ret = C4dApiPINVOKE.CTrack_GetTrackCategory(swigCPtr);
    return ret;
  }

  public BaseList2D GetObject() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.CTrack_GetObject(swigCPtr);
    BaseList2D ret = (cPtr == global::System.IntPtr.Zero) ? null : new BaseList2D(cPtr, false);
    return ret;
  }

  public double GetValue(BaseDocument doc, BaseTime time) {
    double ret = C4dApiPINVOKE.CTrack_GetValue(swigCPtr, BaseDocument.getCPtr(doc), BaseTime.getCPtr(time));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetUnit(SWIGTYPE_p_Float step) {
    int ret = C4dApiPINVOKE.CTrack_GetUnit(swigCPtr, SWIGTYPE_p_Float.getCPtr(step));
    return ret;
  }

  public BaseContainer GetParameterDescription(BaseContainer temp) {
    global::System.IntPtr cPtr = C4dApiPINVOKE.CTrack_GetParameterDescription(swigCPtr, BaseContainer.getCPtr(temp));
    BaseContainer ret = (cPtr == global::System.IntPtr.Zero) ? null : new BaseContainer(cPtr, false);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GuiMessage(BaseContainer msg, BaseContainer result) {
    int ret = C4dApiPINVOKE.CTrack_GuiMessage(swigCPtr, BaseContainer.getCPtr(msg), BaseContainer.getCPtr(result));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Remap(double time, SWIGTYPE_p_Float64 ret_time, SWIGTYPE_p_Int32 ret_cycle) {
    bool ret = C4dApiPINVOKE.CTrack_Remap(swigCPtr, time, SWIGTYPE_p_Float64.getCPtr(ret_time), SWIGTYPE_p_Int32.getCPtr(ret_cycle));
    return ret;
  }

  public bool TrackInformation(BaseDocument doc, CKey key, SWIGTYPE_p_String str, bool set) {
    bool ret = C4dApiPINVOKE.CTrack_TrackInformation(swigCPtr, BaseDocument.getCPtr(doc), CKey.getCPtr(key), SWIGTYPE_p_String.getCPtr(str), set);
    return ret;
  }

  public int GetHeight() {
    int ret = C4dApiPINVOKE.CTrack_GetHeight(swigCPtr);
    return ret;
  }

  public int GetTLHeight(int id) {
    int ret = C4dApiPINVOKE.CTrack_GetTLHeight(swigCPtr, id);
    return ret;
  }

  public void SetTLHeight(int id, int size) {
    C4dApiPINVOKE.CTrack_SetTLHeight(swigCPtr, id, size);
  }

}

}
