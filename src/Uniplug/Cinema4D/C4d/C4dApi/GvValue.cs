//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace C4d {

public class GvValue : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal GvValue(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(GvValue obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public bool Calculate(GvNode node, GvPortIO io, GvRun r, GvCalc c, int index, BaseTime time) {
    bool ret = C4dApiPINVOKE.GvValue_Calculate__SWIG_0(swigCPtr, GvNode.getCPtr(node), (int)io, GvRun.getCPtr(r), GvCalc.getCPtr(c), index, BaseTime.getCPtr(time));
    return ret;
  }

  public bool Calculate(GvNode node, GvPortIO io, GvRun r, GvCalc c, int index) {
    bool ret = C4dApiPINVOKE.GvValue_Calculate__SWIG_1(swigCPtr, GvNode.getCPtr(node), (int)io, GvRun.getCPtr(r), GvCalc.getCPtr(c), index);
    return ret;
  }

  public bool Calculate(GvNode node, GvPortIO io, GvRun r, GvCalc c) {
    bool ret = C4dApiPINVOKE.GvValue_Calculate__SWIG_2(swigCPtr, GvNode.getCPtr(node), (int)io, GvRun.getCPtr(r), GvCalc.getCPtr(c));
    return ret;
  }

  public bool IsConnected(int index) {
    bool ret = C4dApiPINVOKE.GvValue_IsConnected(swigCPtr, index);
    return ret;
  }

  public bool IsPort() {
    bool ret = C4dApiPINVOKE.GvValue_IsPort(swigCPtr);
    return ret;
  }

  public int NrOfPorts() {
    int ret = C4dApiPINVOKE.GvValue_NrOfPorts(swigCPtr);
    return ret;
  }

  public int GetValueID() {
    int ret = C4dApiPINVOKE.GvValue_GetValueID(swigCPtr);
    return ret;
  }

  public int GetMainID() {
    int ret = C4dApiPINVOKE.GvValue_GetMainID(swigCPtr);
    return ret;
  }

  public GvPort GetPort(int index) {
    global::System.IntPtr cPtr = C4dApiPINVOKE.GvValue_GetPort__SWIG_0(swigCPtr, index);
    GvPort ret = (cPtr == global::System.IntPtr.Zero) ? null : new GvPort(cPtr, false);
    return ret;
  }

  public GvPort GetPort() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.GvValue_GetPort__SWIG_1(swigCPtr);
    GvPort ret = (cPtr == global::System.IntPtr.Zero) ? null : new GvPort(cPtr, false);
    return ret;
  }

}

}
