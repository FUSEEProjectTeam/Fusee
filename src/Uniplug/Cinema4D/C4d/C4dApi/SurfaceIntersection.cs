//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace C4d {

public class SurfaceIntersection : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal SurfaceIntersection(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SurfaceIntersection obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~SurfaceIntersection() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          C4dApiPINVOKE.delete_SurfaceIntersection(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public SurfaceIntersection() : this(C4dApiPINVOKE.new_SurfaceIntersection__SWIG_0(), true) {
  }

  public SurfaceIntersection(SWIGTYPE_p__DONTCONSTRUCT dc) : this(C4dApiPINVOKE.new_SurfaceIntersection__SWIG_1(SWIGTYPE_p__DONTCONSTRUCT.getCPtr(dc)), true) {
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_RayObject op {
    set {
      C4dApiPINVOKE.SurfaceIntersection_op_set(swigCPtr, SWIGTYPE_p_RayObject.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = C4dApiPINVOKE.SurfaceIntersection_op_get(swigCPtr);
      SWIGTYPE_p_RayObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_RayObject(cPtr, false);
      return ret;
    } 
  }

  public RayHitID id {
    set {
      C4dApiPINVOKE.SurfaceIntersection_id_set(swigCPtr, RayHitID.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = C4dApiPINVOKE.SurfaceIntersection_id_get(swigCPtr);
      RayHitID ret = (cPtr == global::System.IntPtr.Zero) ? null : new RayHitID(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_Vector64 p {
    set {
      C4dApiPINVOKE.SurfaceIntersection_p_set(swigCPtr, SWIGTYPE_p_Vector64.getCPtr(value));
      if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_Vector64 ret = new SWIGTYPE_p_Vector64(C4dApiPINVOKE.SurfaceIntersection_p_get(swigCPtr), true);
      if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_Vector64 n {
    set {
      C4dApiPINVOKE.SurfaceIntersection_n_set(swigCPtr, SWIGTYPE_p_Vector64.getCPtr(value));
      if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_Vector64 ret = new SWIGTYPE_p_Vector64(C4dApiPINVOKE.SurfaceIntersection_n_get(swigCPtr), true);
      if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int sid {
    set {
      C4dApiPINVOKE.SurfaceIntersection_sid_set(swigCPtr, value);
    } 
    get {
      int ret = C4dApiPINVOKE.SurfaceIntersection_sid_get(swigCPtr);
      return ret;
    } 
  }

  public double par_u {
    set {
      C4dApiPINVOKE.SurfaceIntersection_par_u_set(swigCPtr, value);
    } 
    get {
      double ret = C4dApiPINVOKE.SurfaceIntersection_par_u_get(swigCPtr);
      return ret;
    } 
  }

  public double par_v {
    set {
      C4dApiPINVOKE.SurfaceIntersection_par_v_set(swigCPtr, value);
    } 
    get {
      double ret = C4dApiPINVOKE.SurfaceIntersection_par_v_get(swigCPtr);
      return ret;
    } 
  }

}

}
