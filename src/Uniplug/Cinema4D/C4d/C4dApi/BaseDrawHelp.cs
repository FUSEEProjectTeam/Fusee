//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace C4d {

public class BaseDrawHelp : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal BaseDrawHelp(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(BaseDrawHelp obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public static BaseDrawHelp Alloc(BaseDraw bd, BaseDocument doc) {
    global::System.IntPtr cPtr = C4dApiPINVOKE.BaseDrawHelp_Alloc(BaseDraw.getCPtr(bd), BaseDocument.getCPtr(doc));
    BaseDrawHelp ret = (cPtr == global::System.IntPtr.Zero) ? null : new BaseDrawHelp(cPtr, false);
    return ret;
  }

  public static void Free(SWIGTYPE_p_p_BaseDrawHelp p) {
    C4dApiPINVOKE.BaseDrawHelp_Free(SWIGTYPE_p_p_BaseDrawHelp.getCPtr(p));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public BaseDocument GetDocument() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.BaseDrawHelp_GetDocument(swigCPtr);
    BaseDocument ret = (cPtr == global::System.IntPtr.Zero) ? null : new BaseDocument(cPtr, false);
    return ret;
  }

  public BaseTag GetActiveTag() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.BaseDrawHelp_GetActiveTag(swigCPtr);
    BaseTag ret = (BaseTag) C4dApiPINVOKE.InstantiateConcreteTag(cPtr, false);
    return ret;
}

  public Fusee.Math.Core.double4x4 /* constMatrix&_cstype_out */ GetMg()  {  /* <constMatrix&_csout> */
      global::System.IntPtr p_ret = C4dApiPINVOKE.BaseDrawHelp_GetMg(swigCPtr);
      Fusee.Math.Core.double4x4 ret;
      unsafe {ret = Fusee.Math.ArrayConvert.ArrayDoubleC4DLayoutTodouble4x4((double *)p_ret);}
      return ret;
   } /* </constMatrix&_csout> */ 

  public void SetMg(ref Fusee.Math.Core.double4x4 /* constMatrix&_cstype */ mg) {
    double[] adbl_mg;
    unsafe {adbl_mg = Fusee.Math.ArrayConvert.double4x4ToArrayDoubleC4DLayout(mg);    fixed (double *pdbl_mg = adbl_mg) {
    /* constMatrix&_csin_pre */
    try {
      C4dApiPINVOKE.BaseDrawHelp_SetMg(swigCPtr, (global::System.IntPtr) pdbl_mg /* constMatrix&_csin */);
    } finally {
        // NOP mg = Fusee.Math.ArrayConvert.ArrayDoubleC4DLayoutTodouble4x4(pdbl_mg);
        /* constMatrix&_csin_post */
    }
} } /* constMatrix&_csin_terminator */
  }

  public BaseContainer GetDisplay() {
    BaseContainer ret = new BaseContainer(C4dApiPINVOKE.BaseDrawHelp_GetDisplay(swigCPtr), true);
    return ret;
  }

  public void SetDisplay(BaseContainer bc) {
    C4dApiPINVOKE.BaseDrawHelp_SetDisplay(swigCPtr, BaseContainer.getCPtr(bc));
  }

  public DRAWFLAGS GetViewSchedulerFlags() {
    DRAWFLAGS ret = (DRAWFLAGS)C4dApiPINVOKE.BaseDrawHelp_GetViewSchedulerFlags(swigCPtr);
    return ret;
  }

  public bool IsActive() {
    bool ret = C4dApiPINVOKE.BaseDrawHelp_IsActive(swigCPtr);
    return ret;
  }

  public bool IsHighlight() {
    bool ret = C4dApiPINVOKE.BaseDrawHelp_IsHighlight(swigCPtr);
    return ret;
  }

}

}
