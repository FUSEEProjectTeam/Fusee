//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace C4d {

public class DragAndDrop : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal DragAndDrop(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(DragAndDrop obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~DragAndDrop() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          C4dApiPINVOKE.delete_DragAndDrop(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public DragAndDrop() : this(C4dApiPINVOKE.new_DragAndDrop(), true) {
  }

  public BaseDocument doc {
    set {
      C4dApiPINVOKE.DragAndDrop_doc_set(swigCPtr, BaseDocument.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = C4dApiPINVOKE.DragAndDrop_doc_get(swigCPtr);
      BaseDocument ret = (cPtr == global::System.IntPtr.Zero) ? null : new BaseDocument(cPtr, false);
      return ret;
    } 
  }

  public C4DAtom sender {
    set {
      C4dApiPINVOKE.DragAndDrop_sender_set(swigCPtr, C4DAtom.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = C4dApiPINVOKE.DragAndDrop_sender_get(swigCPtr);
      C4DAtom ret = (cPtr == global::System.IntPtr.Zero) ? null : new C4DAtom(cPtr, false);
      return ret;
    } 
  }

  public uint flags {
    set {
      C4dApiPINVOKE.DragAndDrop_flags_set(swigCPtr, value);
    } 
    get {
      uint ret = C4dApiPINVOKE.DragAndDrop_flags_get(swigCPtr);
      return ret;
    } 
  }

  public int type {
    set {
      C4dApiPINVOKE.DragAndDrop_type_set(swigCPtr, value);
    } 
    get {
      int ret = C4dApiPINVOKE.DragAndDrop_type_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_void data {
    set {
      C4dApiPINVOKE.DragAndDrop_data_set(swigCPtr, SWIGTYPE_p_void.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = C4dApiPINVOKE.DragAndDrop_data_get(swigCPtr);
      SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
      return ret;
    } 
  }

  public int x {
    set {
      C4dApiPINVOKE.DragAndDrop_x_set(swigCPtr, value);
    } 
    get {
      int ret = C4dApiPINVOKE.DragAndDrop_x_get(swigCPtr);
      return ret;
    } 
  }

  public int y {
    set {
      C4dApiPINVOKE.DragAndDrop_y_set(swigCPtr, value);
    } 
    get {
      int ret = C4dApiPINVOKE.DragAndDrop_y_get(swigCPtr);
      return ret;
    } 
  }

  public BaseContainer msg {
    set {
      C4dApiPINVOKE.DragAndDrop_msg_set(swigCPtr, BaseContainer.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = C4dApiPINVOKE.DragAndDrop_msg_get(swigCPtr);
      BaseContainer ret = (cPtr == global::System.IntPtr.Zero) ? null : new BaseContainer(cPtr, false);
      return ret;
    } 
  }

  public int result {
    set {
      C4dApiPINVOKE.DragAndDrop_result_set(swigCPtr, value);
    } 
    get {
      int ret = C4dApiPINVOKE.DragAndDrop_result_get(swigCPtr);
      return ret;
    } 
  }

}

}
