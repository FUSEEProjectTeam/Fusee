//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace C4d {

public class Ray : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Ray(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Ray obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Ray() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          C4dApiPINVOKE.delete_Ray(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public Ray() : this(C4dApiPINVOKE.new_Ray(), true) {
  }

  public SWIGTYPE_p_Vector64 p {
    set {
      C4dApiPINVOKE.Ray_p_set(swigCPtr, SWIGTYPE_p_Vector64.getCPtr(value));
      if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_Vector64 ret = new SWIGTYPE_p_Vector64(C4dApiPINVOKE.Ray_p_get(swigCPtr), true);
      if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_Vector64 v {
    set {
      C4dApiPINVOKE.Ray_v_set(swigCPtr, SWIGTYPE_p_Vector64.getCPtr(value));
      if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_Vector64 ret = new SWIGTYPE_p_Vector64(C4dApiPINVOKE.Ray_v_get(swigCPtr), true);
      if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public double ior {
    set {
      C4dApiPINVOKE.Ray_ior_set(swigCPtr, value);
    } 
    get {
      double ret = C4dApiPINVOKE.Ray_ior_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_Vector pp {
    set {
      C4dApiPINVOKE.Ray_pp_set(swigCPtr, SWIGTYPE_p_Vector.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = C4dApiPINVOKE.Ray_pp_get(swigCPtr);
      SWIGTYPE_p_Vector ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Vector(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_Vector vv {
    set {
      C4dApiPINVOKE.Ray_vv_set(swigCPtr, SWIGTYPE_p_Vector.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = C4dApiPINVOKE.Ray_vv_get(swigCPtr);
      SWIGTYPE_p_Vector ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Vector(cPtr, false);
      return ret;
    } 
  }

  public Fusee.Math.Core.double3 /* Vector_cstype_out */ transport {
    /* <Vector_csvarin> */
    set 
	{
      C4dApiPINVOKE.Ray_transport_set(swigCPtr, value /* Vector_csin */);
    }  /* </Vector_csvarin> */   
   /* <Vector_csvarout> */
   get
   {  
      Fusee.Math.Core.double3 ret = C4dApiPINVOKE.Ray_transport_get(swigCPtr);
      return ret;
   } /* <Vector_csvarout> */ 
  }

}

}
