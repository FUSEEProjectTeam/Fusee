//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace C4d {

public class PointTag : VariableTag {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal PointTag(global::System.IntPtr cPtr, bool cMemoryOwn) : base(C4dApiPINVOKE.PointTag_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PointTag obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public SWIGTYPE_p_Vector GetDataAddressR() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.PointTag_GetDataAddressR(swigCPtr);
    SWIGTYPE_p_Vector ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Vector(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_Vector GetDataAddressW() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.PointTag_GetDataAddressW(swigCPtr);
    SWIGTYPE_p_Vector ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Vector(cPtr, false);
    return ret;
  }

}

}
