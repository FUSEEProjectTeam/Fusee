//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace C4d {

public class BrushObjectInfo : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal BrushObjectInfo(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(BrushObjectInfo obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~BrushObjectInfo() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          C4dApiPINVOKE.delete_BrushObjectInfo(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public BrushObjectInfo() : this(C4dApiPINVOKE.new_BrushObjectInfo(), true) {
  }

  public BaseObject m_pObject {
    set {
      C4dApiPINVOKE.BrushObjectInfo_m_pObject_set(swigCPtr, BaseObject.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = C4dApiPINVOKE.BrushObjectInfo_m_pObject_get(swigCPtr);
      BaseObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new BaseObject(cPtr, false);
      return ret;
    } 
  }

  public BaseObject m_pOriginObject {
    set {
      C4dApiPINVOKE.BrushObjectInfo_m_pOriginObject_set(swigCPtr, BaseObject.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = C4dApiPINVOKE.BrushObjectInfo_m_pOriginObject_get(swigCPtr);
      BaseObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new BaseObject(cPtr, false);
      return ret;
    } 
  }

  public BaseObject m_pDeformObject {
    set {
      C4dApiPINVOKE.BrushObjectInfo_m_pDeformObject_set(swigCPtr, BaseObject.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = C4dApiPINVOKE.BrushObjectInfo_m_pDeformObject_get(swigCPtr);
      BaseObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new BaseObject(cPtr, false);
      return ret;
    } 
  }

  public Neighbor m_pNeighbor {
    set {
      C4dApiPINVOKE.BrushObjectInfo_m_pNeighbor_set(swigCPtr, Neighbor.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = C4dApiPINVOKE.BrushObjectInfo_m_pNeighbor_get(swigCPtr);
      Neighbor ret = (cPtr == global::System.IntPtr.Zero) ? null : new Neighbor(cPtr, false);
      return ret;
    } 
  }

  public int m_PointCount {
    set {
      C4dApiPINVOKE.BrushObjectInfo_m_PointCount_set(swigCPtr, value);
    } 
    get {
      int ret = C4dApiPINVOKE.BrushObjectInfo_m_PointCount_get(swigCPtr);
      return ret;
    } 
  }

  public int m_PolyCount {
    set {
      C4dApiPINVOKE.BrushObjectInfo_m_PolyCount_set(swigCPtr, value);
    } 
    get {
      int ret = C4dApiPINVOKE.BrushObjectInfo_m_PolyCount_get(swigCPtr);
      return ret;
    } 
  }

  public Fusee.Math.Core.double3 /* Vector_cstype_out */ GetPointAt(int inx)  {  /* <Vector_csout> */
      Fusee.Math.Core.double3 ret = C4dApiPINVOKE.BrushObjectInfo_GetPointAt(swigCPtr, inx);
      return ret;
   } /* <Vector_csout> */ 

  public Fusee.Math.Core.double3 /* Vector_cstype_out */ GetGlobalPointAt(int inx)  {  /* <Vector_csout> */
      Fusee.Math.Core.double3 ret = C4dApiPINVOKE.BrushObjectInfo_GetGlobalPointAt(swigCPtr, inx);
      return ret;
   } /* <Vector_csout> */ 

  public void SetGlobalPointAt(int inx, Fusee.Math.Core.double3 /* Vector_cstype */ v) {
    C4dApiPINVOKE.BrushObjectInfo_SetGlobalPointAt(swigCPtr, inx, v /* Vector_csin */);
  }

  public Fusee.Math.Core.double3 /* Vector_cstype_out */ GetNormalAt(int inx)  {  /* <Vector_csout> */
      Fusee.Math.Core.double3 ret = C4dApiPINVOKE.BrushObjectInfo_GetNormalAt(swigCPtr, inx);
      return ret;
   } /* <Vector_csout> */ 

  public void SetNormalAt(int inx, Fusee.Math.Core.double3 /* Vector_cstype */ v) {
    C4dApiPINVOKE.BrushObjectInfo_SetNormalAt(swigCPtr, inx, v /* Vector_csin */);
  }

  public CPolygon GetPolyAt(int inx) {
    CPolygon ret = new CPolygon(C4dApiPINVOKE.BrushObjectInfo_GetPolyAt(swigCPtr, inx), true);
    return ret;
  }

}

}
