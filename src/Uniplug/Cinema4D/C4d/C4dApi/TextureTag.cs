//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace C4d {

public class TextureTag : BaseTag {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal TextureTag(global::System.IntPtr cPtr, bool cMemoryOwn) : base(C4dApiPINVOKE.TextureTag_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(TextureTag obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static TextureTag Alloc() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.TextureTag_Alloc();
    TextureTag ret = (cPtr == global::System.IntPtr.Zero) ? null : new TextureTag(cPtr, false);
    return ret;
  }

  public static void Free(SWIGTYPE_p_p_TextureTag bl) {
    C4dApiPINVOKE.TextureTag_Free(SWIGTYPE_p_p_TextureTag.getCPtr(bl));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public Fusee.Math.Core.double3 /* Vector_cstype_out */ GetPos()  {  /* <Vector_csout> */
      Fusee.Math.Core.double3 ret = C4dApiPINVOKE.TextureTag_GetPos(swigCPtr);
      return ret;
   } /* <Vector_csout> */ 

  public Fusee.Math.Core.double3 /* Vector_cstype_out */ GetScale()  {  /* <Vector_csout> */
      Fusee.Math.Core.double3 ret = C4dApiPINVOKE.TextureTag_GetScale(swigCPtr);
      return ret;
   } /* <Vector_csout> */ 

  public Fusee.Math.Core.double3 /* Vector_cstype_out */ GetRot()  {  /* <Vector_csout> */
      Fusee.Math.Core.double3 ret = C4dApiPINVOKE.TextureTag_GetRot(swigCPtr);
      return ret;
   } /* <Vector_csout> */ 

  public Fusee.Math.Core.double4x4 /* Matrix_cstype */ GetMl()  {  /* <Matrix_csout> */
      C34M ret_c34m = C4dApiPINVOKE.TextureTag_GetMl(swigCPtr);
	  Fusee.Math.Core.double4x4 ret;
	  unsafe {ret = Fusee.Math.ArrayConvert.ArrayDoubleC4DLayoutTodouble4x4(ret_c34m.m);}
      return ret;
   } /* </Matrix_csout> */ 

  public void SetPos(Fusee.Math.Core.double3 /* constVector&_cstype */ v) {
    C4dApiPINVOKE.TextureTag_SetPos(swigCPtr, ref v /* constVector&_csin */);
  }

  public void SetScale(Fusee.Math.Core.double3 /* constVector&_cstype */ v) {
    C4dApiPINVOKE.TextureTag_SetScale(swigCPtr, ref v /* constVector&_csin */);
  }

  public void SetRot(Fusee.Math.Core.double3 /* constVector&_cstype */ v) {
    C4dApiPINVOKE.TextureTag_SetRot(swigCPtr, ref v /* constVector&_csin */);
  }

  public void SetMl(ref Fusee.Math.Core.double4x4 /* constMatrix&_cstype */ m) {
    double[] adbl_m;
    unsafe {adbl_m = Fusee.Math.ArrayConvert.double4x4ToArrayDoubleC4DLayout(m);    fixed (double *pdbl_m = adbl_m) {
    /* constMatrix&_csin_pre */
    try {
      C4dApiPINVOKE.TextureTag_SetMl(swigCPtr, (global::System.IntPtr) pdbl_m /* constMatrix&_csin */);
    } finally {
        // NOP m = Fusee.Math.ArrayConvert.ArrayDoubleC4DLayoutTodouble4x4(pdbl_m);
        /* constMatrix&_csin_post */
    }
} } /* constMatrix&_csin_terminator */
  }

  public BaseMaterial GetMaterial(bool ignoredoc) {
    global::System.IntPtr cPtr = C4dApiPINVOKE.TextureTag_GetMaterial__SWIG_0(swigCPtr, ignoredoc);
    BaseMaterial ret = (BaseMaterial) C4dApiPINVOKE.InstantiateConcreteMaterial(cPtr, false);
    return ret;
}

  public BaseMaterial GetMaterial() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.TextureTag_GetMaterial__SWIG_1(swigCPtr);
    BaseMaterial ret = (BaseMaterial) C4dApiPINVOKE.InstantiateConcreteMaterial(cPtr, false);
    return ret;
}

  public void SetMaterial(BaseMaterial mat) {
    C4dApiPINVOKE.TextureTag_SetMaterial(swigCPtr, BaseMaterial.getCPtr(mat));
  }

}

}
