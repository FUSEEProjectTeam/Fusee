//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace C4d {

public class PointObject : BaseObject {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal PointObject(global::System.IntPtr cPtr, bool cMemoryOwn) : base(C4dApiPINVOKE.PointObject_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PointObject obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public BaseSelect GetPointS() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.PointObject_GetPointS(swigCPtr);
    BaseSelect ret = (cPtr == global::System.IntPtr.Zero) ? null : new BaseSelect(cPtr, false);
    return ret;
  }

  public BaseSelect GetPointH() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.PointObject_GetPointH(swigCPtr);
    BaseSelect ret = (cPtr == global::System.IntPtr.Zero) ? null : new BaseSelect(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_Vector GetPointR() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.PointObject_GetPointR(swigCPtr);
    SWIGTYPE_p_Vector ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Vector(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_Vector GetPointW() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.PointObject_GetPointW(swigCPtr);
    SWIGTYPE_p_Vector ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Vector(cPtr, false);
    return ret;
  }

  public int GetPointCount() {
    int ret = C4dApiPINVOKE.PointObject_GetPointCount(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_Float32 CalcVertexMap(BaseObject modifier) {
    global::System.IntPtr cPtr = C4dApiPINVOKE.PointObject_CalcVertexMap(swigCPtr, BaseObject.getCPtr(modifier));
    SWIGTYPE_p_Float32 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Float32(cPtr, false);
    return ret;
  }

  public bool ResizeObject(int pcnt) {
    bool ret = C4dApiPINVOKE.PointObject_ResizeObject(swigCPtr, pcnt);
    return ret;
  }

  public void IncreaseBoundingBox(int cnt, ref Fusee.Math.Core.double3 /* Vector*&_cstype */ v) {
    C4dApiPINVOKE.PointObject_IncreaseBoundingBox(swigCPtr, cnt, ref v /* Vector*&_csin */);
  }

  public Fusee.Math.Core.double3 /* Vector_cstype_out */ GetPointAt(int inx)  {  /* <Vector_csout> */
      Fusee.Math.Core.double3 ret = C4dApiPINVOKE.PointObject_GetPointAt(swigCPtr, inx);
      return ret;
   } /* <Vector_csout> */ 

  public void SetPointAt(int inx, Fusee.Math.Core.double3 /* Vector_cstype */ v) {
    C4dApiPINVOKE.PointObject_SetPointAt(swigCPtr, inx, v /* Vector_csin */);
  }

  public static PointObject GetPointObject(BaseObject iObj) {
    global::System.IntPtr cPtr = C4dApiPINVOKE.PointObject_GetPointObject(BaseObject.getCPtr(iObj));
    PointObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new PointObject(cPtr, false);
    return ret;
  }

}

}
