//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace C4d {

public class ColorProfile : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ColorProfile(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ColorProfile obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public static ColorProfile Alloc() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.ColorProfile_Alloc();
    ColorProfile ret = (cPtr == global::System.IntPtr.Zero) ? null : new ColorProfile(cPtr, false);
    return ret;
  }

  public static void Free(SWIGTYPE_p_p_ColorProfile profile) {
    C4dApiPINVOKE.ColorProfile_Free(SWIGTYPE_p_p_ColorProfile.getCPtr(profile));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool CreateDefaultWindow(SWIGTYPE_p_GeDialog dlg) {
    bool ret = C4dApiPINVOKE.ColorProfile_CreateDefaultWindow(swigCPtr, SWIGTYPE_p_GeDialog.getCPtr(dlg));
    return ret;
  }

  public bool OpenProfileFromFile(Filename fn) {
    bool ret = C4dApiPINVOKE.ColorProfile_OpenProfileFromFile(swigCPtr, Filename.getCPtr(fn));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool OpenProfileFromMemory(SWIGTYPE_p_void mem, long memsize) {
    bool ret = C4dApiPINVOKE.ColorProfile_OpenProfileFromMemory(swigCPtr, SWIGTYPE_p_void.getCPtr(mem), memsize);
    return ret;
  }

  public bool WriteProfileToMemory(SWIGTYPE_p_p_void mem, SWIGTYPE_p_Int64 memsize) {
    bool ret = C4dApiPINVOKE.ColorProfile_WriteProfileToMemory(swigCPtr, SWIGTYPE_p_p_void.getCPtr(mem), SWIGTYPE_p_Int64.getCPtr(memsize));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool WriteProfileToFile(Filename fn) {
    bool ret = C4dApiPINVOKE.ColorProfile_WriteProfileToFile(swigCPtr, Filename.getCPtr(fn));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string /* String_cstype */ GetInfo(ColorProfile.COLORPROFILEINFO arg0)  {  /* <String_csout> */
      string ret = C4dApiPINVOKE.ColorProfile_GetInfo(swigCPtr, (int)arg0);
      return ret;
   } /* </String_csout> */ 

  public bool HasProfile() {
    bool ret = C4dApiPINVOKE.ColorProfile_HasProfile(swigCPtr);
    return ret;
  }

  public bool IsMonitorProfileMode() {
    bool ret = C4dApiPINVOKE.ColorProfile_IsMonitorProfileMode(swigCPtr);
    return ret;
  }

  public bool SetMonitorProfileMode(bool on) {
    bool ret = C4dApiPINVOKE.ColorProfile_SetMonitorProfileMode(swigCPtr, on);
    return ret;
  }

  public bool CheckColorMode(COLORMODE colormode) {
    bool ret = C4dApiPINVOKE.ColorProfile_CheckColorMode(swigCPtr, (int)colormode);
    return ret;
  }

  public static ColorProfile GetDefaultSRGB() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.ColorProfile_GetDefaultSRGB();
    ColorProfile ret = (cPtr == global::System.IntPtr.Zero) ? null : new ColorProfile(cPtr, false);
    return ret;
  }

  public static ColorProfile GetDefaultLinearRGB() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.ColorProfile_GetDefaultLinearRGB();
    ColorProfile ret = (cPtr == global::System.IntPtr.Zero) ? null : new ColorProfile(cPtr, false);
    return ret;
  }

  public static ColorProfile GetDefaultSGray() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.ColorProfile_GetDefaultSGray();
    ColorProfile ret = (cPtr == global::System.IntPtr.Zero) ? null : new ColorProfile(cPtr, false);
    return ret;
  }

  public static ColorProfile GetDefaultLinearGray() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.ColorProfile_GetDefaultLinearGray();
    ColorProfile ret = (cPtr == global::System.IntPtr.Zero) ? null : new ColorProfile(cPtr, false);
    return ret;
  }

  public enum COLORPROFILEINFO {
    COLORPROFILEINFO_DESCRIPTION = 0,
    COLORPROFILEINFO_MANUFACTURER = 1,
    COLORPROFILEINFO_MODEL = 2,
    COLORPROFILEINFO_COPYRIGHT = 3
  }

}

}
