//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace C4d {

public class BaseShader : BaseList2D {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal BaseShader(global::System.IntPtr cPtr, bool cMemoryOwn) : base(C4dApiPINVOKE.BaseShader_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(BaseShader obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public new static BaseShader Alloc(int type) {
    global::System.IntPtr cPtr = C4dApiPINVOKE.BaseShader_Alloc(type);
    BaseShader ret = (cPtr == global::System.IntPtr.Zero) ? null : new BaseShader(cPtr, false);
    return ret;
  }

  public static void Free(SWIGTYPE_p_p_BaseShader ps) {
    C4dApiPINVOKE.BaseShader_Free(SWIGTYPE_p_p_BaseShader.getCPtr(ps));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public new BaseShader GetNext() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.BaseShader_GetNext(swigCPtr);
    BaseShader ret = (cPtr == global::System.IntPtr.Zero) ? null : new BaseShader(cPtr, false);
    return ret;
  }

  public new BaseShader GetPred() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.BaseShader_GetPred(swigCPtr);
    BaseShader ret = (cPtr == global::System.IntPtr.Zero) ? null : new BaseShader(cPtr, false);
    return ret;
  }

  public new BaseShader GetUp() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.BaseShader_GetUp(swigCPtr);
    BaseShader ret = (cPtr == global::System.IntPtr.Zero) ? null : new BaseShader(cPtr, false);
    return ret;
  }

  public new BaseShader GetDown() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.BaseShader_GetDown(swigCPtr);
    BaseShader ret = (cPtr == global::System.IntPtr.Zero) ? null : new BaseShader(cPtr, false);
    return ret;
  }

  public new BaseShader GetDownLast() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.BaseShader_GetDownLast(swigCPtr);
    BaseShader ret = (cPtr == global::System.IntPtr.Zero) ? null : new BaseShader(cPtr, false);
    return ret;
  }

  public INITRENDERRESULT InitRender(InitRenderStruct arg0) {
    INITRENDERRESULT ret = (INITRENDERRESULT)C4dApiPINVOKE.BaseShader_InitRender(swigCPtr, InitRenderStruct.getCPtr(arg0));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void FreeRender() {
    C4dApiPINVOKE.BaseShader_FreeRender(swigCPtr);
  }

  public Fusee.Math.Core.double3 /* Vector_cstype_out */ Sample(ChannelData cd)  {  /* <Vector_csout> */
      Fusee.Math.Core.double3 ret = C4dApiPINVOKE.BaseShader_Sample(swigCPtr, ChannelData.getCPtr(cd));
      return ret;
   } /* <Vector_csout> */ 

  public Fusee.Math.Core.double3 /* Vector_cstype_out */ SampleBump(ChannelData cd, SAMPLEBUMP bumpflags)  {  /* <Vector_csout> */
      Fusee.Math.Core.double3 ret = C4dApiPINVOKE.BaseShader_SampleBump(swigCPtr, ChannelData.getCPtr(cd), (int)bumpflags);
      return ret;
   } /* <Vector_csout> */ 

  public BaseBitmap GetBitmap() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.BaseShader_GetBitmap(swigCPtr);
    BaseBitmap ret = (cPtr == global::System.IntPtr.Zero) ? null : new BaseBitmap(cPtr, false);
    return ret;
  }

  public SHADERINFO GetRenderInfo() {
    SHADERINFO ret = (SHADERINFO)C4dApiPINVOKE.BaseShader_GetRenderInfo(swigCPtr);
    return ret;
  }

  public bool Compare(BaseShader dst) {
    bool ret = C4dApiPINVOKE.BaseShader_Compare(swigCPtr, BaseShader.getCPtr(dst));
    return ret;
  }

  public bool IsColorManagementOff(BaseDocument doc) {
    bool ret = C4dApiPINVOKE.BaseShader_IsColorManagementOff(swigCPtr, BaseDocument.getCPtr(doc));
    return ret;
  }

  public BaseShader GetSubsurfaceShader(SWIGTYPE_p_Float bestmpl) {
    global::System.IntPtr cPtr = C4dApiPINVOKE.BaseShader_GetSubsurfaceShader(swigCPtr, SWIGTYPE_p_Float.getCPtr(bestmpl));
    BaseShader ret = (cPtr == global::System.IntPtr.Zero) ? null : new BaseShader(cPtr, false);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public GL_MESSAGE GlMessage(int type, SWIGTYPE_p_void data) {
    GL_MESSAGE ret = (GL_MESSAGE)C4dApiPINVOKE.BaseShader_GlMessage(swigCPtr, type, SWIGTYPE_p_void.getCPtr(data));
    return ret;
  }

  public void DestroyGLImage(BaseDocument doc) {
    C4dApiPINVOKE.BaseShader_DestroyGLImage(swigCPtr, BaseDocument.getCPtr(doc));
  }

  public void InvalidateGLImage(BaseDocument doc) {
    C4dApiPINVOKE.BaseShader_InvalidateGLImage(swigCPtr, BaseDocument.getCPtr(doc));
  }

}

}
