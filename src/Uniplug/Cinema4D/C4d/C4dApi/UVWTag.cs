//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace C4d {

public class UVWTag : VariableTag {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal UVWTag(global::System.IntPtr cPtr, bool cMemoryOwn) : base(C4dApiPINVOKE.UVWTag_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(UVWTag obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public new static UVWTag Alloc(int count) {
    global::System.IntPtr cPtr = C4dApiPINVOKE.UVWTag_Alloc(count);
    UVWTag ret = (cPtr == global::System.IntPtr.Zero) ? null : new UVWTag(cPtr, false);
    return ret;
  }

  public static void Free(SWIGTYPE_p_p_UVWTag bl) {
    C4dApiPINVOKE.UVWTag_Free(SWIGTYPE_p_p_UVWTag.getCPtr(bl));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public UVWStruct GetSlow(int i) {
    UVWStruct ret = new UVWStruct(C4dApiPINVOKE.UVWTag_GetSlow(swigCPtr, i), true);
    return ret;
  }

  public void SetSlow(int i, UVWStruct s) {
    C4dApiPINVOKE.UVWTag_SetSlow(swigCPtr, i, UVWStruct.getCPtr(s));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void CpySlow(int dst, UVWTag srctag, int src) {
    C4dApiPINVOKE.UVWTag_CpySlow(swigCPtr, dst, UVWTag.getCPtr(srctag), src);
  }

  public SWIGTYPE_p_ConstUVWHandle GetDataAddressR() {
    SWIGTYPE_p_ConstUVWHandle ret = new SWIGTYPE_p_ConstUVWHandle(C4dApiPINVOKE.UVWTag_GetDataAddressR(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_UVWHandle GetDataAddressW() {
    SWIGTYPE_p_UVWHandle ret = new SWIGTYPE_p_UVWHandle(C4dApiPINVOKE.UVWTag_GetDataAddressW(swigCPtr), true);
    return ret;
  }

  public static void Get(SWIGTYPE_p_ConstUVWHandle dataptr, int i, UVWStruct res) {
    C4dApiPINVOKE.UVWTag_Get(SWIGTYPE_p_ConstUVWHandle.getCPtr(dataptr), i, UVWStruct.getCPtr(res));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Set(SWIGTYPE_p_UVWHandle dataptr, int i, UVWStruct s) {
    C4dApiPINVOKE.UVWTag_Set(SWIGTYPE_p_UVWHandle.getCPtr(dataptr), i, UVWStruct.getCPtr(s));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Copy(SWIGTYPE_p_UVWHandle destptr, int dst, SWIGTYPE_p_ConstUVWHandle srcptr, int src) {
    C4dApiPINVOKE.UVWTag_Copy(SWIGTYPE_p_UVWHandle.getCPtr(destptr), dst, SWIGTYPE_p_ConstUVWHandle.getCPtr(srcptr), src);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
