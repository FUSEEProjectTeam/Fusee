//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace C4d {

public class CKey : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CKey(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CKey obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public static CKey Alloc() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.CKey_Alloc();
    CKey ret = (cPtr == global::System.IntPtr.Zero) ? null : new CKey(cPtr, false);
    return ret;
  }

  public static void Free(SWIGTYPE_p_p_CKey key) {
    C4dApiPINVOKE.CKey_Free(SWIGTYPE_p_p_CKey.getCPtr(key));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public BaseTime GetTime() {
    BaseTime ret = new BaseTime(C4dApiPINVOKE.CKey_GetTime(swigCPtr), true);
    return ret;
  }

  public void SetTime(CCurve seq, BaseTime t) {
    C4dApiPINVOKE.CKey_SetTime(swigCPtr, CCurve.getCPtr(seq), BaseTime.getCPtr(t));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public BaseTime GetTimeLeft() {
    BaseTime ret = new BaseTime(C4dApiPINVOKE.CKey_GetTimeLeft(swigCPtr), true);
    return ret;
  }

  public void SetTimeLeft(CCurve seq, BaseTime t) {
    C4dApiPINVOKE.CKey_SetTimeLeft(swigCPtr, CCurve.getCPtr(seq), BaseTime.getCPtr(t));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public BaseTime GetTimeRight() {
    BaseTime ret = new BaseTime(C4dApiPINVOKE.CKey_GetTimeRight(swigCPtr), true);
    return ret;
  }

  public void SetTimeRight(CCurve seq, BaseTime t) {
    C4dApiPINVOKE.CKey_SetTimeRight(swigCPtr, CCurve.getCPtr(seq), BaseTime.getCPtr(t));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetValue() {
    double ret = C4dApiPINVOKE.CKey_GetValue(swigCPtr);
    return ret;
  }

  public void SetValue(CCurve seq, double v) {
    C4dApiPINVOKE.CKey_SetValue(swigCPtr, CCurve.getCPtr(seq), v);
  }

  public GeData GetGeData() {
    GeData ret = new GeData(C4dApiPINVOKE.CKey_GetGeData(swigCPtr), false);
    return ret;
  }

  public void SetGeData(CCurve seq, GeData d) {
    C4dApiPINVOKE.CKey_SetGeData(swigCPtr, CCurve.getCPtr(seq), GeData.getCPtr(d));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetValueLeft() {
    double ret = C4dApiPINVOKE.CKey_GetValueLeft(swigCPtr);
    return ret;
  }

  public void SetValueLeft(CCurve seq, double v) {
    C4dApiPINVOKE.CKey_SetValueLeft(swigCPtr, CCurve.getCPtr(seq), v);
  }

  public double GetValueRight() {
    double ret = C4dApiPINVOKE.CKey_GetValueRight(swigCPtr);
    return ret;
  }

  public void SetValueRight(CCurve seq, double v) {
    C4dApiPINVOKE.CKey_SetValueRight(swigCPtr, CCurve.getCPtr(seq), v);
  }

  public CINTERPOLATION GetInterpolation() {
    CINTERPOLATION ret = (CINTERPOLATION)C4dApiPINVOKE.CKey_GetInterpolation(swigCPtr);
    return ret;
  }

  public void SetInterpolation(CCurve seq, CINTERPOLATION inter) {
    C4dApiPINVOKE.CKey_SetInterpolation(swigCPtr, CCurve.getCPtr(seq), (int)inter);
  }

  public bool CopyDataTo(CCurve destseq, CKey dest, AliasTrans trans) {
    bool ret = C4dApiPINVOKE.CKey_CopyDataTo(swigCPtr, CCurve.getCPtr(destseq), CKey.getCPtr(dest), AliasTrans.getCPtr(trans));
    return ret;
  }

  public CKey GetClone(AliasTrans trans) {
    global::System.IntPtr cPtr = C4dApiPINVOKE.CKey_GetClone(swigCPtr, AliasTrans.getCPtr(trans));
    CKey ret = (cPtr == global::System.IntPtr.Zero) ? null : new CKey(cPtr, false);
    return ret;
  }

  public CTrack GetTrack() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.CKey_GetTrack(swigCPtr);
    CTrack ret = (cPtr == global::System.IntPtr.Zero) ? null : new CTrack(cPtr, false);
    return ret;
  }

  public CCurve GetCurve() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.CKey_GetCurve(swigCPtr);
    CCurve ret = (cPtr == global::System.IntPtr.Zero) ? null : new CCurve(cPtr, false);
    return ret;
  }

  public void FlushData() {
    C4dApiPINVOKE.CKey_FlushData(swigCPtr);
  }

  public SWIGTYPE_p_CAUTOMODE GetAutomaticTangentMode() {
    SWIGTYPE_p_CAUTOMODE ret = new SWIGTYPE_p_CAUTOMODE(C4dApiPINVOKE.CKey_GetAutomaticTangentMode(swigCPtr), true);
    return ret;
  }

  public void SetAutomaticTangentMode(CCurve seq, SWIGTYPE_p_CAUTOMODE autoMode) {
    C4dApiPINVOKE.CKey_SetAutomaticTangentMode(swigCPtr, CCurve.getCPtr(seq), SWIGTYPE_p_CAUTOMODE.getCPtr(autoMode));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool SetTimeLeftAdjustValue(CCurve seq, BaseTime t) {
    bool ret = C4dApiPINVOKE.CKey_SetTimeLeftAdjustValue(swigCPtr, CCurve.getCPtr(seq), BaseTime.getCPtr(t));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool SetTimeRightAdjustValue(CCurve seq, BaseTime t) {
    bool ret = C4dApiPINVOKE.CKey_SetTimeRightAdjustValue(swigCPtr, CCurve.getCPtr(seq), BaseTime.getCPtr(t));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
