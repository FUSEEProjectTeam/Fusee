//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace C4d {

public class GvCalcTable : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal GvCalcTable(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(GvCalcTable obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public bool AddNodeToTable(GvRun run, GvNode node) {
    bool ret = C4dApiPINVOKE.GvCalcTable_AddNodeToTable(swigCPtr, GvRun.getCPtr(run), GvNode.getCPtr(node));
    return ret;
  }

  public void ResetTable(GvRun run) {
    C4dApiPINVOKE.GvCalcTable_ResetTable(swigCPtr, GvRun.getCPtr(run));
  }

  public int GetTableCount(GvRun run) {
    int ret = C4dApiPINVOKE.GvCalcTable_GetTableCount(swigCPtr, GvRun.getCPtr(run));
    return ret;
  }

  public GvNode GetTableNode(GvRun run, int id) {
    global::System.IntPtr cPtr = C4dApiPINVOKE.GvCalcTable_GetTableNode(swigCPtr, GvRun.getCPtr(run), id);
    GvNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new GvNode(cPtr, false);
    return ret;
  }

}

}
