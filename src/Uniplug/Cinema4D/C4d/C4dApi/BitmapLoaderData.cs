//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace C4d {

public class BitmapLoaderData : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal BitmapLoaderData(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(BitmapLoaderData obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~BitmapLoaderData() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          C4dApiPINVOKE.delete_BitmapLoaderData(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public BitmapLoaderData(bool memOwn) : this(C4dApiPINVOKE.new_BitmapLoaderData(), memOwn) {
    SwigDirectorConnect();
  }

  public virtual bool Identify(Filename name, SWIGTYPE_p_UChar probe, int size) {
    bool ret = C4dApiPINVOKE.BitmapLoaderData_Identify(swigCPtr, Filename.getCPtr(name), SWIGTYPE_p_UChar.getCPtr(probe), size);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual IMAGERESULT Load(Filename name, BaseBitmap bm, int frame) {
    IMAGERESULT ret = (IMAGERESULT)C4dApiPINVOKE.BitmapLoaderData_Load(swigCPtr, Filename.getCPtr(name), BaseBitmap.getCPtr(bm), frame);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int GetSaver() {
    int ret = (SwigDerivedClassHasMethod("GetSaver", swigMethodTypes2) ? C4dApiPINVOKE.BitmapLoaderData_GetSaverSwigExplicitBitmapLoaderData(swigCPtr) : C4dApiPINVOKE.BitmapLoaderData_GetSaver(swigCPtr));
    return ret;
  }

  public virtual bool GetInformation(Filename name, SWIGTYPE_p_Int32 frames, SWIGTYPE_p_Float fps) {
    bool ret = (SwigDerivedClassHasMethod("GetInformation", swigMethodTypes3) ? C4dApiPINVOKE.BitmapLoaderData_GetInformationSwigExplicitBitmapLoaderData(swigCPtr, Filename.getCPtr(name), SWIGTYPE_p_Int32.getCPtr(frames), SWIGTYPE_p_Float.getCPtr(fps)) : C4dApiPINVOKE.BitmapLoaderData_GetInformation(swigCPtr, Filename.getCPtr(name), SWIGTYPE_p_Int32.getCPtr(frames), SWIGTYPE_p_Float.getCPtr(fps)));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual IMAGERESULT LoadAnimated(BitmapLoaderAnimatedData bd, BITMAPLOADERACTION action, BaseBitmap bm, int frame) {
    IMAGERESULT ret = (IMAGERESULT)(SwigDerivedClassHasMethod("LoadAnimated", swigMethodTypes4) ? C4dApiPINVOKE.BitmapLoaderData_LoadAnimatedSwigExplicitBitmapLoaderData(swigCPtr, BitmapLoaderAnimatedData.getCPtr(bd), (int)action, BaseBitmap.getCPtr(bm), frame) : C4dApiPINVOKE.BitmapLoaderData_LoadAnimated(swigCPtr, BitmapLoaderAnimatedData.getCPtr(bd), (int)action, BaseBitmap.getCPtr(bm), frame));
    return ret;
  }

  public virtual IMAGERESULT ExtractSound(BitmapLoaderAnimatedData bd, SWIGTYPE_p_BaseSound snd) {
    IMAGERESULT ret = (IMAGERESULT)(SwigDerivedClassHasMethod("ExtractSound", swigMethodTypes5) ? C4dApiPINVOKE.BitmapLoaderData_ExtractSoundSwigExplicitBitmapLoaderData(swigCPtr, BitmapLoaderAnimatedData.getCPtr(bd), SWIGTYPE_p_BaseSound.getCPtr(snd)) : C4dApiPINVOKE.BitmapLoaderData_ExtractSound(swigCPtr, BitmapLoaderAnimatedData.getCPtr(bd), SWIGTYPE_p_BaseSound.getCPtr(snd)));
    return ret;
  }

  public virtual IMAGERESULT HasSound(BitmapLoaderAnimatedData bd) {
    IMAGERESULT ret = (IMAGERESULT)(SwigDerivedClassHasMethod("HasSound", swigMethodTypes6) ? C4dApiPINVOKE.BitmapLoaderData_HasSoundSwigExplicitBitmapLoaderData(swigCPtr, BitmapLoaderAnimatedData.getCPtr(bd)) : C4dApiPINVOKE.BitmapLoaderData_HasSound(swigCPtr, BitmapLoaderAnimatedData.getCPtr(bd)));
    return ret;
  }

  private BitmapLoaderData() : this(C4dApiPINVOKE.new_BitmapLoaderData(), true) {
    SwigDirectorConnect();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("Identify", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateBitmapLoaderData_0(SwigDirectorIdentify);
    if (SwigDerivedClassHasMethod("Load", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateBitmapLoaderData_1(SwigDirectorLoad);
    if (SwigDerivedClassHasMethod("GetSaver", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateBitmapLoaderData_2(SwigDirectorGetSaver);
    if (SwigDerivedClassHasMethod("GetInformation", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateBitmapLoaderData_3(SwigDirectorGetInformation);
    if (SwigDerivedClassHasMethod("LoadAnimated", swigMethodTypes4))
      swigDelegate4 = new SwigDelegateBitmapLoaderData_4(SwigDirectorLoadAnimated);
    if (SwigDerivedClassHasMethod("ExtractSound", swigMethodTypes5))
      swigDelegate5 = new SwigDelegateBitmapLoaderData_5(SwigDirectorExtractSound);
    if (SwigDerivedClassHasMethod("HasSound", swigMethodTypes6))
      swigDelegate6 = new SwigDelegateBitmapLoaderData_6(SwigDirectorHasSound);
    C4dApiPINVOKE.BitmapLoaderData_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4, swigDelegate5, swigDelegate6);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(BitmapLoaderData));
    return hasDerivedMethod;
  }

  private bool SwigDirectorIdentify(global::System.IntPtr name, global::System.IntPtr probe, int size) {
    return Identify(new Filename(name, false), (probe == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_UChar(probe, false), size);
  }

  private int SwigDirectorLoad(global::System.IntPtr name, global::System.IntPtr bm, int frame) {
    return (int)Load(new Filename(name, false), (bm == global::System.IntPtr.Zero) ? null : new BaseBitmap(bm, false), frame);
  }

  private int SwigDirectorGetSaver() {
    return GetSaver();
  }

  private bool SwigDirectorGetInformation(global::System.IntPtr name, global::System.IntPtr frames, global::System.IntPtr fps) {
    return GetInformation(new Filename(name, false), (frames == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Int32(frames, false), (fps == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Float(fps, false));
  }

  private int SwigDirectorLoadAnimated(global::System.IntPtr bd, int action, global::System.IntPtr bm, int frame) {
    return (int)LoadAnimated((bd == global::System.IntPtr.Zero) ? null : new BitmapLoaderAnimatedData(bd, false), (BITMAPLOADERACTION)action, (bm == global::System.IntPtr.Zero) ? null : new BaseBitmap(bm, false), frame);
  }

  private int SwigDirectorExtractSound(global::System.IntPtr bd, global::System.IntPtr snd) {
    return (int)ExtractSound((bd == global::System.IntPtr.Zero) ? null : new BitmapLoaderAnimatedData(bd, false), (snd == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_BaseSound(snd, false));
  }

  private int SwigDirectorHasSound(global::System.IntPtr bd) {
    return (int)HasSound((bd == global::System.IntPtr.Zero) ? null : new BitmapLoaderAnimatedData(bd, false));
  }

  public delegate bool SwigDelegateBitmapLoaderData_0(global::System.IntPtr name, global::System.IntPtr probe, int size);
  public delegate int SwigDelegateBitmapLoaderData_1(global::System.IntPtr name, global::System.IntPtr bm, int frame);
  public delegate int SwigDelegateBitmapLoaderData_2();
  public delegate bool SwigDelegateBitmapLoaderData_3(global::System.IntPtr name, global::System.IntPtr frames, global::System.IntPtr fps);
  public delegate int SwigDelegateBitmapLoaderData_4(global::System.IntPtr bd, int action, global::System.IntPtr bm, int frame);
  public delegate int SwigDelegateBitmapLoaderData_5(global::System.IntPtr bd, global::System.IntPtr snd);
  public delegate int SwigDelegateBitmapLoaderData_6(global::System.IntPtr bd);

  private SwigDelegateBitmapLoaderData_0 swigDelegate0;
  private SwigDelegateBitmapLoaderData_1 swigDelegate1;
  private SwigDelegateBitmapLoaderData_2 swigDelegate2;
  private SwigDelegateBitmapLoaderData_3 swigDelegate3;
  private SwigDelegateBitmapLoaderData_4 swigDelegate4;
  private SwigDelegateBitmapLoaderData_5 swigDelegate5;
  private SwigDelegateBitmapLoaderData_6 swigDelegate6;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] { typeof(Filename), typeof(SWIGTYPE_p_UChar), typeof(int) };
  private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] { typeof(Filename), typeof(BaseBitmap), typeof(int) };
  private static global::System.Type[] swigMethodTypes2 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes3 = new global::System.Type[] { typeof(Filename), typeof(SWIGTYPE_p_Int32), typeof(SWIGTYPE_p_Float) };
  private static global::System.Type[] swigMethodTypes4 = new global::System.Type[] { typeof(BitmapLoaderAnimatedData), typeof(BITMAPLOADERACTION), typeof(BaseBitmap), typeof(int) };
  private static global::System.Type[] swigMethodTypes5 = new global::System.Type[] { typeof(BitmapLoaderAnimatedData), typeof(SWIGTYPE_p_BaseSound) };
  private static global::System.Type[] swigMethodTypes6 = new global::System.Type[] { typeof(BitmapLoaderAnimatedData) };
}

}
