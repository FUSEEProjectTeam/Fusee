//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace C4d {

public class GvPortList : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal GvPortList(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(GvPortList obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public int GetCount() {
    int ret = C4dApiPINVOKE.GvPortList_GetCount(swigCPtr);
    return ret;
  }

  public bool Append(GvPortListEntry e) {
    bool ret = C4dApiPINVOKE.GvPortList_Append(swigCPtr, GvPortListEntry.getCPtr(e));
    return ret;
  }

  public bool Remove(GvPortListEntry e) {
    bool ret = C4dApiPINVOKE.GvPortList_Remove(swigCPtr, GvPortListEntry.getCPtr(e));
    return ret;
  }

  public GvPortListEntry GetIndex(int i) {
    global::System.IntPtr cPtr = C4dApiPINVOKE.GvPortList_GetIndex(swigCPtr, i);
    GvPortListEntry ret = (cPtr == global::System.IntPtr.Zero) ? null : new GvPortListEntry(cPtr, false);
    return ret;
  }

  public void FlushAll() {
    C4dApiPINVOKE.GvPortList_FlushAll(swigCPtr);
  }

  public static GvPortList Alloc() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.GvPortList_Alloc();
    GvPortList ret = (cPtr == global::System.IntPtr.Zero) ? null : new GvPortList(cPtr, false);
    return ret;
  }

  public static void Free(SWIGTYPE_p_p_GvPortList list) {
    C4dApiPINVOKE.GvPortList_Free(SWIGTYPE_p_p_GvPortList.getCPtr(list));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
