//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace C4d {

public class BaseObject : BaseList2D {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal BaseObject(global::System.IntPtr cPtr, bool cMemoryOwn) : base(C4dApiPINVOKE.BaseObject_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(BaseObject obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public new static BaseObject Alloc(int type) {
    global::System.IntPtr cPtr = C4dApiPINVOKE.BaseObject_Alloc(type);
    BaseObject ret = (BaseObject) C4dApiPINVOKE.InstantiateConcreteObject(cPtr, false);
    return ret;
}

  public static void Free(SWIGTYPE_p_p_BaseObject bl) {
    C4dApiPINVOKE.BaseObject_Free(SWIGTYPE_p_p_BaseObject.getCPtr(bl));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public new BaseObject GetNext() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.BaseObject_GetNext(swigCPtr);
    BaseObject ret = (BaseObject) C4dApiPINVOKE.InstantiateConcreteObject(cPtr, false);
    return ret;
}

  public new BaseObject GetPred() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.BaseObject_GetPred(swigCPtr);
    BaseObject ret = (BaseObject) C4dApiPINVOKE.InstantiateConcreteObject(cPtr, false);
    return ret;
}

  public new BaseObject GetUp() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.BaseObject_GetUp(swigCPtr);
    BaseObject ret = (BaseObject) C4dApiPINVOKE.InstantiateConcreteObject(cPtr, false);
    return ret;
}

  public new BaseObject GetDown() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.BaseObject_GetDown(swigCPtr);
    BaseObject ret = (BaseObject) C4dApiPINVOKE.InstantiateConcreteObject(cPtr, false);
    return ret;
}

  public new BaseObject GetDownLast() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.BaseObject_GetDownLast(swigCPtr);
    BaseObject ret = (BaseObject) C4dApiPINVOKE.InstantiateConcreteObject(cPtr, false);
    return ret;
}

  public Fusee.Math.Core.double3 /* Vector_cstype_out */ GetAbsPos()  {  /* <Vector_csout> */
      Fusee.Math.Core.double3 ret = C4dApiPINVOKE.BaseObject_GetAbsPos(swigCPtr);
      return ret;
   } /* <Vector_csout> */ 

  public void SetAbsPos(Fusee.Math.Core.double3 /* constVector&_cstype */ v) {
    C4dApiPINVOKE.BaseObject_SetAbsPos(swigCPtr, ref v /* constVector&_csin */);
  }

  public Fusee.Math.Core.double3 /* Vector_cstype_out */ GetAbsScale()  {  /* <Vector_csout> */
      Fusee.Math.Core.double3 ret = C4dApiPINVOKE.BaseObject_GetAbsScale(swigCPtr);
      return ret;
   } /* <Vector_csout> */ 

  public void SetAbsScale(Fusee.Math.Core.double3 /* constVector&_cstype */ v) {
    C4dApiPINVOKE.BaseObject_SetAbsScale(swigCPtr, ref v /* constVector&_csin */);
  }

  public Fusee.Math.Core.double3 /* Vector_cstype_out */ GetAbsRot()  {  /* <Vector_csout> */
      Fusee.Math.Core.double3 ret = C4dApiPINVOKE.BaseObject_GetAbsRot(swigCPtr);
      return ret;
   } /* <Vector_csout> */ 

  public void SetAbsRot(Fusee.Math.Core.double3 /* constVector&_cstype */ v) {
    C4dApiPINVOKE.BaseObject_SetAbsRot(swigCPtr, ref v /* constVector&_csin */);
  }

  public Fusee.Math.Core.double3 /* Vector_cstype_out */ GetFrozenPos()  {  /* <Vector_csout> */
      Fusee.Math.Core.double3 ret = C4dApiPINVOKE.BaseObject_GetFrozenPos(swigCPtr);
      return ret;
   } /* <Vector_csout> */ 

  public void SetFrozenPos(Fusee.Math.Core.double3 /* constVector&_cstype */ v) {
    C4dApiPINVOKE.BaseObject_SetFrozenPos(swigCPtr, ref v /* constVector&_csin */);
  }

  public Fusee.Math.Core.double3 /* Vector_cstype_out */ GetFrozenScale()  {  /* <Vector_csout> */
      Fusee.Math.Core.double3 ret = C4dApiPINVOKE.BaseObject_GetFrozenScale(swigCPtr);
      return ret;
   } /* <Vector_csout> */ 

  public void SetFrozenScale(Fusee.Math.Core.double3 /* constVector&_cstype */ v) {
    C4dApiPINVOKE.BaseObject_SetFrozenScale(swigCPtr, ref v /* constVector&_csin */);
  }

  public Fusee.Math.Core.double3 /* Vector_cstype_out */ GetFrozenRot()  {  /* <Vector_csout> */
      Fusee.Math.Core.double3 ret = C4dApiPINVOKE.BaseObject_GetFrozenRot(swigCPtr);
      return ret;
   } /* <Vector_csout> */ 

  public void SetFrozenRot(Fusee.Math.Core.double3 /* constVector&_cstype */ v) {
    C4dApiPINVOKE.BaseObject_SetFrozenRot(swigCPtr, ref v /* constVector&_csin */);
  }

  public Fusee.Math.Core.double3 /* Vector_cstype_out */ GetRelPos()  {  /* <Vector_csout> */
      Fusee.Math.Core.double3 ret = C4dApiPINVOKE.BaseObject_GetRelPos(swigCPtr);
      return ret;
   } /* <Vector_csout> */ 

  public void SetRelPos(Fusee.Math.Core.double3 /* constVector&_cstype */ v) {
    C4dApiPINVOKE.BaseObject_SetRelPos(swigCPtr, ref v /* constVector&_csin */);
  }

  public Fusee.Math.Core.double3 /* Vector_cstype_out */ GetRelScale()  {  /* <Vector_csout> */
      Fusee.Math.Core.double3 ret = C4dApiPINVOKE.BaseObject_GetRelScale(swigCPtr);
      return ret;
   } /* <Vector_csout> */ 

  public void SetRelScale(Fusee.Math.Core.double3 /* constVector&_cstype */ v) {
    C4dApiPINVOKE.BaseObject_SetRelScale(swigCPtr, ref v /* constVector&_csin */);
  }

  public Fusee.Math.Core.double3 /* Vector_cstype_out */ GetRelRot()  {  /* <Vector_csout> */
      Fusee.Math.Core.double3 ret = C4dApiPINVOKE.BaseObject_GetRelRot(swigCPtr);
      return ret;
   } /* <Vector_csout> */ 

  public void SetRelRot(Fusee.Math.Core.double3 /* constVector&_cstype */ v) {
    C4dApiPINVOKE.BaseObject_SetRelRot(swigCPtr, ref v /* constVector&_csin */);
  }

  public Fusee.Math.Core.double4x4 /* constMatrix&_cstype_out */ GetMl()  {  /* <constMatrix&_csout> */
      global::System.IntPtr p_ret = C4dApiPINVOKE.BaseObject_GetMl(swigCPtr);
      Fusee.Math.Core.double4x4 ret;
      unsafe {ret = Fusee.Math.ArrayConvert.ArrayDoubleC4DLayoutTodouble4x4((double *)p_ret);}
      return ret;
   } /* </constMatrix&_csout> */ 

  public void SetMl(ref Fusee.Math.Core.double4x4 /* constMatrix&_cstype */ m) {
    double[] adbl_m;
    unsafe {adbl_m = Fusee.Math.ArrayConvert.double4x4ToArrayDoubleC4DLayout(m);    fixed (double *pdbl_m = adbl_m) {
    /* constMatrix&_csin_pre */
    try {
      C4dApiPINVOKE.BaseObject_SetMl(swigCPtr, (global::System.IntPtr) pdbl_m /* constMatrix&_csin */);
    } finally {
        // NOP m = Fusee.Math.ArrayConvert.ArrayDoubleC4DLayoutTodouble4x4(pdbl_m);
        /* constMatrix&_csin_post */
    }
} } /* constMatrix&_csin_terminator */
  }

  public Fusee.Math.Core.double4x4 /* Matrix_cstype */ GetFrozenMln()  {  /* <Matrix_csout> */
      C34M ret_c34m = C4dApiPINVOKE.BaseObject_GetFrozenMln(swigCPtr);
	  Fusee.Math.Core.double4x4 ret;
	  unsafe {ret = Fusee.Math.ArrayConvert.ArrayDoubleC4DLayoutTodouble4x4(ret_c34m.m);}
      return ret;
   } /* </Matrix_csout> */ 

  public Fusee.Math.Core.double4x4 /* Matrix_cstype */ GetRelMln()  {  /* <Matrix_csout> */
      C34M ret_c34m = C4dApiPINVOKE.BaseObject_GetRelMln(swigCPtr);
	  Fusee.Math.Core.double4x4 ret;
	  unsafe {ret = Fusee.Math.ArrayConvert.ArrayDoubleC4DLayoutTodouble4x4(ret_c34m.m);}
      return ret;
   } /* </Matrix_csout> */ 

  public Fusee.Math.Core.double4x4 /* Matrix_cstype */ GetRelMl()  {  /* <Matrix_csout> */
      C34M ret_c34m = C4dApiPINVOKE.BaseObject_GetRelMl(swigCPtr);
	  Fusee.Math.Core.double4x4 ret;
	  unsafe {ret = Fusee.Math.ArrayConvert.ArrayDoubleC4DLayoutTodouble4x4(ret_c34m.m);}
      return ret;
   } /* </Matrix_csout> */ 

  public void SetRelMl(ref Fusee.Math.Core.double4x4 /* constMatrix&_cstype */ m) {
    double[] adbl_m;
    unsafe {adbl_m = Fusee.Math.ArrayConvert.double4x4ToArrayDoubleC4DLayout(m);    fixed (double *pdbl_m = adbl_m) {
    /* constMatrix&_csin_pre */
    try {
      C4dApiPINVOKE.BaseObject_SetRelMl(swigCPtr, (global::System.IntPtr) pdbl_m /* constMatrix&_csin */);
    } finally {
        // NOP m = Fusee.Math.ArrayConvert.ArrayDoubleC4DLayoutTodouble4x4(pdbl_m);
        /* constMatrix&_csin_post */
    }
} } /* constMatrix&_csin_terminator */
  }

  public Fusee.Math.Core.double4x4 /* Matrix_cstype */ GetMg()  {  /* <Matrix_csout> */
      C34M ret_c34m = C4dApiPINVOKE.BaseObject_GetMg(swigCPtr);
	  Fusee.Math.Core.double4x4 ret;
	  unsafe {ret = Fusee.Math.ArrayConvert.ArrayDoubleC4DLayoutTodouble4x4(ret_c34m.m);}
      return ret;
   } /* </Matrix_csout> */ 

  public void SetMg(ref Fusee.Math.Core.double4x4 /* constMatrix&_cstype */ m) {
    double[] adbl_m;
    unsafe {adbl_m = Fusee.Math.ArrayConvert.double4x4ToArrayDoubleC4DLayout(m);    fixed (double *pdbl_m = adbl_m) {
    /* constMatrix&_csin_pre */
    try {
      C4dApiPINVOKE.BaseObject_SetMg(swigCPtr, (global::System.IntPtr) pdbl_m /* constMatrix&_csin */);
    } finally {
        // NOP m = Fusee.Math.ArrayConvert.ArrayDoubleC4DLayoutTodouble4x4(pdbl_m);
        /* constMatrix&_csin_post */
    }
} } /* constMatrix&_csin_terminator */
  }

  public Fusee.Math.Core.double4x4 /* Matrix_cstype */ GetMln()  {  /* <Matrix_csout> */
      C34M ret_c34m = C4dApiPINVOKE.BaseObject_GetMln(swigCPtr);
	  Fusee.Math.Core.double4x4 ret;
	  unsafe {ret = Fusee.Math.ArrayConvert.ArrayDoubleC4DLayoutTodouble4x4(ret_c34m.m);}
      return ret;
   } /* </Matrix_csout> */ 

  public Fusee.Math.Core.double4x4 /* Matrix_cstype */ GetMgn()  {  /* <Matrix_csout> */
      C34M ret_c34m = C4dApiPINVOKE.BaseObject_GetMgn(swigCPtr);
	  Fusee.Math.Core.double4x4 ret;
	  unsafe {ret = Fusee.Math.ArrayConvert.ArrayDoubleC4DLayoutTodouble4x4(ret_c34m.m);}
      return ret;
   } /* </Matrix_csout> */ 

  public Fusee.Math.Core.double4x4 /* Matrix_cstype */ GetUpMg()  {  /* <Matrix_csout> */
      C34M ret_c34m = C4dApiPINVOKE.BaseObject_GetUpMg(swigCPtr);
	  Fusee.Math.Core.double4x4 ret;
	  unsafe {ret = Fusee.Math.ArrayConvert.ArrayDoubleC4DLayoutTodouble4x4(ret_c34m.m);}
      return ret;
   } /* </Matrix_csout> */ 

  public void CopyMatrixTo(BaseObject dst) {
    C4dApiPINVOKE.BaseObject_CopyMatrixTo(swigCPtr, BaseObject.getCPtr(dst));
  }

  public Fusee.Math.Core.double3 /* Vector_cstype_out */ GetMp()  {  /* <Vector_csout> */
      Fusee.Math.Core.double3 ret = C4dApiPINVOKE.BaseObject_GetMp(swigCPtr);
      return ret;
   } /* <Vector_csout> */ 

  public Fusee.Math.Core.double3 /* Vector_cstype_out */ GetRad()  {  /* <Vector_csout> */
      Fusee.Math.Core.double3 ret = C4dApiPINVOKE.BaseObject_GetRad(swigCPtr);
      return ret;
   } /* <Vector_csout> */ 

  public int GetEditorMode() {
    int ret = C4dApiPINVOKE.BaseObject_GetEditorMode(swigCPtr);
    return ret;
  }

  public void SetEditorMode(int mode) {
    C4dApiPINVOKE.BaseObject_SetEditorMode(swigCPtr, mode);
  }

  public int GetRenderMode() {
    int ret = C4dApiPINVOKE.BaseObject_GetRenderMode(swigCPtr);
    return ret;
  }

  public void SetRenderMode(int mode) {
    C4dApiPINVOKE.BaseObject_SetRenderMode(swigCPtr, mode);
  }

  public bool GetDeformMode() {
    bool ret = C4dApiPINVOKE.BaseObject_GetDeformMode(swigCPtr);
    return ret;
  }

  public void SetDeformMode(bool mode) {
    C4dApiPINVOKE.BaseObject_SetDeformMode(swigCPtr, mode);
  }

  public int GetUniqueIP() {
    int ret = C4dApiPINVOKE.BaseObject_GetUniqueIP(swigCPtr);
    return ret;
  }

  public void SetUniqueIP(int ip) {
    C4dApiPINVOKE.BaseObject_SetUniqueIP(swigCPtr, ip);
  }

  public BaseTag GetFirstTag() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.BaseObject_GetFirstTag(swigCPtr);
    BaseTag ret = (BaseTag) C4dApiPINVOKE.InstantiateConcreteTag(cPtr, false);
    return ret;
}

  public BaseTag GetTag(int type, int nr) {
    global::System.IntPtr cPtr = C4dApiPINVOKE.BaseObject_GetTag__SWIG_0(swigCPtr, type, nr);
    BaseTag ret = (BaseTag) C4dApiPINVOKE.InstantiateConcreteTag(cPtr, false);
    return ret;
}

  public BaseTag GetTag(int type) {
    global::System.IntPtr cPtr = C4dApiPINVOKE.BaseObject_GetTag__SWIG_1(swigCPtr, type);
    BaseTag ret = (BaseTag) C4dApiPINVOKE.InstantiateConcreteTag(cPtr, false);
    return ret;
}

  public SWIGTYPE_p_void GetTagDataR(int type, int nr) {
    global::System.IntPtr cPtr = C4dApiPINVOKE.BaseObject_GetTagDataR__SWIG_0(swigCPtr, type, nr);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_void GetTagDataR(int type) {
    global::System.IntPtr cPtr = C4dApiPINVOKE.BaseObject_GetTagDataR__SWIG_1(swigCPtr, type);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_void GetTagDataW(int type, int nr) {
    global::System.IntPtr cPtr = C4dApiPINVOKE.BaseObject_GetTagDataW__SWIG_0(swigCPtr, type, nr);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_void GetTagDataW(int type) {
    global::System.IntPtr cPtr = C4dApiPINVOKE.BaseObject_GetTagDataW__SWIG_1(swigCPtr, type);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public int GetTagDataCount(int type) {
    int ret = C4dApiPINVOKE.BaseObject_GetTagDataCount(swigCPtr, type);
    return ret;
  }

  public BaseTag MakeTag(int type, BaseTag pred) {
    global::System.IntPtr cPtr = C4dApiPINVOKE.BaseObject_MakeTag__SWIG_0(swigCPtr, type, BaseTag.getCPtr(pred));
    BaseTag ret = (BaseTag) C4dApiPINVOKE.InstantiateConcreteTag(cPtr, false);
    return ret;
}

  public BaseTag MakeTag(int type) {
    global::System.IntPtr cPtr = C4dApiPINVOKE.BaseObject_MakeTag__SWIG_1(swigCPtr, type);
    BaseTag ret = (BaseTag) C4dApiPINVOKE.InstantiateConcreteTag(cPtr, false);
    return ret;
}

  public VariableTag MakeVariableTag(int type, int count, BaseTag pred) {
    global::System.IntPtr cPtr = C4dApiPINVOKE.BaseObject_MakeVariableTag__SWIG_0(swigCPtr, type, count, BaseTag.getCPtr(pred));
    VariableTag ret = (cPtr == global::System.IntPtr.Zero) ? null : new VariableTag(cPtr, false);
    return ret;
  }

  public VariableTag MakeVariableTag(int type, int count) {
    global::System.IntPtr cPtr = C4dApiPINVOKE.BaseObject_MakeVariableTag__SWIG_1(swigCPtr, type, count);
    VariableTag ret = (cPtr == global::System.IntPtr.Zero) ? null : new VariableTag(cPtr, false);
    return ret;
  }

  public void InsertTag(BaseTag tp, BaseTag pred) {
    C4dApiPINVOKE.BaseObject_InsertTag__SWIG_0(swigCPtr, BaseTag.getCPtr(tp), BaseTag.getCPtr(pred));
  }

  public void InsertTag(BaseTag tp) {
    C4dApiPINVOKE.BaseObject_InsertTag__SWIG_1(swigCPtr, BaseTag.getCPtr(tp));
  }

  public void KillTag(int type, int nr) {
    C4dApiPINVOKE.BaseObject_KillTag__SWIG_0(swigCPtr, type, nr);
  }

  public void KillTag(int type) {
    C4dApiPINVOKE.BaseObject_KillTag__SWIG_1(swigCPtr, type);
  }

  public bool CopyTagsTo(BaseObject dest, int visible, int variable, int hierarchical, AliasTrans trans) {
    bool ret = C4dApiPINVOKE.BaseObject_CopyTagsTo(swigCPtr, BaseObject.getCPtr(dest), visible, variable, hierarchical, AliasTrans.getCPtr(trans));
    return ret;
  }

  public BaseObject GetCache(HierarchyHelp hh) {
    global::System.IntPtr cPtr = C4dApiPINVOKE.BaseObject_GetCache__SWIG_0(swigCPtr, HierarchyHelp.getCPtr(hh));
    BaseObject ret = (BaseObject) C4dApiPINVOKE.InstantiateConcreteObject(cPtr, false);
    return ret;
}

  public BaseObject GetCache() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.BaseObject_GetCache__SWIG_1(swigCPtr);
    BaseObject ret = (BaseObject) C4dApiPINVOKE.InstantiateConcreteObject(cPtr, false);
    return ret;
}

  public BaseObject GetDeformCache() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.BaseObject_GetDeformCache(swigCPtr);
    BaseObject ret = (BaseObject) C4dApiPINVOKE.InstantiateConcreteObject(cPtr, false);
    return ret;
}

  public LineObject GetIsoparm() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.BaseObject_GetIsoparm(swigCPtr);
    LineObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new LineObject(cPtr, false);
    return ret;
  }

  public void SetIsoparm(LineObject l) {
    C4dApiPINVOKE.BaseObject_SetIsoparm(swigCPtr, LineObject.getCPtr(l));
  }

  public BaseObject GetCacheParent() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.BaseObject_GetCacheParent(swigCPtr);
    BaseObject ret = (BaseObject) C4dApiPINVOKE.InstantiateConcreteObject(cPtr, false);
    return ret;
}

  public bool SetPhong(bool on, bool anglelimit, double angle) {
    bool ret = C4dApiPINVOKE.BaseObject_SetPhong(swigCPtr, on, anglelimit, angle);
    return ret;
  }

  public bool IsDirty(DIRTYFLAGS flags) {
    bool ret = C4dApiPINVOKE.BaseObject_IsDirty(swigCPtr, (int)flags);
    return ret;
  }

  public new void SetDirty(DIRTYFLAGS flags) {
    C4dApiPINVOKE.BaseObject_SetDirty(swigCPtr, (int)flags);
  }

  public bool CheckCache(HierarchyHelp hh) {
    bool ret = C4dApiPINVOKE.BaseObject_CheckCache(swigCPtr, HierarchyHelp.getCPtr(hh));
    return ret;
  }

  public void Touch() {
    C4dApiPINVOKE.BaseObject_Touch(swigCPtr);
  }

  public void GetColorProperties(ObjectColorProperties prop) {
    C4dApiPINVOKE.BaseObject_GetColorProperties(swigCPtr, ObjectColorProperties.getCPtr(prop));
  }

  public void SetColorProperties(ObjectColorProperties prop) {
    C4dApiPINVOKE.BaseObject_SetColorProperties(swigCPtr, ObjectColorProperties.getCPtr(prop));
  }

  public Fusee.Math.Core.double4x4 /* constMatrix&_cstype_out */ GetModelingAxis(BaseDocument doc)  {  /* <constMatrix&_csout> */
      global::System.IntPtr p_ret = C4dApiPINVOKE.BaseObject_GetModelingAxis(swigCPtr, BaseDocument.getCPtr(doc));
      Fusee.Math.Core.double4x4 ret;
      unsafe {ret = Fusee.Math.ArrayConvert.ArrayDoubleC4DLayoutTodouble4x4((double *)p_ret);}
      return ret;
   } /* </constMatrix&_csout> */ 

  public void SetModelingAxis(ref Fusee.Math.Core.double4x4 /* constMatrix&_cstype */ m) {
    double[] adbl_m;
    unsafe {adbl_m = Fusee.Math.ArrayConvert.double4x4ToArrayDoubleC4DLayout(m);    fixed (double *pdbl_m = adbl_m) {
    /* constMatrix&_csin_pre */
    try {
      C4dApiPINVOKE.BaseObject_SetModelingAxis(swigCPtr, (global::System.IntPtr) pdbl_m /* constMatrix&_csin */);
    } finally {
        // NOP m = Fusee.Math.ArrayConvert.ArrayDoubleC4DLayoutTodouble4x4(pdbl_m);
        /* constMatrix&_csin_post */
    }
} } /* constMatrix&_csin_terminator */
  }

  public BaseObject GetAndCheckHierarchyClone(HierarchyHelp hh, BaseObject op, HIERARCHYCLONEFLAGS flags, SWIGTYPE_p_Bool dirty, AliasTrans trans, bool allchildren) {
    global::System.IntPtr cPtr = C4dApiPINVOKE.BaseObject_GetAndCheckHierarchyClone(swigCPtr, HierarchyHelp.getCPtr(hh), BaseObject.getCPtr(op), (int)flags, SWIGTYPE_p_Bool.getCPtr(dirty), AliasTrans.getCPtr(trans), allchildren);
    BaseObject ret = (BaseObject) C4dApiPINVOKE.InstantiateConcreteObject(cPtr, false);
    return ret;
}

  public BaseObject GetHierarchyClone(HierarchyHelp hh, BaseObject op, HIERARCHYCLONEFLAGS flags, SWIGTYPE_p_Bool dirty, AliasTrans trans) {
    global::System.IntPtr cPtr = C4dApiPINVOKE.BaseObject_GetHierarchyClone(swigCPtr, HierarchyHelp.getCPtr(hh), BaseObject.getCPtr(op), (int)flags, SWIGTYPE_p_Bool.getCPtr(dirty), AliasTrans.getCPtr(trans));
    BaseObject ret = (BaseObject) C4dApiPINVOKE.InstantiateConcreteObject(cPtr, false);
    return ret;
}

  public void NewDependenceList() {
    C4dApiPINVOKE.BaseObject_NewDependenceList(swigCPtr);
  }

  public bool CompareDependenceList() {
    bool ret = C4dApiPINVOKE.BaseObject_CompareDependenceList(swigCPtr);
    return ret;
  }

  public void AddDependence(HierarchyHelp hh, BaseObject op) {
    C4dApiPINVOKE.BaseObject_AddDependence(swigCPtr, HierarchyHelp.getCPtr(hh), BaseObject.getCPtr(op));
  }

  public void TouchDependenceList() {
    C4dApiPINVOKE.BaseObject_TouchDependenceList(swigCPtr);
  }

  public void SetRotationOrder(ROTATIONORDER order) {
    C4dApiPINVOKE.BaseObject_SetRotationOrder(swigCPtr, (int)order);
  }

  public ROTATIONORDER GetRotationOrder() {
    ROTATIONORDER ret = (ROTATIONORDER)C4dApiPINVOKE.BaseObject_GetRotationOrder(swigCPtr);
    return ret;
  }

  public ulong GetGUID() {
    ulong ret = C4dApiPINVOKE.BaseObject_GetGUID(swigCPtr);
    return ret;
  }

  public int GetHighlightHandle(BaseDraw bd) {
    int ret = C4dApiPINVOKE.BaseObject_GetHighlightHandle(swigCPtr, BaseDraw.getCPtr(bd));
    return ret;
  }

  public SplineObject GetRealSpline() {
    global::System.IntPtr cPtr = C4dApiPINVOKE.BaseObject_GetRealSpline(swigCPtr);
    SplineObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new SplineObject(cPtr, false);
    return ret;
  }

  public double GetVisibility(double parent) {
    double ret = C4dApiPINVOKE.BaseObject_GetVisibility(swigCPtr, parent);
    return ret;
  }

  public bool SearchHierarchy(BaseObject op) {
    bool ret = C4dApiPINVOKE.BaseObject_SearchHierarchy(swigCPtr, BaseObject.getCPtr(op));
    return ret;
  }

  public BaseObject GetOrigin(bool safe) {
    global::System.IntPtr cPtr = C4dApiPINVOKE.BaseObject_GetOrigin(swigCPtr, safe);
    BaseObject ret = (BaseObject) C4dApiPINVOKE.InstantiateConcreteObject(cPtr, false);
    return ret;
}

  public void SetOrigin(BaseObject origin) {
    C4dApiPINVOKE.BaseObject_SetOrigin(swigCPtr, BaseObject.getCPtr(origin));
  }

  public BaseObject GetTopOrigin(bool parent, bool safe) {
    global::System.IntPtr cPtr = C4dApiPINVOKE.BaseObject_GetTopOrigin(swigCPtr, parent, safe);
    BaseObject ret = (BaseObject) C4dApiPINVOKE.InstantiateConcreteObject(cPtr, false);
    return ret;
}

  public BaseObject GetEditObject(SWIGTYPE_p_p_BaseObject psds, DISPLAYEDITSTATE state) {
    global::System.IntPtr cPtr = C4dApiPINVOKE.BaseObject_GetEditObject(swigCPtr, SWIGTYPE_p_p_BaseObject.getCPtr(psds), (int)state);
    BaseObject ret = (BaseObject) C4dApiPINVOKE.InstantiateConcreteObject(cPtr, false);
    return ret;
}

  public void RemoveFromCache() {
    C4dApiPINVOKE.BaseObject_RemoveFromCache(swigCPtr);
  }

}

}
