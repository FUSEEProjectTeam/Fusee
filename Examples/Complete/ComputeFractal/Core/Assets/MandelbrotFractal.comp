#version 450 core

//src: https://www.reddit.com/r/Unity3D/comments/7pa6bq/drawing_mandelbrot_fractal_using_gpu_compute/

layout(rgba32f) uniform image2D destTex;
uniform double k;
layout (local_size_x = 16, local_size_y = 16) in;

layout(std430) buffer rectStorageBuffer
{
    double rect_data[4];
};

layout(std430) buffer colorStorageBuffer
{
    vec4 colors_data[256];
};

void main() {

	// get index in global work group i.e x,y position
	ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy); 
	
	double dx, dy;
	double p, q;								// initial point coordinates
	double x, y, xnew, ynew, d = 0;				// current coordinates, new coordinates, distance from (0, 0)
	uint itn = 0;								// number of iterations
	dx = rect_data[2] - rect_data[0];
	dy = rect_data[3] - rect_data[1];
	p = rect_data[0] + pixel_coords.x * k * dx;	// divide by 256, to shrink [-512, 512) space to [-2, 2) ---- -2 + x/width * 
	q = rect_data[1] + pixel_coords.y * k * dy;
	x = p;
	y = q;
	while (itn < 255 && d <= 2){				// this is a trivial fractal drawing loop, we just count the number of iterations required to move the point away
		xnew = x * x - y * y + p;
		ynew = 2 * x * y + q;
		x = xnew;
		y = ynew;
		d = x * x + y * y;
		itn++;
	}
	
	// output to a specific pixel in the image
	imageStore(destTex, pixel_coords, colors_data[itn]);
	
}