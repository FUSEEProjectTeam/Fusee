/* It is auto-generated file. Do not modify it. */
/* Generated by JSIL v0.8.2 build 17617. See http://jsil.org/ for more information. */
'use strict';
(function  () {
    var $asm00 = $jsilcore;

    var $asm01 = $jsilcore;
    JSIL.DeclareNamespace("System");
    /* class System.EmptyImport */

    (function EmptyImport$Members () {
      var $, $thisType;
      var $T00 = function () {
        return ($T00 = JSIL.Memoize($asm01.System.String)) ();
      };


      function Empty__ctor () {
      };

      function Empty_toString () {
        return $T00().Empty;
      };

      JSIL.MakeType({
          BaseType: $asm01.TypeRef("System.Object"),
          Name: "System.Empty",
          IsPublic: false,
          IsReferenceType: true,
          MaximumConstructorArguments: 0,
        }, function ($ib) {
        $ = $ib;

        $.Method({Static:false, Public:false}, ".ctor",
          JSIL.MethodSignature.Void,
          Empty__ctor
        );

        $.Method({Static:false, Public:true , Virtual:true }, "toString",
          JSIL.MethodSignature.Return($.String),
          Empty_toString
        );

        $.Field({Static:true , Public:true , ReadOnly:true }, "Value", $.Type);


        function Empty__cctor () {
          $thisType.Value = new $thisType();
        };

        $.Method({Static:true , Public:false}, ".cctor",
          JSIL.MethodSignature.Void,
          Empty__cctor
        );


        return function (newThisType) { $thisType = newThisType; };
      });

    })();

    /* class System.DBNullImport */

    (function DBNullImport$Members () {
      var $, $thisType;
      var $T00 = function () {
        return ($T00 = JSIL.Memoize($asm01.System.String)) ();
      };


      function DBNull__ctor () {
      };

      function DBNull_toString () {
        return $T00().Empty;
      };

      JSIL.MakeType({
          BaseType: $asm01.TypeRef("System.Object"),
          Name: "System.DBNull",
          IsPublic: true,
          IsReferenceType: true,
          MaximumConstructorArguments: 0,
        }, function ($ib) {
        $ = $ib;

        $.Method({Static:false, Public:false}, ".ctor",
          JSIL.MethodSignature.Void,
          DBNull__ctor
        );

        $.Method({Static:false, Public:true , Virtual:true }, "toString",
          JSIL.MethodSignature.Return($.String),
          DBNull_toString
        );

        $.Field({Static:true , Public:true , ReadOnly:true }, "Value", $.Type);


        function DBNull__cctor () {
          $thisType.Value = new $thisType();
        };

        $.Method({Static:true , Public:false}, ".cctor",
          JSIL.MethodSignature.Void,
          DBNull__cctor
        );


        return function (newThisType) { $thisType = newThisType; };
      });

    })();

    JSIL.DeclareNamespace("JSIL");
    JSIL.DeclareNamespace("JSIL.System");
    /* class JSIL.System.NumberFormatter */

    (function NumberFormatter$Members () {
      var $, $thisType;
      var $T00 = function () {
        return ($T00 = JSIL.Memoize($asm01.System.Threading.Thread)) ();
      };
      var $T01 = function () {
        return ($T01 = JSIL.Memoize($asm01.System.Char)) ();
      };
      var $T02 = function () {
        return ($T02 = JSIL.Memoize($asm01.System.UInt32)) ();
      };
      var $T03 = function () {
        return ($T03 = JSIL.Memoize($asm01.System.Boolean)) ();
      };
      var $T04 = function () {
        return ($T04 = JSIL.Memoize(System.Array.Of($asm01.System.Char))) ();
      };
      var $T05 = function () {
        return ($T05 = JSIL.Memoize($asm01.System.Int32)) ();
      };
      var $T06 = function () {
        return ($T06 = JSIL.Memoize($asm01.System.String)) ();
      };
      var $T07 = function () {
        return ($T07 = JSIL.Memoize($asm01.System.Text.StringBuilder)) ();
      };
      var $T08 = function () {
        return ($T08 = JSIL.Memoize($asm01.System.UInt16)) ();
      };
      var $T09 = function () {
        return ($T09 = JSIL.Memoize($asm01.System.Globalization.NumberFormatInfo)) ();
      };
      var $T0A = function () {
        return ($T0A = JSIL.Memoize(System.Array.Of($asm01.System.Int32))) ();
      };
      var $T0B = function () {
        return ($T0B = JSIL.Memoize($asm01.System.ArgumentException)) ();
      };
      var $T0C = function () {
        return ($T0C = JSIL.Memoize($asm01.System.Int64)) ();
      };
      var $T0D = function () {
        return ($T0D = JSIL.Memoize($asm00.JSIL.System.NumberFormatter_CustomInfo)) ();
      };
      var $T0E = function () {
        return ($T0E = JSIL.Memoize($asm01.System.Math)) ();
      };
      var $T0F = function () {
        return ($T0F = JSIL.Memoize($asm01.System.UInt64)) ();
      };
      var $T10 = function () {
        return ($T10 = JSIL.Memoize($asm01.System.Double)) ();
      };
      var $T11 = function () {
        return ($T11 = JSIL.Memoize($asm01.System.Single)) ();
      };
      var $T12 = function () {
        return ($T12 = JSIL.Memoize($asm01.System.Object)) ();
      };
      var $T13 = function () {
        return ($T13 = JSIL.Memoize(System.Array.Of($asm01.System.UInt64))) ();
      };
      var $T14 = function () {
        return ($T14 = JSIL.Memoize(System.Array.Of($asm01.System.Int64))) ();
      };
      var $T15 = function () {
        return ($T15 = JSIL.Memoize($asm01.System.IFormatProvider)) ();
      };
      var $T16 = function () {
        return ($T16 = JSIL.Memoize($asm01.System.Threading.Interlocked)) ();
      };
      var $T17 = function () {
        return ($T17 = JSIL.Memoize($asm01.System.BitConverter)) ();
      };
      var $T18 = function () {
        return ($T18 = JSIL.Memoize($asm01.System.Decimal)) ();
      };
      var $T19 = function () {
        return ($T19 = JSIL.Memoize($asm01.System.FormatException)) ();
      };
      var $T1A = function () {
        return ($T1A = JSIL.Memoize($asm01.System.Int16)) ();
      };
      var $T1B = function () {
        return ($T1B = JSIL.Memoize($asm01.System.Byte)) ();
      };
      var $T1C = function () {
        return ($T1C = JSIL.Memoize($asm01.System.SByte)) ();
      };
      var $T1D = function () {
        return ($T1D = JSIL.Memoize($asm01.System.Array)) ();
      };
      var $T1E = function () {
        return ($T1E = JSIL.Memoize($asm01.System.Globalization.CultureInfo)) ();
      };
      var $S00 = function () {
        return ($S00 = JSIL.Memoize(JSIL.MethodSignature.Action($asm01.TypeRef("System.Char")))) ();
      };
      var $S01 = function () {
        return ($S01 = JSIL.Memoize(JSIL.MethodSignature.Action($asm01.TypeRef("System.String")))) ();
      };
      var $S02 = function () {
        return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Text.StringBuilder"), [$asm01.TypeRef("System.Char"), $asm01.TypeRef("System.Int32")]))) ();
      };
      var $S03 = function () {
        return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentException"), null))) ();
      };
      var $S04 = function () {
        return ($S04 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Text.StringBuilder"), [$asm01.TypeRef("System.Char")]))) ();
      };
      var $S05 = function () {
        return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.String"), [
            $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Char")]), $asm01.TypeRef("System.Int32"),
            $asm01.TypeRef("System.Int32")
          ]))) ();
      };
      var $S06 = function () {
        return ($S06 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Text.StringBuilder"), [$asm01.TypeRef("System.Int32")]))) ();
      };
      var $S07 = function () {
        return ($S07 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Text.StringBuilder"), [
            $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.String"),
            $asm01.TypeRef("System.Int32")
          ]))) ();
      };
      var $S08 = function () {
        return ($S08 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Text.StringBuilder"), [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Char")]))) ();
      };
      var $S09 = function () {
        return ($S09 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Text.StringBuilder"), [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.String")]))) ();
      };
      var $S0A = function () {
        return ($S0A = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Double"), [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.IFormatProvider")]))) ();
      };
      var $S0B = function () {
        return ($S0B = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Single"), [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.IFormatProvider")]))) ();
      };
      var $S0C = function () {
        return ($S0C = JSIL.Memoize(JSIL.MethodSignature.Action($asm01.TypeRef("System.UInt32")))) ();
      };
      var $S0D = function () {
        return ($S0D = JSIL.Memoize(JSIL.MethodSignature.Action($asm01.TypeRef("System.UInt64")))) ();
      };
      var $S0E = function () {
        return ($S0E = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.FormatException"), [$asm01.TypeRef("System.String")]))) ();
      };
      var $S0F = function () {
        return ($S0F = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.String"), [
            $asm01.TypeRef("System.String"), $asm01.TypeRef("System.Int32"),
            $asm01.TypeRef("System.IFormatProvider")
          ]))) ();
      };
      var $S10 = function () {
        return ($S10 = JSIL.Memoize(new JSIL.MethodSignature(null, [
            $asm01.TypeRef("System.String"), $asm01.TypeRef("System.UInt32"),
            $asm01.TypeRef("System.Int32")
          ]))) ();
      };
      var $S11 = function () {
        return ($S11 = JSIL.Memoize(new JSIL.MethodSignature(null, [
            $asm01.TypeRef("System.String"), $asm01.TypeRef("System.Int32"),
            $asm01.TypeRef("System.Int32")
          ]))) ();
      };
      var $S12 = function () {
        return ($S12 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.UInt64")]))) ();
      };
      var $S13 = function () {
        return ($S13 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.Int64")]))) ();
      };
      var $S14 = function () {
        return ($S14 = JSIL.Memoize(new JSIL.MethodSignature(null, [
            $asm01.TypeRef("System.String"), $asm01.TypeRef("System.Double"),
            $asm01.TypeRef("System.Int32")
          ]))) ();
      };
      var $S15 = function () {
        return ($S15 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.String"), [$asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Globalization.NumberFormatInfo")]))) ();
      };
      var $S16 = function () {
        return ($S16 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.String"), [$asm01.TypeRef("System.Double"), $asm01.TypeRef("System.Globalization.NumberFormatInfo")]))) ();
      };
      var $S17 = function () {
        return ($S17 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.Decimal")]))) ();
      };


      function NumberFormatter__ctor (current) {
        this._cbuf = JSIL.Array.New($T01(), 0);
        if (current !== null) {
          this.set_CurrentCulture(current.get_CurrentCulture());
        }
      };

      function NumberFormatter_AddOneToDecHex$00 () {
        if ((this._val1 >>> 0) === 2576980377) {
          this._val1 = 0;
          if ((this._val2 >>> 0) === 2576980377) {
            this._val2 = 0;
            if ((this._val3 >>> 0) === 2576980377) {
              this._val3 = 0;
              this._val4 = ($thisType.AddOneToDecHex(this._val4) >>> 0);
            } else {
              this._val3 = ($thisType.AddOneToDecHex(this._val3) >>> 0);
            }
          } else {
            this._val2 = ($thisType.AddOneToDecHex(this._val2) >>> 0);
          }
        } else {
          this._val1 = ($thisType.AddOneToDecHex(this._val1) >>> 0);
        }
      };

      function NumberFormatter_AddOneToDecHex$01 (val) {
        if (((val >>> 0) & 65535) === 39321) {
          if (((val >>> 0) & 16777215) === 10066329) {
            if (((val >>> 0) & 268435455) === 161061273) {
              var result = (((val >>> 0) + 107374183) >>> 0);
            } else {
              result = (((val >>> 0) + 6710887) >>> 0);
            }
          } else {
            if (((val >>> 0) & 1048575) === 629145) {
              result = (((val >>> 0) + 419431) >>> 0);
            } else {
              result = (((val >>> 0) + 26215) >>> 0);
            }
          }
        } else {
          if (((val >>> 0) & 255) === 153) {
            if (((val >>> 0) & 4095) === 2457) {
              result = (((val >>> 0) + 1639) >>> 0);
            } else {
              result = (((val >>> 0) + 103) >>> 0);
            }
          } else {
            if (((val >>> 0) & 15) === 9) {
              result = (((val >>> 0) + 7) >>> 0);
            } else {
              result = (((val >>> 0) + 1) >>> 0);
            }
          }
        }
        return result;
      };

      function NumberFormatter_Append$02 (c) {
        var flag = (this._ind | 0) === (this._cbuf.length | 0);
        if (flag) {
          this.Resize((((this._ind | 0) + 10) | 0));
        }
        var arg_3D_0 = this._cbuf;
        var ind = (this._ind | 0);
        this._ind = ((ind + 1) | 0);
        arg_3D_0[ind] = c;
      };

      function NumberFormatter_Append$03 (c, cnt) {
        var flag = (((this._ind | 0) + (cnt | 0)) | 0) > (this._cbuf.length | 0);
        if (flag) {
          this.Resize((((((this._ind | 0) + (cnt | 0)) | 0) + 10) | 0));
        }

      $loop0:
        while (true) {
          var num = (cnt | 0);
          cnt = ((num - 1) | 0);
          if (num <= 0) {
            break $loop0;
          }
          var arg_43_0 = this._cbuf;
          num = (this._ind | 0);
          this._ind = ((num + 1) | 0);
          arg_43_0[num] = c;
        }
      };

      function NumberFormatter_Append$04 (s) {
        var slen = (s.length | 0);
        var flag = (((this._ind | 0) + slen) | 0) > (this._cbuf.length | 0);
        if (flag) {
          this.Resize((((((this._ind | 0) + slen) | 0) + 10) | 0));
        }

        for (var i = 0; i < slen; ) {
          var arg_52_0 = this._cbuf;
          var num = (this._ind | 0);
          this._ind = ((num + 1) | 0);
          arg_52_0[num] = (s[i]);
          num = i;
          i = ((num + 1) | 0);
        }
      };

      function NumberFormatter_AppendDecimalString$05 (precision, sb) {
        this.AppendDigits((((((this._digitsLen | 0) - (precision | 0)) | 0) - (this._decPointPos | 0)) | 0), (((this._digitsLen | 0) - (this._decPointPos | 0)) | 0), sb);
      };

      function NumberFormatter_AppendDecimalString$06 (precision) {
        this.AppendDigits((((((this._digitsLen | 0) - (precision | 0)) | 0) - (this._decPointPos | 0)) | 0), (((this._digitsLen | 0) - (this._decPointPos | 0)) | 0));
      };

      function NumberFormatter_AppendDigits$07 (start, end) {
        var flag = (start | 0) >= (end | 0);
        if (!flag) {
          var i = (((this._ind | 0) + (((end | 0) - (start | 0)) | 0)) | 0);
          var flag2 = i > (this._cbuf.length | 0);
          if (flag2) {
            this.Resize(((i + 10) | 0));
          }
          this._ind = i;
          end = (((end | 0) + (this._offset | 0)) | 0);
          start = (((start | 0) + (this._offset | 0)) | 0);
          var next = (((((start | 0) + 8) | 0) - ((start | 0) & 7)) | 0);

        $loop0:
          while (true) {

            var $label0 = 0;
          $labelgroup0:
            while (true) {
              switch ($label0) {
                case 0: /* $entry0 */
                  var flag3 = next === 8;
                  if (flag3) {
                    var v = (this._val1 >>> 0);
                  } else {
                    var flag4 = next === 16;
                    if (flag4) {
                      v = (this._val2 >>> 0);
                    } else {
                      var flag5 = next === 24;
                      if (flag5) {
                        v = (this._val3 >>> 0);
                      } else {
                        var flag6 = next === 32;
                        if (flag6) {
                          v = (this._val4 >>> 0);
                        } else {
                          v = 0;
                        }
                      }
                    }
                  }
                  v = v >>> (((start | 0) & 7) << 2);
                  var flag7 = next > (end | 0);
                  if (flag7) {
                    next = (end | 0);
                  }
                  var arg_E7_0 = this._cbuf;
                  var num = ((i - 1) | 0);
                  i = num;
                  arg_E7_0[num] = String.fromCharCode((48 | (v & 15) & 0xFFFF));
                  switch ((next - (start | 0) | 0)) {
                    case 1:
                      $label0 = 2 /* goto IL_202 */ ;
                      continue $labelgroup0;

                    case 2:
                      $label0 = 3 /* goto IL_1E1 */ ;
                      continue $labelgroup0;

                    case 3:
                      $label0 = 4 /* goto IL_1C0 */ ;
                      continue $labelgroup0;

                    case 4:
                      $label0 = 5 /* goto IL_19F */ ;
                      continue $labelgroup0;

                    case 5:
                      $label0 = 6 /* goto IL_17E */ ;
                      continue $labelgroup0;

                    case 6:
                      $label0 = 7 /* goto IL_15D */ ;
                      continue $labelgroup0;

                    case 7:
                      $label0 = 8 /* goto IL_13C */ ;
                      continue $labelgroup0;

                    case 8:
                      var arg_139_0 = this._cbuf;
                      num = ((i - 1) | 0);
                      i = num;
                      arg_139_0[num] = String.fromCharCode((48 | ((v = v >>> 4) & 15) & 0xFFFF));
                      $label0 = 8 /* goto IL_13C */ ;
                      continue $labelgroup0;

                  }

                  $label0 = 1 /* goto IL_211 */ ;
                  continue $labelgroup0;
                case 1: /* IL_211 */
                  start = next;
                  next = ((next + 8) | 0);
                  continue $loop0;

                case 2: /* IL_202 */
                  var flag8 = next === (end | 0);
                  if (flag8) {
                    break $loop0;
                  }
                  $label0 = 1 /* goto IL_211 */ ;
                  continue $labelgroup0;

                case 3: /* IL_1E1 */
                  var arg_1FF_0 = this._cbuf;
                  num = ((i - 1) | 0);
                  i = num;
                  arg_1FF_0[num] = String.fromCharCode((48 | ((v >>> 4) & 15) & 0xFFFF));
                  $label0 = 2 /* goto IL_202 */ ;
                  continue $labelgroup0;

                case 4: /* IL_1C0 */
                  var arg_1DE_0 = this._cbuf;
                  num = ((i - 1) | 0);
                  i = num;
                  arg_1DE_0[num] = String.fromCharCode((48 | ((v = v >>> 4) & 15) & 0xFFFF));
                  $label0 = 3 /* goto IL_1E1 */ ;
                  continue $labelgroup0;

                case 5: /* IL_19F */
                  var arg_1BD_0 = this._cbuf;
                  num = ((i - 1) | 0);
                  i = num;
                  arg_1BD_0[num] = String.fromCharCode((48 | ((v = v >>> 4) & 15) & 0xFFFF));
                  $label0 = 4 /* goto IL_1C0 */ ;
                  continue $labelgroup0;

                case 6: /* IL_17E */
                  var arg_19C_0 = this._cbuf;
                  num = ((i - 1) | 0);
                  i = num;
                  arg_19C_0[num] = String.fromCharCode((48 | ((v = v >>> 4) & 15) & 0xFFFF));
                  $label0 = 5 /* goto IL_19F */ ;
                  continue $labelgroup0;

                case 7: /* IL_15D */
                  var arg_17B_0 = this._cbuf;
                  num = ((i - 1) | 0);
                  i = num;
                  arg_17B_0[num] = String.fromCharCode((48 | ((v = v >>> 4) & 15) & 0xFFFF));
                  $label0 = 6 /* goto IL_17E */ ;
                  continue $labelgroup0;

                case 8: /* IL_13C */
                  var arg_15A_0 = this._cbuf;
                  num = ((i - 1) | 0);
                  i = num;
                  arg_15A_0[num] = String.fromCharCode((48 | ((v = v >>> 4) & 15) & 0xFFFF));
                  $label0 = 7 /* goto IL_15D */ ;
                  continue $labelgroup0;

              }
            }
          }
        }
      };

      function NumberFormatter_AppendDigits$08 (start, end, sb) {
        var flag = (start | 0) >= (end | 0);
        if (!flag) {
          var i = (((sb.get_Length() | 0) + (((end | 0) - (start | 0)) | 0)) | 0);
          sb.set_Length(i);
          end = (((end | 0) + (this._offset | 0)) | 0);
          start = (((start | 0) + (this._offset | 0)) | 0);
          var next = (((((start | 0) + 8) | 0) - ((start | 0) & 7)) | 0);

        $loop0:
          while (true) {

            var $label0 = 0;
          $labelgroup0:
            while (true) {
              switch ($label0) {
                case 0: /* $entry0 */
                  var flag2 = next === 8;
                  if (flag2) {
                    var v = (this._val1 >>> 0);
                  } else {
                    var flag3 = next === 16;
                    if (flag3) {
                      v = (this._val2 >>> 0);
                    } else {
                      var flag4 = next === 24;
                      if (flag4) {
                        v = (this._val3 >>> 0);
                      } else {
                        var flag5 = next === 32;
                        if (flag5) {
                          v = (this._val4 >>> 0);
                        } else {
                          v = 0;
                        }
                      }
                    }
                  }
                  v = v >>> (((start | 0) & 7) << 2);
                  var flag6 = next > (end | 0);
                  if (flag6) {
                    next = (end | 0);
                  }
                  var num = ((i - 1) | 0);
                  i = num;
                  sb.set_Chars(num, String.fromCharCode(48 | (v & 15)));
                  switch ((next - (start | 0) | 0)) {
                    case 1:
                      $label0 = 2 /* goto IL_1D3 */ ;
                      continue $labelgroup0;

                    case 2:
                      $label0 = 3 /* goto IL_1B4 */ ;
                      continue $labelgroup0;

                    case 3:
                      $label0 = 4 /* goto IL_195 */ ;
                      continue $labelgroup0;

                    case 4:
                      $label0 = 5 /* goto IL_176 */ ;
                      continue $labelgroup0;

                    case 5:
                      $label0 = 6 /* goto IL_157 */ ;
                      continue $labelgroup0;

                    case 6:
                      $label0 = 7 /* goto IL_138 */ ;
                      continue $labelgroup0;

                    case 7:
                      $label0 = 8 /* goto IL_119 */ ;
                      continue $labelgroup0;

                    case 8:
                      num = ((i - 1) | 0);
                      i = num;
                      sb.set_Chars(num, String.fromCharCode(48 | ((v = v >>> 4) & 15)));
                      $label0 = 8 /* goto IL_119 */ ;
                      continue $labelgroup0;

                  }

                  $label0 = 1 /* goto IL_1E2 */ ;
                  continue $labelgroup0;
                case 1: /* IL_1E2 */
                  start = next;
                  next = ((next + 8) | 0);
                  continue $loop0;

                case 2: /* IL_1D3 */
                  var flag7 = next === (end | 0);
                  if (flag7) {
                    break $loop0;
                  }
                  $label0 = 1 /* goto IL_1E2 */ ;
                  continue $labelgroup0;

                case 3: /* IL_1B4 */
                  num = ((i - 1) | 0);
                  i = num;
                  sb.set_Chars(num, String.fromCharCode(48 | ((v >>> 4) & 15)));
                  $label0 = 2 /* goto IL_1D3 */ ;
                  continue $labelgroup0;

                case 4: /* IL_195 */
                  num = ((i - 1) | 0);
                  i = num;
                  sb.set_Chars(num, String.fromCharCode(48 | ((v = v >>> 4) & 15)));
                  $label0 = 3 /* goto IL_1B4 */ ;
                  continue $labelgroup0;

                case 5: /* IL_176 */
                  num = ((i - 1) | 0);
                  i = num;
                  sb.set_Chars(num, String.fromCharCode(48 | ((v = v >>> 4) & 15)));
                  $label0 = 4 /* goto IL_195 */ ;
                  continue $labelgroup0;

                case 6: /* IL_157 */
                  num = ((i - 1) | 0);
                  i = num;
                  sb.set_Chars(num, String.fromCharCode(48 | ((v = v >>> 4) & 15)));
                  $label0 = 5 /* goto IL_176 */ ;
                  continue $labelgroup0;

                case 7: /* IL_138 */
                  num = ((i - 1) | 0);
                  i = num;
                  sb.set_Chars(num, String.fromCharCode(48 | ((v = v >>> 4) & 15)));
                  $label0 = 6 /* goto IL_157 */ ;
                  continue $labelgroup0;

                case 8: /* IL_119 */
                  num = ((i - 1) | 0);
                  i = num;
                  sb.set_Chars(num, String.fromCharCode(48 | ((v = v >>> 4) & 15)));
                  $label0 = 7 /* goto IL_138 */ ;
                  continue $labelgroup0;

              }
            }
          }
        }
      };

      function NumberFormatter_AppendExponent (nfi, exponent, minDigits) {
        if (this._specifierIsUpper || (((this._specifier).charCodeAt(0) | 0) === (("R").charCodeAt(0) | 0))) {
          $S00().CallVirtual("Append", null, this, "E");
        } else {
          $S00().CallVirtual("Append", null, this, "e");
        }
        var flag2 = (exponent | 0) >= 0;
        if (flag2) {
          $S01().CallVirtual("Append", null, this, nfi.get_PositiveSign());
        } else {
          $S01().CallVirtual("Append", null, this, nfi.get_NegativeSign());
          exponent = (-exponent | 0);
        }
        var flag3 = (exponent | 0) === 0;
        if (flag3) {
          this.Append("0", minDigits);
        } else {
          var flag4 = (exponent | 0) < 10;
          if (flag4) {
            this.Append("0", (((minDigits | 0) - 1) | 0));
            $S00().CallVirtual("Append", null, this, String.fromCharCode(48 | (exponent | 0)));
          } else {
            var hexDigit = ($thisType.FastToDecHex(exponent) >>> 0);
            var flag5 = ((exponent | 0) >= 100) ||
            ((minDigits | 0) === 3);
            if (flag5) {
              $S00().CallVirtual("Append", null, this, String.fromCharCode(48 | (hexDigit >>> 8)));
            }
            $S00().CallVirtual("Append", null, this, String.fromCharCode(48 | ((hexDigit >>> 4) & 15)));
            $S00().CallVirtual("Append", null, this, String.fromCharCode(48 | (hexDigit & 15)));
          }
        }
      };

      function NumberFormatter_AppendIntegerString$09 (minLength, sb) {
        if ((this._decPointPos | 0) <= 0) {
          $S02().CallVirtual("Append", null, sb, "0", minLength);
        } else {
          var flag2 = (this._decPointPos | 0) < (minLength | 0);
          if (flag2) {
            $S02().CallVirtual("Append", null, sb, "0", (((minLength | 0) - (this._decPointPos | 0)) | 0));
          }
          this.AppendDigits((((this._digitsLen | 0) - (this._decPointPos | 0)) | 0), this._digitsLen, sb);
        }
      };

      function NumberFormatter_AppendIntegerString$0A (minLength) {
        if ((this._decPointPos | 0) <= 0) {
          this.Append("0", minLength);
        } else {
          var flag2 = (this._decPointPos | 0) < (minLength | 0);
          if (flag2) {
            this.Append("0", (((minLength | 0) - (this._decPointPos | 0)) | 0));
          }
          this.AppendDigits((((this._digitsLen | 0) - (this._decPointPos | 0)) | 0), this._digitsLen);
        }
      };

      function NumberFormatter_AppendIntegerStringWithGroupSeparator (groups, groupSeparator) {
        var lastGroupMod = 0;
        var isZeroInteger = this.get_IsZeroInteger();
        if (isZeroInteger) {
          $S00().CallVirtual("Append", null, this, "0");
        } else {
          var total = 0;
          var groupIndex = 0;

        $loop0:
          for (var i = 0; i < (groups.length | 0); ) {
            total = ((total + (groups[i] | 0)) | 0);
            var flag = total <= (this._decPointPos | 0);
            if (!flag) {
              break $loop0;
            }
            groupIndex = i;
            var num = i;
            i = ((num + 1) | 0);
          }
          var flag2 = ((groups.length | 0) !== 0) &&
          (total > 0);
          if (flag2) {
            var groupSize = (groups[groupIndex] | 0);
            var fraction = ((
              ((this._decPointPos | 0) > total)
                 ? (((this._decPointPos | 0) - total) | 0)
                 : 0)
             | 0);
            var flag3 = groupSize === 0;
            if (flag3) {

              while ((groupIndex >= 0) && ((groups[groupIndex] | 0) === 0)) {
                num = groupIndex;
                groupIndex = ((num - 1) | 0);
              }
              groupSize = ((
                (fraction > 0)
                   ? fraction
                   : groups[groupIndex])
               | 0);
            }
            if (fraction === 0) {
              var counter = groupSize;
            } else {
              groupIndex = ((groupIndex + ((fraction / groupSize) | 0)) | 0);
              counter = ((fraction % groupSize) | 0);
              var flag5 = counter === 0;
              if (flag5) {
                counter = groupSize;
              } else {
                num = groupIndex;
                groupIndex = ((num + 1) | 0);
              }
            }
            var flag6 = total >= (this._decPointPos | 0);
            if (flag6) {
              var lastGroupSize = (groups[0] | 0);
              var flag7 = total > lastGroupSize;
              if (flag7) {
                var lastGroupDiff = (-((lastGroupSize - (this._decPointPos | 0)) | 0) | 0);
                var flag8 = lastGroupDiff < lastGroupSize;
                if (flag8) {
                  counter = lastGroupDiff;
                } else {
                  var flag9 = (lastGroupSize > 0) &&
                  ((lastGroupMod = (((this._decPointPos | 0) % lastGroupSize) | 0)) > 0);
                  if (flag9) {
                    counter = lastGroupMod;
                  }
                }
              }
            }
            var j = 0;

          $loop2:
            while (true) {
              var flag10 = ((((this._decPointPos | 0) - j) | 0) <= counter) ||
              (counter === 0);
              if (flag10) {
                break $loop2;
              }
              this.AppendDigits((((((this._digitsLen | 0) - j) | 0) - counter) | 0), (((this._digitsLen | 0) - j) | 0));
              j = ((j + counter) | 0);
              $S01().CallVirtual("Append", null, this, groupSeparator);
              num = ((groupIndex - 1) | 0);
              groupIndex = num;
              var flag11 = (num < (groups.length | 0)) &&
              (groupIndex >= 0);
              if (flag11) {
                groupSize = (groups[groupIndex] | 0);
              }
              counter = groupSize;
            }
            this.AppendDigits((((this._digitsLen | 0) - (this._decPointPos | 0)) | 0), (((this._digitsLen | 0) - j) | 0));
          } else {
            this.AppendDigits((((this._digitsLen | 0) - (this._decPointPos | 0)) | 0), this._digitsLen);
          }
        }
      };

      function NumberFormatter_AppendNonNegativeNumber (sb, v) {
        var flag = (v | 0) < 0;
        if (flag) {
          throw $S03().Construct();
        }
        var i = ((($thisType.ScaleOrder($T0C().FromNumber(v)) | 0) - 1) | 0);

        do {
          var j = (((v | 0) / (($thisType.GetTenPowerOf(i)).ToNumber(4294967295, true) | 0)) | 0);
          $S04().CallVirtual("Append", null, sb, String.fromCharCode(48 | j));
          var arg_40_0 = (v | 0);
          var num = i;
          i = ((num - 1) | 0);
          v = ((arg_40_0 - Math.imul(($thisType.GetTenPowerOf(num)).ToNumber(4294967295, true), j)) | 0);
        } while (i >= 0);
      };

      function NumberFormatter_AppendOneDigit (start) {
        var flag = (this._ind | 0) === (this._cbuf.length | 0);
        if (flag) {
          this.Resize((((this._ind | 0) + 10) | 0));
        }
        start = (((start | 0) + (this._offset | 0)) | 0);
        var flag2 = (start | 0) < 0;
        if (flag2) {
          var v = 0;
        } else {
          var flag3 = (start | 0) < 8;
          if (flag3) {
            v = (this._val1 >>> 0);
          } else {
            var flag4 = (start | 0) < 16;
            if (flag4) {
              v = (this._val2 >>> 0);
            } else {
              var flag5 = (start | 0) < 24;
              if (flag5) {
                v = (this._val3 >>> 0);
              } else {
                var flag6 = (start | 0) < 32;
                if (flag6) {
                  v = (this._val4 >>> 0);
                } else {
                  v = 0;
                }
              }
            }
          }
        }
        v = v >>> (((start | 0) & 7) << 2);
        var arg_B7_0 = this._cbuf;
        var ind = (this._ind | 0);
        this._ind = ((ind + 1) | 0);
        arg_B7_0[ind] = String.fromCharCode((48 | (v & 15) & 0xFFFF));
      };

      function NumberFormatter_CountTrailingZeros$0B () {
        if ((this._val1 >>> 0) > 0) {
          var result = ($thisType.CountTrailingZeros(this._val1) | 0);
        } else {
          if ((this._val2 >>> 0) > 0) {
            result = ((($thisType.CountTrailingZeros(this._val2) | 0) + 8) | 0);
          } else {
            if ((this._val3 >>> 0) > 0) {
              result = ((($thisType.CountTrailingZeros(this._val3) | 0) + 16) | 0);
            } else {
              if ((this._val4 >>> 0) > 0) {
                result = ((($thisType.CountTrailingZeros(this._val4) | 0) + 24) | 0);
              } else {
                result = (this._digitsLen | 0);
              }
            }
          }
        }
        return result;
      };

      function NumberFormatter_CountTrailingZeros$0C (val) {
        if (((val >>> 0) & 65535) === 0) {
          if (((val >>> 0) & 16777215) === 0) {
            if (((val >>> 0) & 268435455) === 0) {
              var result = 7;
            } else {
              result = 6;
            }
          } else {
            if (((val >>> 0) & 1048575) === 0) {
              result = 5;
            } else {
              result = 4;
            }
          }
        } else {
          if (((val >>> 0) & 255) === 0) {
            if (((val >>> 0) & 4095) === 0) {
              result = 3;
            } else {
              result = 2;
            }
          } else {
            if (((val >>> 0) & 15) === 0) {
              result = 1;
            } else {
              result = 0;
            }
          }
        }
        return result;
      };

      function NumberFormatter_DecHexLen$0D (val) {
        if ((val >>> 0) < 65536) {
          var result = ($thisType.FastDecHexLen((val | 0)) | 0);
        } else {
          result = ((4 + ($thisType.FastDecHexLen(((val >>> 0) >>> 16 | 0)) | 0)) | 0);
        }
        return result;
      };

      function NumberFormatter_DecHexLen$0E () {
        if ((this._val4 >>> 0) > 0) {
          var result = ((($thisType.DecHexLen(this._val4) | 0) + 24) | 0);
        } else {
          if ((this._val3 >>> 0) > 0) {
            result = ((($thisType.DecHexLen(this._val3) | 0) + 16) | 0);
          } else {
            if ((this._val2 >>> 0) > 0) {
              result = ((($thisType.DecHexLen(this._val2) | 0) + 8) | 0);
            } else {
              if ((this._val1 >>> 0) > 0) {
                result = ($thisType.DecHexLen(this._val1) | 0);
              } else {
                result = 0;
              }
            }
          }
        }
        return result;
      };

      function NumberFormatter_Divide10 (count) {
        if (!(((count | 0) <= 0) || ((this._digitsLen | 0) === 0))) {
          this._decPointPos = (((this._decPointPos | 0) - (count | 0)) | 0);
        }
      };

      function NumberFormatter_FastDecHexLen (val) {
        if ((val | 0) < 256) {
          if ((val | 0) < 16) {
            var result = 1;
          } else {
            result = 2;
          }
        } else {
          if ((val | 0) < 4096) {
            result = 3;
          } else {
            result = 4;
          }
        }
        return result;
      };

      function NumberFormatter_FastToDecHex (val) {
        if ((val | 0) < 100) {
          var result = ($thisType.DecHexDigits[val] >>> 0);
        } else {
          var v = Math.imul(val, 5243) >> 19;
          result = ((($thisType.DecHexDigits[v] | 0) << 8) | ($thisType.DecHexDigits[(((val | 0) - Math.imul(v, 100)) | 0)] | 0) >>> 0);
        }
        return result;
      };

      function NumberFormatter_FormatCurrency (precision, nfi) {
        precision = ((
          ((precision | 0) >= 0)
             ? precision
             : nfi.get_CurrencyDecimalDigits())
         | 0);
        this.RoundDecimal(precision);
        this.ResetCharBuf(((((Math.imul(this.get_IntegerDigits(), 2) + Math.imul(precision, 2)) | 0) + 16) | 0));
        var positive = this._positive;
        if (positive) {
          var currencyPositivePattern = (nfi.get_CurrencyPositivePattern() | 0);
          if (currencyPositivePattern !== 0) {
            if (currencyPositivePattern === 2) {
              $S01().CallVirtual("Append", null, this, nfi.get_CurrencySymbol());
              $S00().CallVirtual("Append", null, this, " ");
            }
          } else {
            $S01().CallVirtual("Append", null, this, nfi.get_CurrencySymbol());
          }
        } else {
          switch (nfi.get_CurrencyNegativePattern()) {
            case 0:
              $S00().CallVirtual("Append", null, this, "(");
              $S01().CallVirtual("Append", null, this, nfi.get_CurrencySymbol());
              break;

            case 1:
              $S01().CallVirtual("Append", null, this, nfi.get_NegativeSign());
              $S01().CallVirtual("Append", null, this, nfi.get_CurrencySymbol());
              break;

            case 2:
              $S01().CallVirtual("Append", null, this, nfi.get_CurrencySymbol());
              $S01().CallVirtual("Append", null, this, nfi.get_NegativeSign());
              break;

            case 3:
              $S01().CallVirtual("Append", null, this, nfi.get_CurrencySymbol());
              break;

            case 4:
              $S00().CallVirtual("Append", null, this, "(");
              break;

            case 5:
              $S01().CallVirtual("Append", null, this, nfi.get_NegativeSign());
              break;

            case 8:
              $S01().CallVirtual("Append", null, this, nfi.get_NegativeSign());
              break;

            case 9:
              $S01().CallVirtual("Append", null, this, nfi.get_NegativeSign());
              $S01().CallVirtual("Append", null, this, nfi.get_CurrencySymbol());
              $S00().CallVirtual("Append", null, this, " ");
              break;

            case 11:
              $S01().CallVirtual("Append", null, this, nfi.get_CurrencySymbol());
              $S00().CallVirtual("Append", null, this, " ");
              break;

            case 12:
              $S01().CallVirtual("Append", null, this, nfi.get_CurrencySymbol());
              $S00().CallVirtual("Append", null, this, " ");
              $S01().CallVirtual("Append", null, this, nfi.get_NegativeSign());
              break;

            case 14:
              $S00().CallVirtual("Append", null, this, "(");
              $S01().CallVirtual("Append", null, this, nfi.get_CurrencySymbol());
              $S00().CallVirtual("Append", null, this, " ");
              break;

            case 15:
              $S00().CallVirtual("Append", null, this, "(");
              break;

          }
        }
        this.AppendIntegerStringWithGroupSeparator(
          nfi.get_CurrencyGroupSizes(),
          nfi.get_CurrencyGroupSeparator()
        );
        var flag = (precision | 0) > 0;
        if (flag) {
          $S01().CallVirtual("Append", null, this, nfi.get_CurrencyDecimalSeparator());
          this.AppendDecimalString(precision);
        }
        var positive2 = this._positive;
        if (positive2) {
          var currencyPositivePattern2 = (nfi.get_CurrencyPositivePattern() | 0);
          if (currencyPositivePattern2 !== 1) {
            if (currencyPositivePattern2 === 3) {
              $S00().CallVirtual("Append", null, this, " ");
              $S01().CallVirtual("Append", null, this, nfi.get_CurrencySymbol());
            }
          } else {
            $S01().CallVirtual("Append", null, this, nfi.get_CurrencySymbol());
          }
        } else {
          switch (nfi.get_CurrencyNegativePattern()) {
            case 0:
              $S00().CallVirtual("Append", null, this, ")");
              break;

            case 3:
              $S01().CallVirtual("Append", null, this, nfi.get_NegativeSign());
              break;

            case 4:
              $S01().CallVirtual("Append", null, this, nfi.get_CurrencySymbol());
              $S00().CallVirtual("Append", null, this, ")");
              break;

            case 5:
              $S01().CallVirtual("Append", null, this, nfi.get_CurrencySymbol());
              break;

            case 6:
              $S01().CallVirtual("Append", null, this, nfi.get_NegativeSign());
              $S01().CallVirtual("Append", null, this, nfi.get_CurrencySymbol());
              break;

            case 7:
              $S01().CallVirtual("Append", null, this, nfi.get_CurrencySymbol());
              $S01().CallVirtual("Append", null, this, nfi.get_NegativeSign());
              break;

            case 8:
              $S00().CallVirtual("Append", null, this, " ");
              $S01().CallVirtual("Append", null, this, nfi.get_CurrencySymbol());
              break;

            case 10:
              $S00().CallVirtual("Append", null, this, " ");
              $S01().CallVirtual("Append", null, this, nfi.get_CurrencySymbol());
              $S01().CallVirtual("Append", null, this, nfi.get_NegativeSign());
              break;

            case 11:
              $S01().CallVirtual("Append", null, this, nfi.get_NegativeSign());
              break;

            case 13:
              $S01().CallVirtual("Append", null, this, nfi.get_NegativeSign());
              $S00().CallVirtual("Append", null, this, " ");
              $S01().CallVirtual("Append", null, this, nfi.get_CurrencySymbol());
              break;

            case 14:
              $S00().CallVirtual("Append", null, this, ")");
              break;

            case 15:
              $S00().CallVirtual("Append", null, this, " ");
              $S01().CallVirtual("Append", null, this, nfi.get_CurrencySymbol());
              $S00().CallVirtual("Append", null, this, ")");
              break;

          }
        }
        return $S05().Construct(this._cbuf, 0, this._ind);
      };

      function NumberFormatter_FormatCustom (format, nfi) {
        var p = new JSIL.BoxedVariable(this._positive);
        var offset = new JSIL.BoxedVariable(0);
        var length = new JSIL.BoxedVariable(0);
        $T0D().GetActiveSection(
          format,
          /* ref */ p,
          this.get_IsZero(),
          /* ref */ offset,
          /* ref */ length
        );
        var flag = (length.get() | 0) === 0;
        if (flag) {
          var result = (
            this._positive
               ? $T06().Empty
               : nfi.get_NegativeSign())
          ;
        } else {
          this._positive = p.get();
          var info = $T0D().Parse(format, offset.get(), length.get(), nfi);
          var sb_int = $S06().Construct(Math.imul(info.IntegerDigits, 2));
          var sb_dec = $S06().Construct(Math.imul(info.DecimalDigits, 2));
          var sb_exp = (
            info.UseExponent
               ? $S06().Construct(Math.imul(info.ExponentDigits, 2))
               : null)
          ;
          var diff = 0;
          var flag2 = (info.Percents | 0) > 0;
          if (flag2) {
            this.Multiply10(Math.imul(2, info.Percents));
          }
          var flag3 = (info.Permilles | 0) > 0;
          if (flag3) {
            this.Multiply10(Math.imul(3, info.Permilles));
          }
          var flag4 = (info.DividePlaces | 0) > 0;
          if (flag4) {
            this.Divide10(info.DividePlaces);
          }
          var expPositive = true;
          var flag5 = info.UseExponent &&
          (((info.DecimalDigits | 0) > 0) ||
            ((info.IntegerDigits | 0) > 0));
          if (flag5) {
            var flag6 = !this.get_IsZero();
            if (flag6) {
              this.RoundPos((((info.DecimalDigits | 0) + (info.IntegerDigits | 0)) | 0));
              diff = ((diff - (((this._decPointPos | 0) - (info.IntegerDigits | 0)) | 0)) | 0);
              this._decPointPos = (info.IntegerDigits | 0);
            }
            expPositive = diff <= 0;
            $thisType.AppendNonNegativeNumber(sb_exp, (
                (diff < 0)
                   ? (-diff | 0)
                   : diff)
            );
          } else {
            this.RoundDecimal(info.DecimalDigits);
          }
          var flag7 = ((info.IntegerDigits | 0) !== 0) ||
          !this.get_IsZeroInteger();
          if (flag7) {
            this.AppendIntegerString(this.get_IntegerDigits(), sb_int);
          }
          this.AppendDecimalString(this.get_DecimalDigits(), sb_dec);
          var useExponent = info.UseExponent;
          if (useExponent) {
            var flag8 = ((info.DecimalDigits | 0) <= 0) &&
            ((info.IntegerDigits | 0) <= 0);
            if (flag8) {
              this._positive = true;
            }
            var flag9 = (sb_int.get_Length() | 0) < (info.IntegerDigits | 0);
            if (flag9) {
              $S07().CallVirtual("Insert", null, sb_int, 0, "0", (((info.IntegerDigits | 0) - (sb_int.get_Length() | 0)) | 0));
            }

            while ((sb_exp.get_Length() | 0) < (((info.ExponentDigits | 0) - (info.ExponentTailSharpDigits | 0)) | 0)) {
              $S08().CallVirtual("Insert", null, sb_exp, 0, "0");
            }
            var flag10 = expPositive &&
            !info.ExponentNegativeSignOnly;
            if (flag10) {
              $S09().CallVirtual("Insert", null, sb_exp, 0, nfi.get_PositiveSign());
            } else {
              var flag11 = !expPositive;
              if (flag11) {
                $S09().CallVirtual("Insert", null, sb_exp, 0, nfi.get_NegativeSign());
              }
            }
          } else {
            var flag12 = (sb_int.get_Length() | 0) < (((info.IntegerDigits | 0) - (info.IntegerHeadSharpDigits | 0)) | 0);
            if (flag12) {
              $S07().CallVirtual("Insert", null, sb_int, 0, "0", (((((info.IntegerDigits | 0) - (info.IntegerHeadSharpDigits | 0)) | 0) - (sb_int.get_Length() | 0)) | 0));
            }
            var flag13 = ((info.IntegerDigits | 0) === (info.IntegerHeadSharpDigits | 0)) &&
            $thisType.IsZeroOnly(sb_int);
            if (flag13) {
              sb_int.Remove(0, sb_int.get_Length());
            }
          }
          $thisType.ZeroTrimEnd(sb_dec, true);

          while ((sb_dec.get_Length() | 0) < (((info.DecimalDigits | 0) - (info.DecimalTailSharpDigits | 0)) | 0)) {
            $S04().CallVirtual("Append", null, sb_dec, "0");
          }
          var flag14 = (sb_dec.get_Length() | 0) > (info.DecimalDigits | 0);
          if (flag14) {
            sb_dec.Remove(info.DecimalDigits, (((sb_dec.get_Length() | 0) - (info.DecimalDigits | 0)) | 0));
          }
          result = info.Format(
            format,
            offset.get(),
            length.get(),
            nfi,
            this._positive,
            sb_int,
            sb_dec,
            sb_exp
          );
        }
        return result;
      };

      function NumberFormatter_FormatDecimal (precision, nfi) {
        var flag = (precision | 0) < (this._digitsLen | 0);
        if (flag) {
          precision = (this._digitsLen | 0);
        }
        var flag2 = (precision | 0) === 0;
        if (flag2) {
          var result = "0";
        } else {
          this.ResetCharBuf((((precision | 0) + 1) | 0));
          if (!this._positive) {
            $S01().CallVirtual("Append", null, this, nfi.get_NegativeSign());
          }
          this.AppendDigits(0, precision);
          result = $S05().Construct(this._cbuf, 0, this._ind);
        }
        return result;
      };

      function NumberFormatter_FormatExponential$0F (precision, nfi) {
        var flag = (precision | 0) === -1;
        if (flag) {
          precision = 6;
        }
        this.RoundPos((((precision | 0) + 1) | 0));
        return this.FormatExponential(precision, nfi, 3);
      };

      function NumberFormatter_FormatExponential$10 (precision, nfi, expDigits) {
        var decDigits = (this._decPointPos | 0);
        var digits = (this._digitsLen | 0);
        var exponent = ((decDigits - 1) | 0);
        var num = this._decPointPos = 1;
        this.ResetCharBuf((((precision | 0) + 8) | 0));
        if (!this._positive) {
          $S01().CallVirtual("Append", null, this, nfi.get_NegativeSign());
        }
        this.AppendOneDigit(((digits - 1) | 0));
        if ((precision | 0) > 0) {
          $S01().CallVirtual("Append", null, this, nfi.get_NumberDecimalSeparator());
          this.AppendDigits(((((digits - (precision | 0)) | 0) - 1) | 0), ((digits - (this._decPointPos | 0)) | 0));
        }
        this.AppendExponent(nfi, exponent, expDigits);
        return $S05().Construct(this._cbuf, 0, this._ind);
      };

      function NumberFormatter_FormatFixedPoint (precision, nfi) {
        var flag = (precision | 0) === -1;
        if (flag) {
          precision = (nfi.get_NumberDecimalDigits() | 0);
        }
        this.RoundDecimal(precision);
        this.ResetCharBuf((((((this.get_IntegerDigits() | 0) + (precision | 0)) | 0) + 2) | 0));
        if (!this._positive) {
          $S01().CallVirtual("Append", null, this, nfi.get_NegativeSign());
        }
        this.AppendIntegerString(this.get_IntegerDigits());
        var flag3 = (precision | 0) > 0;
        if (flag3) {
          $S01().CallVirtual("Append", null, this, nfi.get_NumberDecimalSeparator());
          this.AppendDecimalString(precision);
        }
        return $S05().Construct(this._cbuf, 0, this._ind);
      };

      function NumberFormatter_FormatGeneral (precision, nfi) {
        var flag = (precision | 0) === -1;
        if (flag) {
          var enableExp = this.get_IsFloatingSource();
          precision = (this._defPrecision | 0);
        } else {
          enableExp = true;
          var flag2 = (precision | 0) === 0;
          if (flag2) {
            precision = (this._defPrecision | 0);
          }
          this.RoundPos(precision);
        }
        var intDigits = (this._decPointPos | 0);
        var digits = (this._digitsLen | 0);
        var decDigits = ((digits - intDigits) | 0);
        var flag3 = ((intDigits > (precision | 0)) ||
          (intDigits <= -4)) & enableExp;
        if (flag3) {
          var result = this.FormatExponential(((digits - 1) | 0), nfi, 2);
        } else {
          var flag4 = decDigits < 0;
          if (flag4) {
            decDigits = 0;
          }
          var flag5 = intDigits < 0;
          if (flag5) {
            intDigits = 0;
          }
          this.ResetCharBuf(((((decDigits + intDigits) | 0) + 3) | 0));
          if (!this._positive) {
            $S01().CallVirtual("Append", null, this, nfi.get_NegativeSign());
          }
          var flag7 = intDigits === 0;
          if (flag7) {
            $S00().CallVirtual("Append", null, this, "0");
          } else {
            this.AppendDigits(((digits - intDigits) | 0), digits);
          }
          var flag8 = decDigits > 0;
          if (flag8) {
            $S01().CallVirtual("Append", null, this, nfi.get_NumberDecimalSeparator());
            this.AppendDigits(0, decDigits);
          }
          result = $S05().Construct(this._cbuf, 0, this._ind);
        }
        return result;
      };

      function NumberFormatter_FormatHexadecimal (precision) {
        var size = ($T0E().Max(precision, this._decPointPos) | 0);
        this.ResetCharBuf(size);
        this._ind = size;
        var val = $T0F().op_BitwiseOr(
          $T0F().FromNumber(this._val1),
          $T0F().op_LeftShift($T0F().FromNumber(this._val2), 32)
        );

        while (size > 0) {
          var arg_5D_0 = this._cbuf;
          var num = ((size - 1) | 0);
          size = num;
          arg_5D_0[num] = (
            this._specifierIsUpper
               ? $thisType.DigitUpperTable
               : $thisType.DigitLowerTable)
          [(($T0F().op_BitwiseAnd(val, $T0F().Create(15, 0, 0))).ToNumber(4294967295, false) | 0)];
          val = $T0F().op_RightShift(val, 4);
        }
        return $S05().Construct(this._cbuf, 0, this._ind);
      };

      function NumberFormatter_FormatNumber (precision, nfi) {
        precision = ((
          ((precision | 0) >= 0)
             ? precision
             : nfi.get_NumberDecimalDigits())
         | 0);
        this.ResetCharBuf(((Math.imul(this.get_IntegerDigits(), 3) + (precision | 0)) | 0));
        this.RoundDecimal(precision);
        if (!this._positive) {
          switch (nfi.get_NumberNegativePattern()) {
            case 0:
              $S00().CallVirtual("Append", null, this, "(");
              break;

            case 1:
              $S01().CallVirtual("Append", null, this, nfi.get_NegativeSign());
              break;

            case 2:
              $S01().CallVirtual("Append", null, this, nfi.get_NegativeSign());
              $S00().CallVirtual("Append", null, this, " ");
              break;

          }
        }
        this.AppendIntegerStringWithGroupSeparator(
          nfi.get_NumberGroupSizes(),
          nfi.get_NumberGroupSeparator()
        );
        var flag2 = (precision | 0) > 0;
        if (flag2) {
          $S01().CallVirtual("Append", null, this, nfi.get_NumberDecimalSeparator());
          this.AppendDecimalString(precision);
        }
        if (!this._positive) {
          switch (nfi.get_NumberNegativePattern()) {
            case 0:
              $S00().CallVirtual("Append", null, this, ")");
              break;

            case 3:
              $S01().CallVirtual("Append", null, this, nfi.get_NegativeSign());
              break;

            case 4:
              $S00().CallVirtual("Append", null, this, " ");
              $S01().CallVirtual("Append", null, this, nfi.get_NegativeSign());
              break;

          }
        }
        return $S05().Construct(this._cbuf, 0, this._ind);
      };

      function NumberFormatter_FormatPercent (precision, nfi) {
        precision = ((
          ((precision | 0) >= 0)
             ? precision
             : nfi.get_PercentDecimalDigits())
         | 0);
        this.Multiply10(2);
        this.RoundDecimal(precision);
        this.ResetCharBuf(((((Math.imul(this.get_IntegerDigits(), 2) + (precision | 0)) | 0) + 16) | 0));
        var positive = this._positive;
        if (positive) {
          var flag = (nfi.get_PercentPositivePattern() | 0) === 2;
          if (flag) {
            $S01().CallVirtual("Append", null, this, nfi.get_PercentSymbol());
          }
        } else {
          switch (nfi.get_PercentNegativePattern()) {
            case 0:
              $S01().CallVirtual("Append", null, this, nfi.get_NegativeSign());
              break;

            case 1:
              $S01().CallVirtual("Append", null, this, nfi.get_NegativeSign());
              break;

            case 2:
              $S01().CallVirtual("Append", null, this, nfi.get_NegativeSign());
              $S01().CallVirtual("Append", null, this, nfi.get_PercentSymbol());
              break;

          }
        }
        this.AppendIntegerStringWithGroupSeparator(
          nfi.get_PercentGroupSizes(),
          nfi.get_PercentGroupSeparator()
        );
        var flag2 = (precision | 0) > 0;
        if (flag2) {
          $S01().CallVirtual("Append", null, this, nfi.get_PercentDecimalSeparator());
          this.AppendDecimalString(precision);
        }
        var positive2 = this._positive;
        if (positive2) {
          var percentPositivePattern = (nfi.get_PercentPositivePattern() | 0);
          if (percentPositivePattern !== 0) {
            if (percentPositivePattern === 1) {
              $S01().CallVirtual("Append", null, this, nfi.get_PercentSymbol());
            }
          } else {
            $S00().CallVirtual("Append", null, this, " ");
            $S01().CallVirtual("Append", null, this, nfi.get_PercentSymbol());
          }
        } else {
          var percentNegativePattern = (nfi.get_PercentNegativePattern() | 0);
          if (percentNegativePattern !== 0) {
            if (percentNegativePattern === 1) {
              $S01().CallVirtual("Append", null, this, nfi.get_PercentSymbol());
            }
          } else {
            $S00().CallVirtual("Append", null, this, " ");
            $S01().CallVirtual("Append", null, this, nfi.get_PercentSymbol());
          }
        }
        return $S05().Construct(this._cbuf, 0, this._ind);
      };

      function NumberFormatter_FormatRoundtrip$11 (origval, nfi) {
        var nfc = this.GetClone();
        var flag = (+origval >= -1.79769313486231E+308) &&
        (+origval <= 1.79769313486231E+308);
        if (flag) {
          var shortRep = this.FormatGeneral(this._defPrecision, nfi);
          var flag2 = +origval === +$S0A().CallStatic($T10(), "Parse", null, shortRep, nfi);
          if (flag2) {
            var result = shortRep;
            return result;
          }
        }
        result = nfc.FormatGeneral((((this._defPrecision | 0) + 2) | 0), nfi);
        return result;
      };

      function NumberFormatter_FormatRoundtrip$12 (origval, nfi) {
        var nfc = this.GetClone();
        var shortRep = this.FormatGeneral(this._defPrecision, nfi);
        var flag = +origval === +$S0B().CallStatic($T11(), "Parse", null, shortRep, nfi);
        if (flag) {
          var result = shortRep;
        } else {
          result = nfc.FormatGeneral((((this._defPrecision | 0) + 2) | 0), nfi);
        }
        return result;
      };

      function NumberFormatter_get_DecimalDigits () {
        return (
          ((this._digitsLen | 0) > (this._decPointPos | 0))
             ? (((this._digitsLen | 0) - (this._decPointPos | 0)) | 0)
             : 0)
        ;
      };

      function NumberFormatter_get_IntegerDigits () {
        return (
          ((this._decPointPos | 0) > 0)
             ? this._decPointPos
             : 1)
        ;
      };

      function NumberFormatter_get_IsFloatingSource () {
        return (((this._defPrecision | 0) === 15) || ((this._defPrecision | 0) === 7));
      };

      function NumberFormatter_get_IsZero () {
        return ((this._digitsLen | 0) === 0);
      };

      function NumberFormatter_get_IsZeroInteger () {
        return (((this._digitsLen | 0) === 0) || ((this._decPointPos | 0) <= 0));
      };

      function NumberFormatter_GetClone () {
        return $thisType.$Cast($T12().prototype.MemberwiseClone.call(this));
      };

      function NumberFormatter_GetFormatterTables (/* ref */ MantissaBitsTable, /* ref */ TensExponentTable, /* ref */ DigitLowerTable, /* ref */ DigitUpperTable, /* ref */ TenPowersList, /* ref */ DecHexDigits) {
        MantissaBitsTable.set(JSIL.Array.New($T0F(), [$T0F().Create(9308944, 9111419, 16189), $T0F().Create(1840673, 1445623, 32379), $T0F().Create(7079021, 13710897, 6475), $T0F().Create(14158042, 10644578, 12951), $T0F().Create(11538868, 4511941, 25903), $T0F().Create(6300520, 9023883, 51806), $T0F().Create(14681876, 5160219, 10361), $T0F().Create(12586537, 10320439, 20722), $T0F().Create(8395859, 3863663, 41445), $T0F().Create(11745501, 772732, 8289), $T0F().Create(6713786, 1545465, 16578), $T0F().Create(13427573, 3090930, 33156), $T0F().Create(6040957, 3973629, 6631), $T0F().Create(12081915, 7947258, 13262), $T0F().Create(7386615, 15894517, 26524), $T0F().Create(14773231, 15011818, 53049), $T0F().Create(9665532, 16424136, 10609), $T0F().Create(2553849, 16071057, 21219), $T0F().Create(5107699, 15364898, 42439), $T0F().Create(7732426, 16494752, 8487), $T0F().Create(15464852, 16212288, 16975), $T0F().Create(14152488, 15647361, 33951), $T0F().Create(9541384, 6484915, 6790), $T0F().Create(2305552, 12969831, 13580), $T0F().Create(4611104, 9162446, 27161), $T0F().Create(9222209, 1547676, 54323), $T0F().Create(15266214, 10375864, 10864), $T0F().Create(13755213, 3974513, 21729), $T0F().Create(10733210, 7949027, 43458), $T0F().Create(2146642, 11656135, 8691), $T0F().Create(4293284, 6535054, 17383), $T0F().Create(8586568, 13070108, 34766), $T0F().Create(15139086, 5969464, 6953), $T0F().Create(13500957, 11938929, 13906), $T0F().Create(10224698, 7100643, 27813), $T0F().Create(3672180, 14201287, 55626), $T0F().Create(10800765, 6195700, 11125), $T0F().Create(4824315, 12391401, 22250), $T0F().Create(9648630, 8005586, 44501), $T0F().Create(8640612, 4956560, 8900), $T0F().Create(504008, 9913121, 17800), $T0F().Create(1008017, 3049026, 35601), $T0F().Create(6912489, 3965248, 7120), $T0F().Create(13824979, 7930496, 14240), $T0F().Create(10872743, 15860993, 28480), $T0F().Create(4968271, 14944771, 56961), $T0F().Create(7704540, 6344397, 11392), $T0F().Create(15409081, 12688794, 22784), $T0F().Create(14040947, 8600373, 45569), $T0F().Create(9519075, 15141847, 9113), $T0F().Create(2260935, 13506479, 18227), $T0F().Create(4521871, 10235742, 36455), $T0F().Create(7615260, 2047148, 7291), $T0F().Create(15230521, 4094296, 14582), $T0F().Create(13683826, 8188593, 29164), $T0F().Create(10590437, 16377187, 58328), $T0F().Create(2118087, 13341767, 11665), $T0F().Create(4236174, 9906318, 23331), $T0F().Create(8472349, 3035420, 46663), $T0F().Create(11760799, 10673413, 9332), $T0F().Create(6744383, 4569611, 18665), $T0F().Create(13488766, 9139222, 37330), $T0F().Create(9408639, 1827844, 7466), $T0F().Create(2040063, 3655689, 14932), $T0F().Create(4080126, 7311378, 29864), $T0F().Create(8160253, 14622756, 59728), $T0F().Create(15053823, 12990880, 11945), $T0F().Create(13330430, 9204545, 23891), $T0F().Create(9883645, 1631875, 47783), $T0F().Create(12043058, 10392704, 9556), $T0F().Create(7308901, 4008193, 19113), $T0F().Create(14617803, 8016386, 38226), $T0F().Create(9634447, 4958720, 7645), $T0F().Create(2491678, 9917441, 15290), $T0F().Create(4983356, 3057666, 30581), $T0F().Create(9966712, 6115332, 61162), $T0F().Create(15415115, 7933952, 12232), $T0F().Create(14053014, 15867905, 24464), $T0F().Create(11328812, 14958595, 48929), $T0F().Create(15687535, 16413491, 9785), $T0F().Create(14597854, 16049767, 19571), $T0F().Create(12418493, 15322319, 39143), $T0F().Create(9194585, 13130793, 7828), $T0F().Create(1611954, 9484371, 15657), $T0F().Create(3223908, 2191526, 31315), $T0F().Create(6447816, 4383052, 62630), $T0F().Create(8000449, 876610, 12526), $T0F().Create(16000899, 1753220, 25052), $T0F().Create(15224583, 3506441, 50104), $T0F().Create(3044916, 14123061, 10020), $T0F().Create(6089833, 11468906, 20041), $T0F().Create(12179666, 6160596, 40083), $T0F().Create(15857706, 11298448, 8016), $T0F().Create(14938196, 5819681, 16033), $T0F().Create(13099176, 11639363, 32066), $T0F().Create(9421136, 6501511, 64133), $T0F().Create(15306000, 11366631, 12826), $T0F().Create(13834784, 5956047, 25653), $T0F().Create(10892352, 11912095, 51306), $T0F().Create(5533913, 5737862, 10261), $T0F().Create(11067827, 11475724, 20522), $T0F().Create(5358438, 6174233, 41045), $T0F().Create(11138017, 1234846, 8209), $T0F().Create(5498818, 2469693, 16418), $T0F().Create(10997637, 4939386, 32836), $T0F().Create(8910413, 4343320, 6567), $T0F().Create(1043611, 8686641, 13134), $T0F().Create(2087223, 596066, 26269), $T0F().Create(4174447, 1192132, 52538), $T0F().Create(834889, 10304756, 10507), $T0F().Create(1669778, 3832296, 21015), $T0F().Create(3339557, 7664592, 42030), $T0F().Create(7378797, 1532918, 8406), $T0F().Create(14757595, 3065836, 16812), $T0F().Create(12737975, 6131673, 33624), $T0F().Create(9258481, 14648107, 6724), $T0F().Create(1739747, 12518999, 13449), $T0F().Create(3479494, 8260782, 26899), $T0F().Create(6958988, 16521564, 53798), $T0F().Create(8102684, 13370642, 10759), $T0F().Create(16205368, 9964068, 21519), $T0F().Create(15633520, 3150921, 43039), $T0F().Create(3126704, 14051957, 8607), $T0F().Create(6253408, 11326698, 17215), $T0F().Create(12506816, 5876180, 34431), $T0F().Create(5856806, 4530679, 6886), $T0F().Create(11713612, 9061358, 13772), $T0F().Create(6650009, 1345501, 27545), $T0F().Create(13300019, 2691002, 55090), $T0F().Create(9370890, 538200, 11018), $T0F().Create(1964564, 1076401, 22036), $T0F().Create(3929129, 2152802, 44072), $T0F().Create(14207598, 7141446, 8814), $T0F().Create(11637981, 14282893, 17628), $T0F().Create(6498746, 11788571, 35257), $T0F().Create(11366078, 9068600, 7051), $T0F().Create(5954941, 1359985, 14103), $T0F().Create(11909883, 2719970, 28206), $T0F().Create(7042551, 5439941, 56412), $T0F().Create(11474839, 7798874, 11282), $T0F().Create(6172463, 15597749, 22564), $T0F().Create(12344927, 14418282, 45129), $T0F().Create(5824428, 16305429, 9025), $T0F().Create(11648857, 15833642, 18051), $T0F().Create(6520498, 14890069, 36103), $T0F().Create(8014986, 13044343, 7220), $T0F().Create(16029972, 9311470, 14441), $T0F().Create(15282728, 1845725, 28883), $T0F().Create(13788241, 3691451, 57766), $T0F().Create(9468534, 4093733, 11553), $T0F().Create(2159853, 8187467, 23106), $T0F().Create(4319706, 16374934, 46212), $T0F().Create(4219384, 9985873, 9242), $T0F().Create(8438769, 3194530, 18485), $T0F().Create(100322, 6389061, 36970), $T0F().Create(3375507, 1277812, 7394), $T0F().Create(6751015, 2555624, 14788), $T0F().Create(13502030, 5111248, 29576), $T0F().Create(10226845, 10222497, 59152), $T0F().Create(15467141, 8755385, 11830), $T0F().Create(14157067, 733555, 23661), $T0F().Create(11536919, 1467111, 47322), $T0F().Create(12373713, 7004308, 9464), $T0F().Create(7970210, 14008617, 18928), $T0F().Create(15940421, 11240018, 37857), $T0F().Create(3188084, 8958890, 7571), $T0F().Create(6376168, 1140564, 15143), $T0F().Create(12752337, 2281128, 30286), $T0F().Create(8727458, 4562257, 60572), $T0F().Create(15167264, 7623337, 12114), $T0F().Create(13557313, 15246675, 24228), $T0F().Create(10337410, 13716135, 48457), $T0F().Create(8778368, 9454113, 9691), $T0F().Create(779520, 2131011, 19383), $T0F().Create(1559041, 4262022, 38766), $T0F().Create(10378137, 4207847, 7753), $T0F().Create(3979059, 8415695, 15506), $T0F().Create(7958119, 54174, 31013), $T0F().Create(15916239, 108348, 62026), $T0F().Create(16605020, 3377112, 12405), $T0F().Create(16432825, 6754225, 24810), $T0F().Create(16088434, 13508451, 49620), $T0F().Create(6573130, 2701690, 9924), $T0F().Create(13146260, 5403380, 19848), $T0F().Create(9515304, 10806761, 39696), $T0F().Create(8613947, 5516795, 7939), $T0F().Create(450678, 11033591, 15878), $T0F().Create(901357, 5289966, 31757), $T0F().Create(1802714, 10579932, 63514), $T0F().Create(3715986, 15537759, 12702), $T0F().Create(7431972, 14298302, 25405), $T0F().Create(14863944, 11819388, 50811), $T0F().Create(16394561, 5719320, 10162), $T0F().Create(16011907, 11438641, 20324), $T0F().Create(15246598, 6100067, 40649), $T0F().Create(6404762, 14641786, 8129), $T0F().Create(12809525, 12506356, 16259), $T0F().Create(8841835, 8235497, 32519), $T0F().Create(5123810, 15068872, 6503), $T0F().Create(10247620, 13360528, 13007), $T0F().Create(3718025, 9943841, 26015), $T0F().Create(7436051, 3110466, 52031), $T0F().Create(8198096, 3977536, 10406), $T0F().Create(16396193, 7955072, 20812), $T0F().Create(16015170, 15910145, 41624), $T0F().Create(16624806, 16603801, 8324), $T0F().Create(16472397, 16430387, 16649), $T0F().Create(16167579, 16083559, 33299), $T0F().Create(13299845, 16638484, 6659), $T0F().Create(9822475, 16499753, 13319), $T0F().Create(2867734, 16222291, 26639), $T0F().Create(5735468, 15667366, 53279), $T0F().Create(1147093, 16555246, 10655), $T0F().Create(2294187, 16333276, 21311), $T0F().Create(4588374, 15889336, 42623), $T0F().Create(14339447, 13244196, 8524), $T0F().Create(11901679, 9711177, 17049), $T0F().Create(7026142, 2645139, 34099), $T0F().Create(11471558, 13950800, 6819), $T0F().Create(6165900, 11124385, 13639), $T0F().Create(12331800, 5471554, 27279), $T0F().Create(7886385, 10943109, 54558), $T0F().Create(8288163, 12254951, 10911), $T0F().Create(16576326, 7732686, 21823), $T0F().Create(16375437, 15465373, 43646), $T0F().Create(16696860, 6448517, 8729), $T0F().Create(16616504, 12897035, 17458), $T0F().Create(16455793, 9016855, 34917), $T0F().Create(10002045, 8514257, 6983), $T0F().Create(3226874, 251299, 13967), $T0F().Create(6453748, 502598, 27934), $T0F().Create(12907496, 1005196, 55868), $T0F().Create(16003272, 10267368, 11173), $T0F().Create(15229328, 3757521, 22347), $T0F().Create(13681440, 7515043, 44694), $T0F().Create(9447174, 14924781, 8938), $T0F().Create(2117133, 13072347, 17877), $T0F().Create(4234266, 9367478, 35755), $T0F().Create(10913182, 1873495, 7151), $T0F().Create(5049149, 3746991, 14302), $T0F().Create(10098299, 7493982, 28604), $T0F().Create(3419382, 14987965, 57208), $T0F().Create(10750206, 13063922, 11441), $T0F().Create(4723196, 9350629, 22883), $T0F().Create(9446392, 1924042, 45767), $T0F().Create(15311051, 7095694, 9153), $T0F().Create(13844886, 14191389, 18306), $T0F().Create(10912557, 11605563, 36613), $T0F().Create(5537954, 12387442, 7322), $T0F().Create(11075909, 7997668, 14645), $T0F().Create(5374602, 15995337, 29290), $T0F().Create(10749205, 15213458, 58581), $T0F().Create(15571613, 6398134, 11716), $T0F().Create(14366011, 12796269, 23432), $T0F().Create(11954807, 8815323, 46865), $T0F().Create(12457291, 1763064, 9373), $T0F().Create(8137366, 3526129, 18746), $T0F().Create(16274732, 7052258, 37492), $T0F().Create(3254946, 8121338, 7498), $T0F().Create(6509892, 16242676, 14996), $T0F().Create(13019785, 15708136, 29993), $T0F().Create(9262355, 14639057, 59987), $T0F().Create(15274243, 9638697, 11997), $T0F().Create(13771271, 2500179, 23995), $T0F().Create(10765327, 5000359, 47990), $T0F().Create(15574838, 1000071, 9598), $T0F().Create(14372460, 2000143, 19196), $T0F().Create(11967705, 4000287, 38392), $T0F().Create(15815313, 7510943, 7678), $T0F().Create(14853411, 15021887, 15356), $T0F().Create(12929607, 13266559, 30713), $T0F().Create(9081998, 9755903, 61427), $T0F().Create(1816399, 8662067, 12285), $T0F().Create(3632799, 546918, 24571), $T0F().Create(7265599, 1093836, 49142), $T0F().Create(11519449, 6929653, 9828), $T0F().Create(6261682, 13859307, 19656), $T0F().Create(12523365, 10941398, 39313), $T0F().Create(5860116, 12254609, 7862), $T0F().Create(11720232, 7732002, 15725), $T0F().Create(6663249, 15464005, 31450), $T0F().Create(13326498, 14150794, 62901), $T0F().Create(2665299, 6185602, 12580), $T0F().Create(5330599, 12371204, 25160), $T0F().Create(10661198, 7965192, 50321), $T0F().Create(12198569, 4948481, 10064), $T0F().Create(7619922, 9896963, 20128), $T0F().Create(15239845, 3016710, 40257), $T0F().Create(9758855, 7314228, 8051), $T0F().Create(2740495, 14628457, 16102), $T0F().Create(5480990, 12479698, 32205), $T0F().Create(11162527, 2495939, 6441), $T0F().Create(5547839, 4991879, 12882), $T0F().Create(11095678, 9983758, 25764), $T0F().Create(5414140, 3190301, 51529), $T0F().Create(1082828, 14059833, 10305), $T0F().Create(2165656, 11342450, 20611), $T0F().Create(4331312, 5907684, 41223), $T0F().Create(7577148, 11247866, 8244), $T0F().Create(15154297, 5718516, 16489), $T0F().Create(13531379, 11437033, 32978), $T0F().Create(6061719, 12353736, 6595), $T0F().Create(12123438, 7930256, 13191), $T0F().Create(7469660, 15860513, 26382), $T0F().Create(14939321, 14943810, 52765), $T0F().Create(2987864, 2988762, 10553), $T0F().Create(5975728, 5977524, 21106), $T0F().Create(11951456, 11955048, 42212), $T0F().Create(2390291, 9101896, 8442), $T0F().Create(4780582, 1426576, 16885), $T0F().Create(9561165, 2853152, 33770), $T0F().Create(8623119, 570630, 6754), $T0F().Create(469023, 1141261, 13508), $T0F().Create(938046, 2282522, 27016), $T0F().Create(1876092, 4565044, 54032), $T0F().Create(3730661, 7623895, 10806), $T0F().Create(7461323, 15247790, 21612), $T0F().Create(14922646, 13718364, 43225), $T0F().Create(16406302, 2743672, 8645), $T0F().Create(16035388, 5487345, 17290), $T0F().Create(15293560, 10974691, 34580), $T0F().Create(6414155, 2194938, 6916), $T0F().Create(12828310, 4389876, 13832), $T0F().Create(8879405, 8779753, 27664), $T0F().Create(981594, 782291, 55329), $T0F().Create(196318, 13578231, 11065), $T0F().Create(392637, 10379246, 22131), $T0F().Create(785275, 3981276, 44263), $T0F().Create(13578827, 10862584, 8852), $T0F().Create(10380439, 4947953, 17705), $T0F().Create(3983663, 9895907, 35410), $T0F().Create(7507619, 1979181, 7082), $T0F().Create(15015238, 3958362, 14164), $T0F().Create(13253260, 7916725, 28328), $T0F().Create(9729304, 15833451, 56656), $T0F().Create(8656747, 6522133, 11331), $T0F().Create(536278, 13044267, 22662), $T0F().Create(1072557, 9311318, 45325), $T0F().Create(10280841, 1862263, 9065), $T0F().Create(3784466, 3724527, 18130), $T0F().Create(7568932, 7449054, 36260), $T0F().Create(14935559, 1489810, 7252), $T0F().Create(13093902, 2979621, 14504), $T0F().Create(9410589, 5959243, 29008), $T0F().Create(2043962, 11918487, 58016), $T0F().Create(10475122, 5739140, 11603), $T0F().Create(4173028, 11478281, 23206), $T0F().Create(8346056, 6179346, 46413), $T0F().Create(15090984, 11302198, 9282), $T0F().Create(13404752, 5827181, 18565), $T0F().Create(10032288, 11654363, 37130), $T0F().Create(12072787, 2330872, 7426), $T0F().Create(7368358, 4661745, 14852), $T0F().Create(14736716, 9323490, 29704), $T0F().Create(12696217, 1869765, 59409), $T0F().Create(15961016, 13795725, 11881), $T0F().Create(15144816, 10814235, 23763), $T0F().Create(13512417, 4851255, 47527), $T0F().Create(9413369, 7681137, 9505), $T0F().Create(2049523, 15362275, 19010), $T0F().Create(4099047, 13947334, 38021), $T0F().Create(819809, 6144910, 7604), $T0F().Create(1639619, 12289820, 15208), $T0F().Create(3279238, 7802424, 30417), $T0F().Create(6558476, 15604848, 60834), $T0F().Create(8022581, 16542742, 12166), $T0F().Create(16045163, 16308268, 24333), $T0F().Create(15313110, 15839321, 48667), $T0F().Create(13128951, 9878750, 9733), $T0F().Create(9480687, 2980285, 19467), $T0F().Create(2184158, 5960571, 38934), $T0F().Create(436831, 14613887, 7786), $T0F().Create(873663, 12450558, 15573), $T0F().Create(1747327, 8123900, 31147), $T0F().Create(3494654, 16247800, 62294), $T0F().Create(14120703, 16671332, 12458), $T0F().Create(11464191, 16565449, 24917), $T0F().Create(6151166, 16353683, 49835), $T0F().Create(11296562, 3270736, 9967), $T0F().Create(5815909, 6541473, 19934), $T0F().Create(11631819, 13082946, 39868), $T0F().Create(15748136, 12682918, 7973), $T0F().Create(14719057, 8588621, 15947), $T0F().Create(12660898, 400027, 31895), $T0F().Create(8544581, 800055, 63790), $T0F().Create(1708916, 160011, 12758), $T0F().Create(3417832, 320022, 25516), $T0F().Create(6835665, 640044, 51032), $T0F().Create(4722576, 6838895, 10206), $T0F().Create(9445152, 13677790, 20412), $T0F().Create(2113089, 10578365, 40825), $T0F().Create(422617, 2115673, 8165), $T0F().Create(845235, 4231346, 16330), $T0F().Create(1690471, 8462692, 32660), $T0F().Create(7048980, 1692538, 6532), $T0F().Create(14097961, 3385076, 13064), $T0F().Create(11418706, 6770153, 26128), $T0F().Create(6060197, 13540307, 52256), $T0F().Create(11278369, 6063504, 10451), $T0F().Create(5779522, 12127009, 20902), $T0F().Create(11559044, 7476802, 41805), $T0F().Create(9022695, 1495360, 8361), $T0F().Create(1268174, 2990721, 16722), $T0F().Create(2536348, 5981442, 33444), $T0F().Create(3862712, 14618061, 6688), $T0F().Create(7725425, 12458906, 13377), $T0F().Create(15450851, 8140596, 26755), $T0F().Create(14124487, 16281193, 53510), $T0F().Create(12891227, 3256238, 10702), $T0F().Create(9005238, 6512477, 21404), $T0F().Create(1233260, 13024955, 42808), $T0F().Create(10312981, 12671320, 8561), $T0F().Create(3848747, 8565425, 17123), $T0F().Create(7697494, 353634, 34247), $T0F().Create(4894942, 6781613, 6849), $T0F().Create(9789884, 13563226, 13698), $T0F().Create(2802552, 10349237, 27397), $T0F().Create(5605105, 3921258, 54795), $T0F().Create(11187350, 784251, 10959), $T0F().Create(5597485, 1568503, 21918), $T0F().Create(11194970, 3137006, 43836), $T0F().Create(8949880, 3982844, 8767), $T0F().Create(1122545, 7965689, 17534), $T0F().Create(2245090, 15931378, 35068), $T0F().Create(3804461, 13252605, 7013), $T0F().Create(7608922, 9727994, 14027), $T0F().Create(15217845, 2678772, 28055), $T0F().Create(13658474, 5357545, 56110), $T0F().Create(2731694, 1071509, 11222), $T0F().Create(5463389, 2143018, 22444), $T0F().Create(10926779, 4286036, 44888), $T0F().Create(15607128, 10923536, 8977), $T0F().Create(14437041, 5069857, 17955), $T0F().Create(12096866, 10139715, 35910), $T0F().Create(2419373, 2027943, 7182), $T0F().Create(4838746, 4055886, 14364), $T0F().Create(9677493, 8111772, 28728), $T0F().Create(2577770, 16223545, 57456), $T0F().Create(3870997, 6600152, 11491), $T0F().Create(7741994, 13200304, 22982), $T0F().Create(15483989, 9623392, 45965), $T0F().Create(9807684, 1924678, 9193), $T0F().Create(2838152, 3849357, 18386), $T0F().Create(5676304, 7698714, 36772), $T0F().Create(4490704, 8250629, 7354), $T0F().Create(8981408, 16501258, 14708), $T0F().Create(1185600, 16225301, 29417), $T0F().Create(2371201, 15673386, 58835), $T0F().Create(3829683, 3134677, 11767), $T0F().Create(7659367, 6269354, 23534), $T0F().Create(15318734, 12538708, 47068), $T0F().Create(6419190, 12574071, 9413), $T0F().Create(12838380, 8370926, 18827), $T0F().Create(8899544, 16741853, 37654), $T0F().Create(8490795, 16770143, 7530), $T0F().Create(204374, 16763071, 15061), $T0F().Create(408748, 16748926, 30123), $T0F().Create(817497, 16720636, 60247), $T0F().Create(10229829, 10055013, 12049), $T0F().Create(3682442, 3332811, 24099), $T0F().Create(7364884, 6665622, 48198), $T0F().Create(1472976, 11399454, 9639), $T0F().Create(2945953, 6021692, 19279), $T0F().Create(5891907, 12043384, 38558), $T0F().Create(7889267, 12475006, 7711), $T0F().Create(15778535, 8172796, 15423), $T0F().Create(14779855, 16345593, 30846), $T0F().Create(12782495, 15913971, 61693), $T0F().Create(15978271, 13249123, 12338), $T0F().Create(15179327, 9721031, 24677), $T0F().Create(13581439, 2664847, 49355), $T0F().Create(9427174, 532969, 9871), $T0F().Create(2077132, 1065939, 19742), $T0F().Create(4154265, 2131878, 39484), $T0F().Create(7541739, 13848148, 7896), $T0F().Create(15083478, 10919080, 15793), $T0F().Create(13389741, 5060945, 31587), $T0F().Create(10002267, 10121891, 63174), $T0F().Create(2000453, 15446151, 12634), $T0F().Create(4000907, 14115086, 25269), $T0F().Create(8001814, 11452956, 50539), $T0F().Create(1600362, 15712364, 10107), $T0F().Create(3200725, 14647512, 20215), $T0F().Create(6401451, 12517808, 40431), $T0F().Create(14702063, 5859004, 8086), $T0F().Create(12626910, 11718009, 16172), $T0F().Create(8476604, 6658803, 32345), $T0F().Create(11761650, 1331760, 6469), $T0F().Create(6746084, 2663521, 12938), $T0F().Create(13492169, 5327042, 25876), $T0F().Create(10207123, 10654085, 51752), $T0F().Create(8752311, 8841703, 10350), $T0F().Create(727406, 906191, 20701), $T0F().Create(1454812, 1812382, 41402), $T0F().Create(13712735, 7073362, 8280), $T0F().Create(10648254, 14146725, 16560), $T0F().Create(4519293, 11516235, 33121), $T0F().Create(4259301, 5658690, 6624), $T0F().Create(8518603, 11317380, 13248), $T0F().Create(259991, 5857545, 26497), $T0F().Create(519982, 11715090, 52994), $T0F().Create(13525769, 15764790, 10598), $T0F().Create(10274322, 14752365, 21197), $T0F().Create(3771429, 12727515, 42395), $T0F().Create(754285, 2545503, 8479), $T0F().Create(1508571, 5091006, 16958), $T0F().Create(3017143, 10182012, 33916), $T0F().Create(10669758, 5391845, 6783), $T0F().Create(4562300, 10783691, 13566), $T0F().Create(9124601, 4790166, 27133), $T0F().Create(1471986, 9580333, 54266), $T0F().Create(13716170, 5271509, 10853), $T0F().Create(10655124, 10543019, 21706), $T0F().Create(4533032, 4308823, 43413), $T0F().Create(4262049, 10928094, 8682), $T0F().Create(8524099, 5078972, 17365), $T0F().Create(270982, 10157945, 34730), $T0F().Create(54196, 2031589, 6946), $T0F().Create(108393, 4063178, 13892), $T0F().Create(216786, 8126356, 27784), $T0F().Create(433572, 16252712, 55568), $T0F().Create(86714, 13316872, 11113), $T0F().Create(173428, 9856528, 22227), $T0F().Create(346857, 2935840, 44455), $T0F().Create(69371, 587168, 8891), $T0F().Create(138743, 1174336, 17782), $T0F().Create(277486, 2348672, 35564), $T0F().Create(3410940, 13891507, 7112), $T0F().Create(6821880, 11005798, 14225), $T0F().Create(13643761, 5234380, 28451), $T0F().Create(10510307, 10468761, 56902), $T0F().Create(12168391, 8804638, 11380), $T0F().Create(7559566, 832061, 22761), $T0F().Create(15119132, 1664122, 45522), $T0F().Create(16445599, 7043710, 9104), $T0F().Create(16113982, 14087421, 18208), $T0F().Create(15450749, 11397627, 36417), $T0F().Create(16511922, 8990411, 7283), $T0F().Create(16246629, 1203607, 14567), $T0F().Create(15716042, 2407215, 29134), $T0F().Create(14654868, 4814431, 58268), $T0F().Create(16352746, 11029215, 11653), $T0F().Create(15928277, 5281215, 23307), $T0F().Create(15079338, 10562431, 46614), $T0F().Create(3015867, 15534259, 9322), $T0F().Create(6031735, 14291302, 18645), $T0F().Create(12063470, 11805388, 37291), $T0F().Create(15834466, 5716520, 7458), $T0F().Create(14891717, 11433041, 14916), $T0F().Create(13006219, 6088867, 29833), $T0F().Create(9235223, 12177735, 59666), $T0F().Create(5202487, 5790990, 11933), $T0F().Create(10404975, 11581980, 23866), $T0F().Create(4032735, 6386745, 47733), $T0F().Create(10872876, 11343678, 9546), $T0F().Create(4968537, 5910141, 19093), $T0F().Create(9937074, 11820282, 38186), $T0F().Create(12053744, 5719499, 7637), $T0F().Create(7330273, 11438999, 15274), $T0F().Create(14660546, 6100782, 30549), $T0F().Create(12543876, 12201565, 61098), $T0F().Create(12575104, 12506642, 12219), $T0F().Create(8372993, 8236069, 24439), $T0F().Create(16745987, 16472138, 48878), $T0F().Create(6704640, 13360757, 9775), $T0F().Create(13409281, 9944298, 19551), $T0F().Create(10041346, 3111381, 39103), $T0F().Create(15430042, 10688605, 7820), $T0F().Create(14082868, 4599995, 15641), $T0F().Create(11388520, 9199991, 31282), $T0F().Create(5999825, 1622767, 62565), $T0F().Create(7910851, 324553, 12513), $T0F().Create(15821702, 649106, 25026), $T0F().Create(14866189, 1298213, 50052), $T0F().Create(2973237, 6970529, 10010), $T0F().Create(5946475, 13941058, 20020), $T0F().Create(11892951, 11104900, 40041), $T0F().Create(5734033, 5576423, 8008), $T0F().Create(11468067, 11152846, 16016), $T0F().Create(6158918, 5528477, 32033), $T0F().Create(12317836, 11056954, 64066), $T0F().Create(2463567, 5566834, 12813), $T0F().Create(4927134, 11133668, 25626), $T0F().Create(9854269, 5490120, 51253), $T0F().Create(12037183, 11164353, 10250), $T0F().Create(7297150, 5551491, 20501), $T0F().Create(14594301, 11102982, 41002), $T0F().Create(16340633, 8931482, 8200), $T0F().Create(15904050, 1085749, 16401), $T0F().Create(15030884, 2171499, 32802), $T0F().Create(6361620, 7145186, 6560), $T0F().Create(12723240, 14290372, 13120), $T0F().Create(8669264, 11803529, 26241), $T0F().Create(561313, 6829843, 52483), $T0F().Create(3467705, 11432298, 10496), $T0F().Create(6935411, 6087380, 20993), $T0F().Create(13870823, 12174760, 41986), $T0F().Create(6129607, 5790395, 8397), $T0F().Create(12259215, 11580790, 16794), $T0F().Create(7741215, 6384365, 33589), $T0F().Create(14970015, 14698645, 6717), $T0F().Create(13162815, 12620075, 13435), $T0F().Create(9548415, 8462935, 26871), $T0F().Create(2319615, 148655, 53743), $T0F().Create(10530252, 10096060, 10748), $T0F().Create(4283289, 3414905, 21497), $T0F().Create(8566578, 6829810, 42994), $T0F().Create(15135088, 14787734, 8598), $T0F().Create(13492961, 12798253, 17197), $T0F().Create(10208706, 8819291, 34395), $T0F().Create(5397184, 1763858, 6879), $T0F().Create(10794368, 3527716, 13758), $T0F().Create(4811521, 7055433, 27516), $T0F().Create(9623043, 14110866, 55032), $T0F().Create(11990938, 9533059, 11006), $T0F().Create(7204660, 2288903, 22013), $T0F().Create(14409321, 4577806, 44026), $T0F().Create(9592750, 4271004, 8805), $T0F().Create(2408285, 8542009, 17610), $T0F().Create(4816570, 306802, 35221), $T0F().Create(11029643, 3416803, 7044), $T0F().Create(5282071, 6833607, 14088), $T0F().Create(10564142, 13667214, 28176), $T0F().Create(4351069, 10557213, 56353), $T0F().Create(4225657, 12177772, 11270), $T0F().Create(8451314, 7578328, 22541), $T0F().Create(125412, 15156657, 45082), $T0F().Create(13446855, 9742217, 9016), $T0F().Create(10116494, 2707219, 18033), $T0F().Create(3455773, 5414439, 36066), $T0F().Create(691154, 4438331, 7213), $T0F().Create(1382309, 8876662, 14426), $T0F().Create(2764618, 976108, 28853), $T0F().Create(5529236, 1952216, 57706), $T0F().Create(7816733, 3745886, 11541), $T0F().Create(15633467, 7491772, 23082), $T0F().Create(14489719, 14983545, 46164), $T0F().Create(16319716, 16418481, 9232), $T0F().Create(15862217, 16059747, 18465), $T0F().Create(14947218, 15342279, 36931), $T0F().Create(2989443, 6423899, 7386), $T0F().Create(5978887, 12847798, 14772), $T0F().Create(11957774, 8918380, 29545), $T0F().Create(7138333, 1059545, 59091), $T0F().Create(4783109, 3567352, 11818), $T0F().Create(9566219, 7134704, 23636), $T0F().Create(2355223, 14269409, 47272), $T0F().Create(3826487, 9564768, 9454), $T0F().Create(7652975, 2352320, 18909), $T0F().Create(15305951, 4704640, 37818), $T0F().Create(13127519, 11007257, 7563), $T0F().Create(9477823, 5237299, 15127), $T0F().Create(2178431, 10474599, 30254), $T0F().Create(4356863, 4171982, 60509), $T0F().Create(4226815, 14256169, 12101), $T0F().Create(8453631, 11735122, 24203), $T0F().Create(130047, 6693029, 48407), $T0F().Create(3381452, 8049492, 9681), $T0F().Create(6762905, 16098984, 19362), $T0F().Create(13525810, 15420752, 38725), $T0F().Create(9416048, 3084150, 7745), $T0F().Create(2054881, 6168301, 15490), $T0F().Create(4109762, 12336602, 30980), $T0F().Create(8219524, 7895988, 61961), $T0F().Create(15065677, 4934640, 12392), $T0F().Create(13354139, 9869281, 24784), $T0F().Create(9931063, 2961347, 49569), $T0F().Create(5341655, 14014042, 9913), $T0F().Create(10683311, 11250868, 19827), $T0F().Create(4589407, 5724521, 39655), $T0F().Create(4273324, 1144904, 7931), $T0F().Create(8546649, 2289808, 15862), $T0F().Create(316082, 4579617, 31724), $T0F().Create(632165, 9159234, 63448), $T0F().Create(6837319, 11898176, 12689), $T0F().Create(13674638, 7019136, 25379), $T0F().Create(10572061, 14038273, 50758), $T0F().Create(5469855, 12873984, 10151), $T0F().Create(10939711, 8970752, 20303), $T0F().Create(5102206, 1164289, 40607), $T0F().Create(4375884, 6943744, 8121), $T0F().Create(8751768, 13887488, 16242), $T0F().Create(726321, 10997761, 32485), $T0F().Create(3500707, 2199552, 6497), $T0F().Create(7001415, 4399104, 12994), $T0F().Create(14002830, 8798208, 25988), $T0F().Create(11228444, 819201, 51977), $T0F().Create(12312018, 6874726, 10395), $T0F().Create(7846820, 13749453, 20790), $T0F().Create(15693641, 10721690, 41581), $T0F().Create(6494171, 5499781, 8316), $T0F().Create(12988343, 10999562, 16632), $T0F().Create(9199470, 5221909, 33265), $T0F().Create(15261666, 1044381, 6653), $T0F().Create(13746117, 2088763, 13306), $T0F().Create(10715019, 4177527, 26612), $T0F().Create(4652822, 8355055, 53224), $T0F().Create(14352337, 15092783, 10644), $T0F().Create(11927458, 13408351, 21289), $T0F().Create(7077701, 10039487, 42579), $T0F().Create(4770983, 15429670, 8515), $T0F().Create(9541967, 14082124, 17031), $T0F().Create(2306718, 11387033, 34063), $T0F().Create(3816786, 12343736, 6812), $T0F().Create(7633573, 7910256, 13625), $T0F().Create(15267147, 15820512, 27250), $T0F().Create(13757078, 14863809, 54501), $T0F().Create(2751415, 6328205, 10900), $T0F().Create(5502831, 12656410, 21800), $T0F().Create(11005662, 8535604, 43601), $T0F().Create(2201132, 5062564, 8720), $T0F().Create(4402265, 10125128, 17440), $T0F().Create(8804530, 3473040, 34881), $T0F().Create(5116349, 4050051, 6976), $T0F().Create(10232698, 8100102, 13952), $T0F().Create(3688180, 16200205, 27904), $T0F().Create(7376361, 15623194, 55809), $T0F().Create(11541601, 16546411, 11161), $T0F().Create(6305987, 16315607, 22323), $T0F().Create(12611975, 15853998, 44647), $T0F().Create(2522395, 9881686, 8929), $T0F().Create(5044790, 2986156, 17859), $T0F().Create(10089580, 5972312, 35718), $T0F().Create(2017916, 11260792, 7143), $T0F().Create(4035832, 5744368, 14287), $T0F().Create(8071664, 11488736, 28574), $T0F().Create(16143329, 6200256, 57149), $T0F().Create(3228665, 14661824, 11429), $T0F().Create(6457331, 12546432, 22859), $T0F().Create(12914663, 8315648, 45719), $T0F().Create(9293819, 15084902, 9143), $T0F().Create(1810422, 13392589, 18287), $T0F().Create(3620844, 10007962, 36575), $T0F().Create(7435055, 2001592, 7315), $T0F().Create(14870110, 4003184, 14630), $T0F().Create(12963005, 8006369, 29260), $T0F().Create(9148794, 16012739, 58520), $T0F().Create(15251531, 3202547, 11704), $T0F().Create(13725847, 6405095, 23408), $T0F().Create(10674478, 12810191, 46816), $T0F().Create(8845782, 5917481, 9363), $T0F().Create(914348, 11834963, 18726), $T0F().Create(1828696, 6892710, 37453), $T0F().Create(10432068, 11444871, 7490), $T0F().Create(4086921, 6112527, 14981), $T0F().Create(8173843, 12225054, 29962), $T0F().Create(16347686, 7672892, 59925), $T0F().Create(9980423, 1534578, 11985), $T0F().Create(3183631, 3069157, 23970), $T0F().Create(6367263, 6138314, 47940), $T0F().Create(14695225, 1227662, 9588), $T0F().Create(12613234, 2455325, 19176), $T0F().Create(8449253, 4910651, 38352), $T0F().Create(11756180, 7693016, 7670), $T0F().Create(6735144, 15386033, 15340), $T0F().Create(13470289, 13994850, 30681), $T0F().Create(10163362, 11212485, 61363), $T0F().Create(12099002, 12308826, 12272), $T0F().Create(7420788, 7840437, 24545), $T0F().Create(14841576, 15680874, 49090), $T0F().Create(16390088, 3136174, 9818), $T0F().Create(16002960, 6272349, 19636), $T0F().Create(15228704, 12544699, 39272), $T0F().Create(6401184, 9219826, 7854), $T0F().Create(12802368, 1662436, 15709), $T0F().Create(8827520, 3324873, 31418), $T0F().Create(877824, 6649747, 62836), $T0F().Create(10241894, 4685392, 12567), $T0F().Create(3706573, 9370785, 25134), $T0F().Create(7413146, 1964354, 50269), $T0F().Create(11548958, 13814643, 10053), $T0F().Create(6320701, 10852071, 20107), $T0F().Create(12641403, 4926926, 40215), $T0F().Create(5883723, 985385, 8043), $T0F().Create(11767447, 1970770, 16086), $T0F().Create(6757679, 3941541, 32172), $T0F().Create(11417865, 7499194, 6434), $T0F().Create(6058515, 14998389, 12868), $T0F().Create(12117030, 13219562, 25737), $T0F().Create(7456844, 9661909, 51475), $T0F().Create(14913141, 1932381, 10295), $T0F().Create(13049067, 3864763, 20590), $T0F().Create(9320918, 7729527, 41180), $T0F().Create(8575070, 1545905, 8236), $T0F().Create(372924, 3091811, 16472), $T0F().Create(745848, 6183622, 32944), $T0F().Create(3504612, 14658497, 6588), $T0F().Create(7009225, 12539778, 13177), $T0F().Create(14018451, 8302340, 26355), $T0F().Create(11259686, 16604681, 52710), $T0F().Create(5607380, 3320936, 10542), $T0F().Create(11214761, 6641872, 21084), $T0F().Create(5652306, 13283745, 42168), $T0F().Create(11196790, 12723078, 8433), $T0F().Create(5616365, 8668941, 16867), $T0F().Create(11232731, 560666, 33735), $T0F().Create(5601989, 112133, 6747), $T0F().Create(11203978, 224266, 13494), $T0F().Create(5630741, 448533, 26988), $T0F().Create(11261483, 897066, 53976), $T0F().Create(8963183, 3534856, 10795), $T0F().Create(1149150, 7069713, 21590), $T0F().Create(2298300, 14139426, 43180), $T0F().Create(3815103, 2827885, 8636), $T0F().Create(7630206, 5655770, 17272), $T0F().Create(15260413, 11311540, 34544), $T0F().Create(16473855, 15684080, 6908), $T0F().Create(16170494, 14590945, 13817), $T0F().Create(15563773, 12404675, 27635), $T0F().Create(14350331, 8032135, 55271), $T0F().Create(6225509, 4961870, 11054), $T0F().Create(12451019, 9923740, 22108), $T0F().Create(8124822, 3070265, 44217), $T0F().Create(8335850, 7324939, 8843), $T0F().Create(16671701, 14649878, 17686), $T0F().Create(16566187, 12522541, 35373), $T0F().Create(16735010, 12570837, 7074), $T0F().Create(16692804, 8364459, 14149), $T0F().Create(16608393, 16728919, 28298), $T0F().Create(16439570, 16680623, 56597), $T0F().Create(3287914, 10047011, 11319), $T0F().Create(6575828, 3316806, 22639), $T0F().Create(13151656, 6633612, 45278), $T0F().Create(2630331, 11393052, 9055), $T0F().Create(5260662, 6008888, 18111), $T0F().Create(10521324, 12017776, 36222), $T0F().Create(12170594, 9114441, 7244), $T0F().Create(7563973, 1451667, 14489), $T0F().Create(15127946, 2903334, 28978), $T0F().Create(13478676, 5806669, 57956), $T0F().Create(2695735, 4516777, 11591), $T0F().Create(5391470, 9033554, 23182), $T0F().Create(10782941, 1289892, 46365), $T0F().Create(8867474, 257978, 9273), $T0F().Create(957733, 515957, 18546), $T0F().Create(1915466, 1031914, 37092), $T0F().Create(3738536, 6917269, 7418), $T0F().Create(7477073, 13834538, 14836), $T0F().Create(14954146, 10891860, 29673), $T0F().Create(13131076, 5006505, 59347), $T0F().Create(9337101, 7712187, 11869), $T0F().Create(1896987, 15424375, 23738), $T0F().Create(3793974, 14071534, 47477), $T0F().Create(4114238, 9525193, 9495), $T0F().Create(8228476, 2273170, 18991), $T0F().Create(16456952, 4546340, 37982), $T0F().Create(10002276, 7620154, 7596), $T0F().Create(3227337, 15240309, 15192), $T0F().Create(6454675, 13703402, 30385), $T0F().Create(12909351, 10629588, 60771), $T0F().Create(16003643, 5481360, 12154), $T0F().Create(15230070, 10962721, 24308), $T0F().Create(13682924, 5148227, 48617), $T0F().Create(16158357, 7740531, 9723), $T0F().Create(15539499, 15481063, 19446), $T0F().Create(14301782, 14184911, 38893), $T0F().Create(16282129, 12903311, 7778), $T0F().Create(15787042, 9029407, 15557), $T0F().Create(14796869, 1281599, 31115), $T0F().Create(12816522, 2563199, 62230), $T0F().Create(15985077, 512639, 12446), $T0F().Create(15192938, 1025279, 24892), $T0F().Create(13608661, 2050559, 49784), $T0F().Create(12788061, 13831884, 9956), $T0F().Create(8798907, 10886553, 19913), $T0F().Create(820599, 4995891, 39827), $T0F().Create(10230449, 7710064, 7965), $T0F().Create(3683682, 15420129, 15930), $T0F().Create(7367365, 14063042, 31861), $T0F().Create(14734731, 11348868, 63723), $T0F().Create(6302389, 12336103, 12744), $T0F().Create(12604779, 7894990, 25489), $T0F().Create(8432342, 15789981, 50978), $T0F().Create(15108241, 13224325, 10195), $T0F().Create(13439266, 9671435, 20391), $T0F().Create(10101317, 2565655, 40783), $T0F().Create(12086593, 10579460, 8156), $T0F().Create(7395970, 4381705, 16313), $T0F().Create(14791940, 8763410, 32626), $T0F().Create(6313831, 5108125, 6525), $T0F().Create(12627662, 10216250, 13050), $T0F().Create(8478108, 3655285, 26101), $T0F().Create(179001, 7310571, 52202), $T0F().Create(10102129, 8173000, 10440), $T0F().Create(3427043, 16346001, 20880), $T0F().Create(6854087, 15914786, 41761), $T0F().Create(8081703, 6538400, 8352), $T0F().Create(16163407, 13076800, 16704), $T0F().Create(15549599, 9376385, 33409), $T0F().Create(16531692, 15297049, 6681), $T0F().Create(16286169, 13816883, 13363), $T0F().Create(15795122, 10856551, 26727), $T0F().Create(14813029, 4935887, 53455), $T0F().Create(9673492, 987177, 10691), $T0F().Create(2569768, 1974355, 21382), $T0F().Create(5139537, 3948710, 42764), $T0F().Create(14449680, 14211514, 8552), $T0F().Create(12122144, 11645813, 17105), $T0F().Create(7467073, 6514411, 34211), $T0F().Create(8204301, 4658325, 6842), $T0F().Create(16408602, 9316650, 13684), $T0F().Create(16039988, 1856085, 27369), $T0F().Create(15302760, 3712171, 54738), $T0F().Create(16482324, 10808763, 10947), $T0F().Create(16187433, 4840311, 21895), $T0F().Create(15597651, 9680623, 43790), $T0F().Create(13185859, 1936124, 8758), $T0F().Create(9594503, 3872249, 17516), $T0F().Create(2411791, 7744499, 35032), $T0F().Create(3837801, 8259786, 7006), $T0F().Create(7675603, 16519572, 14012), $T0F().Create(15351206, 16261928, 28025), $T0F().Create(13925196, 15746641, 56051), $T0F().Create(9495925, 6504771, 11210), $T0F().Create(2214635, 13009543, 22420), $T0F().Create(4429270, 9241870, 44841), $T0F().Create(4241297, 5203817, 8968), $T0F().Create(8482594, 10407634, 17936), $T0F().Create(187973, 4038053, 35873), $T0F().Create(3393037, 10873940, 7174), $T0F().Create(6786075, 4970664, 14349), $T0F().Create(13572151, 9941328, 28698), $T0F().Create(10367086, 3105441, 57397), $T0F().Create(12139746, 7331974, 11479), $T0F().Create(7502277, 14663949, 22958), $T0F().Create(15004555, 12550682, 45917), $T0F().Create(16422683, 9221022, 9183), $T0F().Create(16068151, 1664829, 18367), $T0F().Create(15359087, 3329659, 36734), $T0F().Create(13138147, 14087704, 7346), $T0F().Create(9499078, 11398193, 14693), $T0F().Create(2220940, 6019171, 29387), $T0F().Create(4441881, 12038342, 58774), $T0F().Create(4243819, 15829441, 11754), $T0F().Create(8487638, 14881666, 23509), $T0F().Create(198061, 12986117, 47019), $T0F().Create(3395055, 16018996, 9403), $T0F().Create(6790111, 15260776, 18807), $T0F().Create(13580222, 13744336, 37615), $T0F().Create(6071487, 2748867, 7523), $T0F().Create(12142975, 5497734, 15046), $T0F().Create(7508734, 10995469, 30092), $T0F().Create(15017469, 5213722, 60185), $T0F().Create(9714380, 1042744, 12037), $T0F().Create(2651544, 2085489, 24074), $T0F().Create(5303089, 4170978, 48148), $T0F().Create(4416061, 10900525, 9629), $T0F().Create(8832122, 5023834, 19259), $T0F().Create(887028, 10047669, 38518), $T0F().Create(6888292, 12075863, 7703), $T0F().Create(13776584, 7374510, 15407), $T0F().Create(10775952, 14749021, 30814), $T0F().Create(4774688, 12720827, 61629), $T0F().Create(4310380, 15965938, 12325), $T0F().Create(8620761, 15154660, 24651), $T0F().Create(464307, 13532105, 49303), $T0F().Create(10159191, 12772750, 9860), $T0F().Create(3541166, 8768285, 19721), $T0F().Create(7082332, 759354, 39443), $T0F().Create(8127352, 10218200, 7888), $T0F().Create(16254705, 3659184, 15777), $T0F().Create(15732195, 7318369, 31554), $T0F().Create(14687174, 14636739, 63108), $T0F().Create(9648321, 12993677, 12621), $T0F().Create(2519426, 9210139, 25243), $T0F().Create(5038853, 1643062, 50487), $T0F().Create(14429543, 7039498, 10097), $T0F().Create(12081870, 14078997, 20194), $T0F().Create(7386525, 11380779, 40389), $T0F().Create(11543634, 15697928, 8077), $T0F().Create(6310053, 14618641, 16155), $T0F().Create(12620107, 12460066, 32311), $T0F().Create(9234907, 5847456, 6462), $T0F().Create(1692599, 11694913, 12924), $T0F().Create(3385199, 6612610, 25849), $T0F().Create(6770398, 13225220, 51698), $T0F().Create(11420409, 12711373, 10339), $T0F().Create(6063602, 8645531, 20679), $T0F().Create(12127205, 513846, 41359), $T0F().Create(2425441, 13524542, 8271), $T0F().Create(4850882, 10271868, 16543), $T0F().Create(9701764, 3766520, 33087), $T0F().Create(8651239, 7464190, 6617), $T0F().Create(525262, 14928381, 13234), $T0F().Create(1050525, 13079546, 26469), $T0F().Create(2101050, 9381876, 52939), $T0F().Create(420210, 15298148, 10587), $T0F().Create(840420, 13819080, 21175), $T0F().Create(1680840, 10860944, 42351), $T0F().Create(336168, 5527632, 8470), $T0F().Create(672336, 11055264, 16940), $T0F().Create(1344672, 5333312, 33881), $T0F().Create(10335264, 4422105, 6776), $T0F().Create(3893312, 8844211, 13552), $T0F().Create(7786624, 911206, 27105), $T0F().Create(15573248, 1822412, 54210), $T0F().Create(9825536, 364482, 10842), $T0F().Create(2873856, 728965, 21684), $T0F().Create(5747712, 1457930, 43368), $T0F().Create(11215872, 10357915, 8673), $T0F().Create(5654528, 3938615, 17347), $T0F().Create(11309056, 7877230, 34694), $T0F().Create(15683584, 14997218, 6938), $T0F().Create(14589952, 13217221, 13877), $T0F().Create(12402688, 9657227, 27755), $T0F().Create(8028160, 2537239, 55511), $T0F().Create(1605632, 3862891, 11102), $T0F().Create(3211264, 7725782, 22204), $T0F().Create(6422528, 15451564, 44408), $T0F().Create(7995392, 13156642, 8881), $T0F().Create(15990784, 9536068, 17763), $T0F().Create(15204352, 2294921, 35527), $T0F().Create(13107200, 7169870, 7105), $T0F().Create(9437184, 14339741, 14210), $T0F().Create(2097152, 11902267, 28421), $T0F().Create(4194304, 7027318, 56843), $T0F().Create(4194304, 11471793, 11368), $T0F().Create(8388608, 6166370, 22737), $T0F().Create(0, 12332741, 45474), $T0F().Create(0, 15888321, 9094), $T0F().Create(0, 14999426, 18189), $T0F().Create(0, 13221636, 36379), $T0F().Create(0, 16066100, 7275), $T0F().Create(0, 15354984, 14551), $T0F().Create(0, 13932752, 29103), $T0F().Create(0, 11088288, 58207), $T0F().Create(0, 8928544, 11641), $T0F().Create(0, 1079872, 23283), $T0F().Create(0, 2159744, 46566), $T0F().Create(0, 3787392, 9313), $T0F().Create(0, 7574784, 18626), $T0F().Create(0, 15149568, 37252), $T0F().Create(0, 9740800, 7450), $T0F().Create(0, 2704384, 14901), $T0F().Create(0, 5408768, 29802), $T0F().Create(0, 10817536, 59604), $T0F().Create(0, 15585280, 11920), $T0F().Create(0, 14393344, 23841), $T0F().Create(0, 12009472, 47683), $T0F().Create(0, 12468224, 9536), $T0F().Create(0, 8159232, 19073), $T0F().Create(0, 16318464, 38146), $T0F().Create(0, 6619136, 7629), $T0F().Create(0, 13238272, 15258), $T0F().Create(0, 9699328, 30517), $T0F().Create(0, 2621440, 61035), $T0F().Create(0, 524288, 12207), $T0F().Create(0, 1048576, 24414), $T0F().Create(0, 2097152, 48828), $T0F().Create(0, 10485760, 9765), $T0F().Create(0, 4194304, 19531), $T0F().Create(0, 8388608, 39062), $T0F().Create(0, 8388608, 7812), $T0F().Create(0, 0, 15625), $T0F().Create(0, 0, 31250), $T0F().Create(0, 0, 62500), $T0F().Create(0, 0, 12500), $T0F().Create(0, 0, 25000), $T0F().Create(0, 0, 50000), $T0F().Create(0, 0, 10000), $T0F().Create(0, 0, 20000), $T0F().Create(0, 0, 40000), $T0F().Create(0, 0, 8000), $T0F().Create(0, 0, 16000), $T0F().Create(0, 0, 32000), $T0F().Create(0, 0, 64000), $T0F().Create(0, 0, 12800), $T0F().Create(0, 0, 25600), $T0F().Create(0, 0, 51200), $T0F().Create(0, 0, 10240), $T0F().Create(0, 0, 20480), $T0F().Create(0, 0, 40960), $T0F().Create(0, 0, 8192), $T0F().Create(0, 0, 16384), $T0F().Create(0, 0, 32768), $T0F().Create(10066329, 10066329, 6553), $T0F().Create(3355443, 3355443, 13107), $T0F().Create(6710886, 6710886, 26214), $T0F().Create(13421772, 13421772, 52428), $T0F().Create(2684354, 12750684, 10485), $T0F().Create(5368709, 8724152, 20971), $T0F().Create(10737418, 671088, 41943), $T0F().Create(5502926, 10200547, 8388), $T0F().Create(11005853, 3623878, 16777), $T0F().Create(5234491, 7247757, 33554), $T0F().Create(4402341, 14871324, 6710), $T0F().Create(8804682, 12965432, 13421), $T0F().Create(832149, 9153649, 26843), $T0F().Create(1664299, 1530082, 53687), $T0F().Create(13754632, 7016902, 10737), $T0F().Create(10732049, 14033805, 21474), $T0F().Create(4686883, 11290395, 42949), $T0F().Create(14359149, 15679851, 8589), $T0F().Create(11941082, 14582487, 17179), $T0F().Create(7104949, 12387759, 34359), $T0F().Create(11487319, 15899324, 6871), $T0F().Create(6197423, 15021433, 13743), $T0F().Create(12394846, 13265650, 27487), $T0F().Create(8012476, 9754085, 54975), $T0F().Create(1602495, 1950817, 10995), $T0F().Create(3204990, 3901634, 21990), $T0F().Create(6409980, 7803268, 43980), $T0F().Create(11348325, 1560653, 8796), $T0F().Create(5919435, 3121307, 17592), $T0F().Create(11838871, 6242614, 35184), $T0F().Create(12434103, 14670295, 7036), $T0F().Create(8090991, 12563375, 14073), $T0F().Create(16181983, 8349534, 28147), $T0F().Create(15586750, 16699069, 56294), $T0F().Create(13183679, 16761586, 11258), $T0F().Create(9590143, 16745957, 22517), $T0F().Create(2403070, 16714699, 45035), $T0F().Create(13902386, 3342939, 9007), $T0F().Create(11027557, 6685879, 18014), $T0F().Create(5277899, 13371759, 36028), $T0F().Create(7766466, 12740681, 7205), $T0F().Create(15532932, 8704146, 14411), $T0F().Create(14288649, 631077, 28823), $T0F().Create(11800083, 1262155, 57646), $T0F().Create(5715459, 3607874, 11529), $T0F().Create(11430919, 7215748, 23058), $T0F().Create(6084623, 14431497, 46116), $T0F().Create(11283254, 6241742, 9223), $T0F().Create(5789292, 12483485, 18446), $T0F().Create(11578585, 8189754, 36893), $T0F().Create(9026603, 11704280, 7378), $T0F().Create(1275990, 6631345, 14757), $T0F().Create(2551981, 13262690, 29514), $T0F().Create(5103963, 9748164, 59029), $T0F().Create(11087122, 15371405, 11805), $T0F().Create(5397028, 13965595, 23611), $T0F().Create(10794057, 11153974, 47223), $T0F().Create(8869697, 12297124, 9444), $T0F().Create(962179, 7817033, 18889), $T0F().Create(1924359, 15634066, 37778), $T0F().Create(13806644, 13193142, 7555), $T0F().Create(10836073, 9609069, 15111), $T0F().Create(4894930, 2440923, 30223), $T0F().Create(9789861, 4881846, 60446), $T0F().Create(8668858, 4331812, 12089), $T0F().Create(560501, 8663625, 24178), $T0F().Create(1121002, 550034, 48357), $T0F().Create(3579643, 6820893, 9671), $T0F().Create(7159287, 13641786, 19342), $T0F().Create(14318574, 10506356, 38685), $T0F().Create(6219158, 2101271, 7737), $T0F().Create(12438316, 4202542, 15474), $T0F().Create(8099416, 8405085, 30948), $T0F().Create(16198833, 32954, 61897), $T0F().Create(6595209, 6717477, 12379), $T0F().Create(13190419, 13434954, 24758), $T0F().Create(9603623, 10092693, 49517), $T0F().Create(1920724, 8729425, 9903), $T0F().Create(3841449, 681634, 19807), $T0F().Create(7682898, 1363268, 39614), $T0F().Create(8247466, 13694426, 7922), $T0F().Create(16494932, 10611636, 15845), $T0F().Create(16212648, 4446057, 31691), $T0F().Create(15648081, 8892115, 63382), $T0F().Create(9840502, 8489309, 12676), $T0F().Create(2903789, 201403, 25353), $T0F().Create(5807578, 402806, 50706), $T0F().Create(7872402, 3436004, 10141), $T0F().Create(15744804, 6872008, 20282), $T0F().Create(14712392, 13744017, 40564), $T0F().Create(6297921, 16170576, 8112), $T0F().Create(12595843, 15563936, 16225), $T0F().Create(8414470, 14350657, 32451), $T0F().Create(11749223, 6225574, 6490), $T0F().Create(6721231, 12451149, 12980), $T0F().Create(13442463, 8125082, 25961), $T0F().Create(10107710, 16250165, 51922), $T0F().Create(8732428, 9960919, 10384), $T0F().Create(687640, 3144623, 20769), $T0F().Create(1375281, 6289246, 41538), $T0F().Create(13696829, 11324178, 8307), $T0F().Create(10616442, 5871141, 16615), $T0F().Create(4455668, 11742283, 33230), $T0F().Create(10957463, 2348456, 6646), $T0F().Create(5137710, 4696913, 13292), $T0F().Create(10275421, 9393826, 26584), $T0F().Create(3773626, 2010437, 53169), $T0F().Create(4110168, 13823860, 10633), $T0F().Create(8220336, 10870504, 21267), $T0F().Create(16440673, 4963792, 42535), $T0F().Create(9999021, 992758, 8507), $T0F().Create(3220826, 1985517, 17014), $T0F().Create(6441652, 3971034, 34028), $T0F().Create(7999216, 10860536, 6805), $T0F().Create(15998433, 4943856, 13611), $T0F().Create(15219651, 9887713, 27222), $T0F().Create(13662087, 2998211, 54445), $T0F().Create(6087860, 599642, 10889), $T0F().Create(12175721, 1199284, 21778), $T0F().Create(7574226, 2398569, 43556), $T0F().Create(1514845, 3835157, 8711), $T0F().Create(3029690, 7670314, 17422), $T0F().Create(6059381, 15340628, 34844), $T0F().Create(7922762, 16489898, 6968), $T0F().Create(15845525, 16202580, 13937), $T0F().Create(14913834, 15627945, 27875), $T0F().Create(13050453, 14478675, 55751), $T0F().Create(5965533, 6251178, 11150), $T0F().Create(11931067, 12502356, 22300), $T0F().Create(7084919, 8227497, 44601), $T0F().Create(11483313, 5000942, 8920), $T0F().Create(6189411, 10001885, 17840), $T0F().Create(12378822, 3226554, 35681), $T0F().Create(2475764, 4000754, 7136), $T0F().Create(4951528, 8001508, 14272), $T0F().Create(9903057, 16003016, 28544), $T0F().Create(3028899, 15228817, 57089), $T0F().Create(3961223, 16467536, 11417), $T0F().Create(7922446, 16157856, 22835), $T0F().Create(15844892, 15538496, 45671), $T0F().Create(9879864, 6463142, 9134), $T0F().Create(2982513, 12926285, 18268), $T0F().Create(5965027, 9075354, 36537), $T0F().Create(4548448, 8525957, 7307), $T0F().Create(9096897, 274698, 14615), $T0F().Create(1416578, 549397, 29230), $T0F().Create(2833157, 1098794, 58460), $T0F().Create(13988404, 219758, 11692), $T0F().Create(11199592, 439517, 23384), $T0F().Create(5621969, 879035, 46768), $T0F().Create(11190723, 10242136, 9353), $T0F().Create(5604230, 3707057, 18707), $T0F().Create(11208461, 7414114, 37414), $T0F().Create(12308021, 14904595, 7482), $T0F().Create(7838827, 13031975, 14965), $T0F().Create(15677655, 9286734, 29931), $T0F().Create(14578095, 1796253, 59863), $T0F().Create(6271062, 10425580, 11972), $T0F().Create(12542124, 4073944, 23945), $T0F().Create(8307033, 8147889, 47890), $T0F().Create(15083179, 1629577, 9578), $T0F().Create(13389142, 3259155, 19156), $T0F().Create(10001069, 6518311, 38312), $T0F().Create(12066543, 8014548, 7662), $T0F().Create(7355871, 16029097, 15324), $T0F().Create(14711742, 15280978, 30649), $T0F().Create(12646268, 13784741, 61299), $T0F().Create(2529253, 16178721, 12259), $T0F().Create(5058507, 15580226, 24519), $T0F().Create(10117014, 14383236, 49039), $T0F().Create(2023402, 16298420, 9807), $T0F().Create(4046805, 15819624, 19615), $T0F().Create(8093611, 14862032, 39231), $T0F().Create(11685051, 6327849, 7846), $T0F().Create(6592887, 12655699, 15692), $T0F().Create(13185775, 8534182, 31385), $T0F().Create(9594335, 291149, 62771), $T0F().Create(1918867, 3413673, 12554), $T0F().Create(3837734, 6827346, 25108), $T0F().Create(7675468, 13654692, 50216), $T0F().Create(11601423, 6086381, 10043), $T0F().Create(6425630, 12172763, 20086), $T0F().Create(12851261, 7568310, 40173), $T0F().Create(12636581, 11579991, 8034), $T0F().Create(8495947, 6382767, 16069), $T0F().Create(214679, 12765535, 32138), $T0F().Create(429358, 8753854, 64277), $T0F().Create(3441314, 8461657, 12855), $T0F().Create(6882629, 146098, 25711), $T0F().Create(13765259, 292196, 51422), $T0F().Create(12819381, 6769325, 10284), $T0F().Create(8861547, 13538651, 20568), $T0F().Create(945878, 10300087, 41137), $T0F().Create(13610948, 8770903, 8227), $T0F().Create(10444680, 764591, 16455), $T0F().Create(4112145, 1529183, 32910), $T0F().Create(10888758, 305836, 6582), $T0F().Create(5000301, 611673, 13164), $T0F().Create(10000603, 1223346, 26328), $T0F().Create(3223990, 2446693, 52656), $T0F().Create(14066570, 3844781, 10531), $T0F().Create(11355925, 7689563, 21062), $T0F().Create(5934635, 15379127, 42124), $T0F().Create(4542370, 16497598, 8424), $T0F().Create(9084740, 16217980, 16849), $T0F().Create(1392265, 15658745, 33699), $T0F().Create(13700225, 16553521, 6739), $T0F().Create(10623235, 16329827, 13479), $T0F().Create(4469255, 15882439, 26959), $T0F().Create(8938510, 14987662, 53919), $T0F().Create(5143145, 16419305, 10783), $T0F().Create(10286290, 16061394, 21567), $T0F().Create(3795365, 15345573, 43135), $T0F().Create(10825402, 3069114, 8627), $T0F().Create(4873589, 6138229, 17254), $T0F().Create(9747178, 12276458, 34508), $T0F().Create(5304878, 12521621, 6901), $T0F().Create(10609757, 8266026, 13803), $T0F().Create(4442299, 16532053, 27606), $T0F().Create(8884599, 16286890, 55213), $T0F().Create(11843249, 13323707, 11042), $T0F().Create(6909282, 9870199, 22085), $T0F().Create(13818565, 2963182, 44171), $T0F().Create(12830042, 3948079, 8834), $T0F().Create(8882869, 7896159, 17668), $T0F().Create(988523, 15792319, 35336), $T0F().Create(197704, 6513907, 7067), $T0F().Create(395409, 13027814, 14134), $T0F().Create(790818, 9278412, 28269), $T0F().Create(1581636, 1779608, 56539), $T0F().Create(7027213, 13777694, 11307), $T0F().Create(14054427, 10778172, 22615), $T0F().Create(11331639, 4779129, 45231), $T0F().Create(2266327, 4311269, 9046), $T0F().Create(4532655, 8622538, 18092), $T0F().Create(9065311, 467860, 36185), $T0F().Create(1813062, 93572, 7237), $T0F().Create(3626124, 187144, 14474), $T0F().Create(7252249, 374288, 28948), $T0F().Create(14504498, 748576, 57896), $T0F().Create(9611786, 3505158, 11579), $T0F().Create(2446356, 7010317, 23158), $T0F().Create(4892712, 14020634, 46316), $T0F().Create(978542, 6159570, 9263), $T0F().Create(1957084, 12319140, 18526), $T0F().Create(3914169, 7861064, 37053), $T0F().Create(7493720, 11638542, 7410), $T0F().Create(14987440, 6499868, 14821), $T0F().Create(13197665, 12999737, 29642), $T0F().Create(9618114, 9222259, 59285), $T0F().Create(15345395, 1844451, 11857), $T0F().Create(13913575, 3688903, 23714), $T0F().Create(11049934, 7377807, 47428), $T0F().Create(2209986, 11541891, 9485), $T0F().Create(4419973, 6306566, 18971), $T0F().Create(8839947, 12613132, 37942), $T0F().Create(15189762, 9233512, 7588), $T0F().Create(13602308, 1689809, 15177), $T0F().Create(10427401, 3379619, 30354), $T0F().Create(4077587, 6759239, 60708), $T0F().Create(7526403, 11418177, 12141), $T0F().Create(15052807, 6059138, 24283), $T0F().Create(13328399, 12118277, 48566), $T0F().Create(12732009, 5779098, 9713), $T0F().Create(8686802, 11558197, 19426), $T0F().Create(596389, 6339179, 38853), $T0F().Create(6830164, 11334165, 7770), $T0F().Create(13660328, 5891114, 15541), $T0F().Create(10543441, 11782229, 31082), $T0F().Create(4309666, 6787243, 62165), $T0F().Create(10928262, 1357448, 12433), $T0F().Create(5079309, 2714897, 24866), $T0F().Create(10158619, 5429794, 49732), $T0F().Create(5387167, 7796845, 9946), $T0F().Create(10774334, 15593690, 19892), $T0F().Create(4771452, 14410165, 39785), $T0F().Create(954290, 2882033, 7957), $T0F().Create(1908581, 5764066, 15914), $T0F().Create(3817162, 11528132, 31828), $T0F().Create(7634324, 6279048, 63657), $T0F().Create(1526864, 7966696, 12731), $T0F().Create(3053729, 15933392, 25462), $T0F().Create(6107459, 15089568, 50925), $T0F().Create(11287821, 3017913, 10185), $T0F().Create(5798427, 6035827, 20370), $T0F().Create(11596854, 12071654, 40740), $T0F().Create(15741143, 2414330, 8148), $T0F().Create(14705071, 4828661, 16296), $T0F().Create(12632926, 9657323, 32592), $T0F().Create(2526585, 8642351, 6518), $T0F().Create(5053170, 507486, 13037), $T0F().Create(10106341, 1014972, 26074), $T0F().Create(3435466, 2029945, 52148), $T0F().Create(10753422, 10472318, 10429), $T0F().Create(4729629, 4167421, 20859), $T0F().Create(9459259, 8334842, 41718), $T0F().Create(1891851, 11733298, 8343), $T0F().Create(3783703, 6689380, 16687), $T0F().Create(7567407, 13378760, 33374), $T0F().Create(14935254, 16097524, 6674), $T0F().Create(13093292, 15417833, 13349), $T0F().Create(9409369, 14058451, 26699), $T0F().Create(2041522, 11339687, 53399), $T0F().Create(3763747, 15689710, 10679), $T0F().Create(7527495, 14602204, 21359), $T0F().Create(15054990, 12427192, 42719), $T0F().Create(6366441, 15907211, 8543), $T0F().Create(12732882, 15037206, 17087), $T0F().Create(8688549, 13297197, 34175), $T0F().Create(8448596, 2659439, 6835), $T0F().Create(119976, 5318879, 13670), $T0F().Create(239953, 10637758, 27340), $T0F().Create(479906, 4498300, 54681), $T0F().Create(3451424, 4255103, 10936), $T0F().Create(6902848, 8510206, 21872), $T0F().Create(13805697, 243196, 43745), $T0F().Create(6116582, 48639, 8749), $T0F().Create(12233165, 97278, 17498), $T0F().Create(7689115, 194557, 34996), $T0F().Create(11604152, 3394354, 6999), $T0F().Create(6431089, 6788709, 13998), $T0F().Create(12862178, 13577418, 27996), $T0F().Create(8947140, 10377621, 55993), $T0F().Create(15211200, 12141853, 11198), $T0F().Create(13645185, 7506491, 22397), $T0F().Create(10513155, 15012983, 44794), $T0F().Create(8813517, 16424369, 8958), $T0F().Create(849819, 16071523, 17917), $T0F().Create(1699638, 15365830, 35835), $T0F().Create(339927, 3073166, 7167), $T0F().Create(679855, 6146332, 14334), $T0F().Create(1359710, 12292664, 28668), $T0F().Create(2719421, 7808112, 57337), $T0F().Create(13965657, 8272508, 11467), $T0F().Create(11154098, 16545017, 22934), $T0F().Create(5530980, 16312819, 45869), $T0F().Create(11172525, 16684336, 9173), $T0F().Create(5567835, 16591457, 18347), $T0F().Create(11135670, 16405698, 36695), $T0F().Create(12293463, 3281139, 7339), $T0F().Create(7809711, 6562279, 14678), $T0F().Create(15619422, 13124558, 29356), $T0F().Create(14461629, 9471901, 58713), $T0F().Create(16314098, 11960709, 11742), $T0F().Create(15850981, 7144203, 23485), $T0F().Create(14924747, 14288407, 46970), $T0F().Create(9695835, 2857681, 9394), $T0F().Create(2614455, 5715363, 18788), $T0F().Create(5228911, 11430726, 37576), $T0F().Create(7756668, 5641588, 7515), $T0F().Create(15513337, 11283176, 15030), $T0F().Create(14249458, 5789137, 30061), $T0F().Create(11721701, 11578275, 60122), $T0F().Create(9055226, 9026541, 12024), $T0F().Create(1333237, 1275867, 24049), $T0F().Create(2666474, 2551734, 48098), $T0F().Create(7244181, 10576676, 9619), $T0F().Create(14488362, 4376136, 19239), $T0F().Create(12199509, 8752273, 38478), $T0F().Create(5795345, 11816784, 7695), $T0F().Create(11590690, 6856352, 15391), $T0F().Create(6404164, 13712705, 30782), $T0F().Create(12808328, 10648194, 61565), $T0F().Create(15983438, 2129638, 12313), $T0F().Create(15189660, 4259277, 24626), $T0F().Create(13602105, 8518555, 49252), $T0F().Create(9431307, 8414597, 9850), $T0F().Create(2085399, 51979, 19701), $T0F().Create(4170798, 103958, 39402), $T0F().Create(834159, 6731678, 7880), $T0F().Create(1668319, 13463356, 15760), $T0F().Create(3336638, 10149496, 31521), $T0F().Create(6673277, 3521776, 63043), $T0F().Create(14756428, 10770684, 12608), $T0F().Create(12735640, 4764153, 25217), $T0F().Create(8694065, 9528307, 50434), $T0F().Create(5094256, 15327434, 10086), $T0F().Create(10188512, 13877652, 20173), $T0F().Create(3599808, 10978089, 40347), $T0F().Create(4075404, 8906504, 8069), $T0F().Create(8150809, 1035792, 16139), $T0F().Create(16301619, 2071584, 32278), $T0F().Create(9971210, 10480646, 6455), $T0F().Create(3165204, 4184077, 12911), $T0F().Create(6330409, 8368154, 25822), $T0F().Create(12660818, 16736308, 51644), $T0F().Create(9243050, 16769034, 10328), $T0F().Create(1708884, 16760853, 20657), $T0F().Create(3417768, 16744490, 41315), $T0F().Create(683553, 3348898, 8263), $T0F().Create(1367107, 6697796, 16526), $T0F().Create(2734215, 13395592, 33052), $T0F().Create(13968615, 9390004, 6610), $T0F().Create(11160015, 2002793, 13221), $T0F().Create(5542815, 4005587, 26442), $T0F().Create(11085630, 8011174, 52884), $T0F().Create(12283455, 15024007, 10576), $T0F().Create(7789695, 13270799, 21153), $T0F().Create(15579390, 9764382, 42307), $T0F().Create(16537650, 8663762, 8461), $T0F().Create(16298085, 550309, 16923), $T0F().Create(15818955, 1100619, 33846), $T0F().Create(3163791, 3575567, 6769), $T0F().Create(6327582, 7151134, 13538), $T0F().Create(12655164, 14302268, 27076), $T0F().Create(8533113, 11827321, 54153), $T0F().Create(15128395, 12431793, 10830), $T0F().Create(13479574, 8086371, 21661), $T0F().Create(10181933, 16172743, 43322), $T0F().Create(2036386, 9945435, 8664), $T0F().Create(4072773, 3113654, 17329), $T0F().Create(8145547, 6227308, 34658), $T0F().Create(4984552, 11311791, 6931), $T0F().Create(9969105, 5846366, 13863), $T0F().Create(3160994, 11692733, 27726), $T0F().Create(6321988, 6608250, 55453), $T0F().Create(11330727, 11387979, 11090), $T0F().Create(5884238, 5998743, 22181), $T0F().Create(11768477, 11997486, 44362), $T0F().Create(12420025, 9110383, 8872), $T0F().Create(8062834, 1443551, 17745), $T0F().Create(16125668, 2887102, 35490), $T0F().Create(9936020, 577420, 7098), $T0F().Create(3094824, 1154841, 14196), $T0F().Create(6189648, 2309682, 28392), $T0F().Create(12379296, 4619364, 56784), $T0F().Create(12542188, 14345645, 11356), $T0F().Create(8307161, 11914075, 22713), $T0F().Create(16614323, 7050934, 45427), $T0F().Create(6678307, 8121073, 9085), $T0F().Create(13356615, 16242146, 18170), $T0F().Create(9936015, 15707077, 36341), $T0F().Create(12053532, 6496858, 7268), $T0F().Create(7329849, 12993717, 14536), $T0F().Create(14659699, 9210218, 29073), $T0F().Create(12542182, 1643221, 58147), $T0F().Create(12574766, 7039530, 11629), $T0F().Create(8372316, 14079061, 23258), $T0F().Create(16744632, 11380906, 46517), $T0F().Create(13415256, 8987067, 9303), $T0F().Create(10053296, 1196919, 18607), $T0F().Create(3329376, 2393839, 37214), $T0F().Create(10732204, 13900540, 7442), $T0F().Create(4687193, 11023865, 14885), $T0F().Create(9374387, 5270514, 29771), $T0F().Create(1971558, 10541029, 59542), $T0F().Create(3749754, 8819092, 11908), $T0F().Create(7499509, 860968, 23817), $T0F().Create(14999019, 1721936, 47634), $T0F().Create(2999803, 13766160, 9526), $T0F().Create(5999607, 10755104, 19053), $T0F().Create(11999215, 4732992, 38107), $T0F().Create(15821615, 7657484, 7621), $T0F().Create(14866015, 15314969, 15242), $T0F().Create(12954815, 13852723, 30485), $T0F().Create(9132415, 10928231, 60971), $T0F().Create(8537369, 5541089, 12194), $T0F().Create(297522, 11082179, 24388), $T0F().Create(595045, 5387142, 48777), $T0F().Create(13540781, 7788314, 9755), $T0F().Create(10304347, 15576629, 19510), $T0F().Create(3831479, 14376043, 39021), $T0F().Create(14188068, 6230651, 7804), $T0F().Create(11598921, 12461303, 15608), $T0F().Create(6420627, 8145391, 31217), $T0F().Create(12841254, 16290782, 62434), $T0F().Create(5923694, 16679929, 12486), $T0F().Create(11847388, 16582642, 24973), $T0F().Create(6917560, 16388069, 49947), $T0F().Create(4738955, 9988500, 9989), $T0F().Create(9477910, 3199784, 19979), $T0F().Create(2178605, 6399569, 39958), $T0F().Create(7146607, 11346243, 7991), $T0F().Create(14293214, 5915270, 15983), $T0F().Create(11809213, 11830541, 31966), $T0F().Create(6841211, 6883867, 63933), $T0F().Create(1368242, 11443103, 12786), $T0F().Create(2736484, 6108990, 25573), $T0F().Create(5472968, 12217980, 51146), $T0F().Create(4450036, 5799039, 10229), $T0F().Create(8900073, 11598078, 20458), $T0F().Create(1022931, 6418941, 40917), $T0F().Create(10270915, 7994674, 8183), $T0F().Create(3764615, 15989349, 16366), $T0F().Create(7529231, 15201482, 32733), $T0F().Create(1505846, 13106626, 6546), $T0F().Create(3011692, 9436036, 13093), $T0F().Create(6023385, 2094856, 26187), $T0F().Create(12046771, 4189712, 52374), $T0F().Create(5764797, 14259715, 10474), $T0F().Create(11529594, 11742214, 20949), $T0F().Create(6281973, 6707213, 41899), $T0F().Create(7967281, 14763215, 8379), $T0F().Create(15934562, 12749214, 16759), $T0F().Create(15091908, 8721213, 33519), $T0F().Create(9729268, 15166015, 6703), $T0F().Create(2681320, 13554815, 13407), $T0F().Create(5362640, 10332414, 26815), $T0F().Create(10725280, 3887612, 53631), $T0F().Create(12211385, 4132965, 10726), $T0F().Create(7645555, 8265931, 21452), $T0F().Create(15291111, 16531862, 42904), $T0F().Create(6413665, 16728145, 8580), $T0F().Create(12827330, 16679074, 17161), $T0F().Create(8877445, 16580933, 34323), $T0F().Create(5130932, 13382516, 6864), $T0F().Create(10261864, 9987816, 13729), $T0F().Create(3746513, 3198417, 27459), $T0F().Create(7493026, 6396834, 54918), $T0F().Create(8209491, 11345696, 10983), $T0F().Create(16418983, 5914176, 21967), $T0F().Create(16060751, 11828353, 43934), $T0F().Create(9923036, 15787443, 8786), $T0F().Create(3068857, 14797671, 17573), $T0F().Create(6137714, 12818126, 35147), $T0F().Create(11293872, 9274511, 7029), $T0F().Create(5810528, 1771807, 14059), $T0F().Create(11621057, 3543614, 28118), $T0F().Create(6464899, 7087229, 56236), $T0F().Create(1292979, 4772889, 11247), $T0F().Create(2585959, 9545778, 22494), $T0F().Create(5171919, 2314340, 44989), $T0F().Create(14456156, 13884640, 8997), $T0F().Create(12135097, 10992065, 17995), $T0F().Create(7492979, 5206915, 35991), $T0F().Create(4854039, 4396826, 7198), $T0F().Create(9708078, 8793652, 14396), $T0F().Create(2638940, 810089, 28793), $T0F().Create(5277880, 1620178, 57586), $T0F().Create(14477348, 3679478, 11517), $T0F().Create(12177481, 7358957, 23034), $T0F().Create(7577747, 14717915, 46068), $T0F().Create(11581879, 13009912, 9213), $T0F().Create(6386542, 9242609, 18427), $T0F().Create(12773084, 1708002, 36855), $T0F().Create(9265503, 341600, 7371), $T0F().Create(1753790, 683201, 14742), $T0F().Create(3507581, 1366402, 29484), $T0F().Create(7015162, 2732804, 58968), $T0F().Create(8113918, 10612890, 11793), $T0F().Create(16227837, 4448564, 23587), $T0F().Create(15678459, 8897129, 47174), $T0F().Create(13202021, 15201198, 9434), $T0F().Create(9626826, 13625181, 18869), $T0F().Create(2476437, 10473147, 37739), $T0F().Create(3850730, 15516402, 7547), $T0F().Create(7701461, 14255588, 15095), $T0F().Create(15402923, 11733960, 30191), $T0F().Create(14028630, 6690705, 60383), $T0F().Create(12872055, 11404470, 12076), $T0F().Create(8966895, 6031725, 24153), $T0F().Create(1156574, 12063451, 48306), $T0F().Create(6942201, 5768133, 9661), $T0F().Create(13884402, 11536266, 19322), $T0F().Create(10991589, 6295317, 38645), $T0F().Create(8909204, 1259063, 7729), $T0F().Create(1041192, 2518127, 15458), $T0F().Create(2082384, 5036254, 30916), $T0F().Create(4164769, 10072508, 61832), $T0F().Create(832953, 8725388, 12366), $T0F().Create(1665907, 673560, 24733), $T0F().Create(3331815, 1347120, 49466), $T0F().Create(4021806, 3624867, 9893), $T0F().Create(8043612, 7249734, 19786), $T0F().Create(16087225, 14499468, 39572), $T0F().Create(3217445, 9610780, 7914), $T0F().Create(6434890, 2444344, 15829), $T0F().Create(12869780, 4888688, 31658), $T0F().Create(8962344, 9777377, 63316), $T0F().Create(11858798, 5310918, 12663), $T0F().Create(6940381, 10621837, 25326), $T0F().Create(13880762, 4466458, 50653), $T0F().Create(6131595, 10959621, 10130), $T0F().Create(12263191, 5142026, 20261), $T0F().Create(7749166, 10284053, 40522), $T0F().Create(1549833, 8767697, 8104), $T0F().Create(3099666, 758178, 16209), $T0F().Create(6199333, 1516356, 32418), $T0F().Create(14661639, 10369600, 6483), $T0F().Create(12546062, 3961985, 12967), $T0F().Create(8314909, 7923971, 25934), $T0F().Create(16629819, 15847942, 51868), $T0F().Create(3325963, 13235918, 10373), $T0F().Create(6651927, 9694620, 20747), $T0F().Create(13303855, 2612024, 41495), $T0F().Create(16082543, 522404, 8299), $T0F().Create(15387871, 1044809, 16598), $T0F().Create(13998527, 2089619, 33196), $T0F().Create(2799705, 3773367, 6639), $T0F().Create(5599411, 7546734, 13278), $T0F().Create(11198822, 15093468, 26556), $T0F().Create(5620428, 13409721, 53113), $T0F().Create(14545858, 12748273, 10622), $T0F().Create(12314500, 8719331, 21245), $T0F().Create(7851785, 661447, 42491), $T0F().Create(11636686, 3487732, 8498), $T0F().Create(6496157, 6975465, 16996), $T0F().Create(12992315, 13950930, 33992), $T0F().Create(9309349, 9501072, 6798), $T0F().Create(1841482, 2224929, 13597), $T0F().Create(3682965, 4449858, 27194), $T0F().Create(7365931, 8899716, 54388), $T0F().Create(14894959, 11846272, 10877), $T0F().Create(13012702, 6915329, 21755), $T0F().Create(9248188, 13830659, 43510), $T0F().Create(15271410, 2766131, 8702), $T0F().Create(13765604, 5532263, 17404), $T0F().Create(10753993, 11064527, 34808), $T0F().Create(2150798, 12279235, 6961), $T0F().Create(4301597, 7781254, 13923), $T0F().Create(8603195, 15562508, 27846), $T0F().Create(429174, 14347801, 55693), $T0F().Create(13507607, 12935889, 11138), $T0F().Create(10237999, 9094563, 22277), $T0F().Create(3698782, 1411911, 44555), $T0F().Create(4095199, 282382, 8911), $T0F().Create(8190399, 564764, 17822), $T0F().Create(16380798, 1129528, 35644), $T0F().Create(9987046, 13647678, 7128), $T0F().Create(3196876, 10518141, 14257), $T0F().Create(6393752, 4259066, 28515), $T0F().Create(12787505, 8518132, 57030), $T0F().Create(9268387, 1703626, 11406), $T0F().Create(1759558, 3407253, 22812), $T0F().Create(3519117, 6814506, 45624), $T0F().Create(703823, 14784674, 9124), $T0F().Create(1407647, 12792132, 18249), $T0F().Create(2815294, 8807048, 36499), $T0F().Create(7273945, 15183182, 7299), $T0F().Create(14547890, 13589148, 14599), $T0F().Create(12318565, 10401081, 29199), $T0F().Create(7859914, 4024947, 58399), $T0F().Create(4927426, 14226762, 11679), $T0F().Create(9854852, 11676308, 23359), $T0F().Create(2932488, 6575401, 46719), $T0F().Create(586497, 14736853, 9343), $T0F().Create(1172995, 12696490, 18687), $T0F().Create(2345990, 8615764, 37375), $T0F().Create(13890970, 1723152, 7475), $T0F().Create(11004725, 3446305, 14950), $T0F().Create(5232235, 6892611, 29900), $T0F().Create(10464471, 13785222, 59800), $T0F().Create(8803780, 2757044, 11960), $T0F().Create(830345, 5514089, 23920), $T0F().Create(1660690, 11028178, 47840), $T0F().Create(10398467, 2205635, 9568), $T0F().Create(4019719, 4411271, 19136), $T0F().Create(8039438, 8822542, 38272), $T0F().Create(15029660, 8475394, 7654), $T0F().Create(13282105, 173573, 15309), $T0F().Create(9786994, 347147, 30618), $T0F().Create(2796772, 694295, 61236), $T0F().Create(3914797, 3494302, 12247), $T0F().Create(7829595, 6988604, 24494), $T0F().Create(15659190, 13977208, 48988), $T0F().Create(6487281, 12861771, 9797), $T0F().Create(12974562, 8946326, 19595), $T0F().Create(9171909, 1115437, 39191), $T0F().Create(11900711, 3578530, 7838), $T0F().Create(7024206, 7157061, 15676), $T0F().Create(14048413, 14314122, 31352), $T0F().Create(11319611, 11851029, 62705), $T0F().Create(15685695, 2370205, 12541), $T0F().Create(14594174, 4740411, 25082), $T0F().Create(12411132, 9480823, 50164), $T0F().Create(9193112, 15317937, 10032), $T0F().Create(1609009, 13858659, 20065), $T0F().Create(3218019, 10940102, 40131), $T0F().Create(10709933, 5543463, 8026), $T0F().Create(4642651, 11086927, 16052), $T0F().Create(9285302, 5396638, 32105), $T0F().Create(1793388, 10793277, 64210), $T0F().Create(7069564, 2158655, 12842), $T0F().Create(14139128, 4317310, 25684), $T0F().Create(11501040, 8634621, 51368), $T0F().Create(15721980, 11793253, 10273), $T0F().Create(14666745, 6809291, 20547), $T0F().Create(12556275, 13618583, 41094), $T0F().Create(9222141, 16145489, 8218), $T0F().Create(1667067, 15513763, 16437), $T0F().Create(3334134, 14250310, 32875), $T0F().Create(666826, 2850062, 6575), $T0F().Create(1333653, 5700124, 13150), $T0F().Create(2667307, 11400248, 26300), $T0F().Create(5334614, 6023280, 52601), $T0F().Create(4422366, 4560099, 10520), $T0F().Create(8844732, 9120198, 21040), $T0F().Create(912248, 1463181, 42081), $T0F().Create(6893336, 3648079, 8416), $T0F().Create(13786672, 7296158, 16832), $T0F().Create(10796128, 14592317, 33664), $T0F().Create(5514668, 16340236, 6732), $T0F().Create(11029337, 15903256, 13465), $T0F().Create(5281459, 15029297, 26931), $T0F().Create(10562918, 13281378, 53863), $T0F().Create(5468026, 12722605, 10772), $T0F().Create(10936053, 8667994, 21545), $T0F().Create(5094891, 558773, 43091), $T0F().Create(14440751, 3467197, 8618), $T0F().Create(12104286, 6934395, 17236), $T0F().Create(7431356, 13868791, 34472), $T0F().Create(11552600, 9484644, 6894), $T0F().Create(6327985, 2192073, 13789), $T0F().Create(12655971, 4384146, 27578), $T0F().Create(8534727, 8768293, 55156), $T0F().Create(15128718, 5109101, 11031), $T0F().Create(13480220, 10218203, 22062), $T0F().Create(10183225, 3659191, 44125), $T0F().Create(5392088, 731838, 8825), $T0F().Create(10784176, 1463676, 17650), $T0F().Create(4791136, 2927353, 35300), $T0F().Create(11024556, 585470, 7060), $T0F().Create(5271897, 1170941, 14120), $T0F().Create(10543795, 2341882, 28240), $T0F().Create(4310375, 4683765, 56480), $T0F().Create(862075, 936753, 11296), $T0F().Create(1724150, 1873506, 22592), $T0F().Create(3448300, 3747012, 45184), $T0F().Create(4045103, 14171175, 9036), $T0F().Create(8090206, 11565134, 18073), $T0F().Create(16180413, 6353052, 36147), $T0F().Create(16657855, 7981496, 7229), $T0F().Create(16538494, 15962993, 14458), $T0F().Create(16299773, 15148771, 28917), $T0F().Create(15822331, 13520327, 57835), $T0F().Create(9875352, 2704065, 11567), $T0F().Create(2973489, 5408131, 23134), $T0F().Create(5946979, 10816262, 46268), $T0F().Create(1189395, 12229582, 9253), $T0F().Create(2378791, 7681948, 18507), $T0F().Create(4757583, 15363896, 37014), $T0F().Create(951516, 16494552, 7402), $T0F().Create(1903033, 16211888, 14805), $T0F().Create(3806066, 15646560, 29611), $T0F().Create(7612133, 14515904, 59223), $T0F().Create(8233313, 12969510, 11844), $T0F().Create(16466626, 9161804, 23689), $T0F().Create(16156036, 1546393, 47379), $T0F().Create(9942093, 13731051, 9475), $T0F().Create(3106971, 10684887, 18951), $T0F().Create(6213942, 4592558, 37903), $T0F().Create(4598231, 10984841, 7580), $T0F().Create(9196463, 5192466, 15161), $T0F().Create(1615710, 10384933, 30322), $T0F().Create(3231421, 3992650, 60645), $T0F().Create(646284, 798530, 12129), $T0F().Create(1292568, 1597060, 24258), $T0F().Create(2585137, 3194120, 48516), $T0F().Create(3872470, 3994267, 9703), $T0F().Create(7744941, 7988534, 19406), $T0F().Create(15489882, 15977068, 38812), $T0F().Create(3097976, 9906300, 7762), $T0F().Create(6195953, 3035384, 15525), $T0F().Create(12391906, 6070768, 31050), $T0F().Create(8006596, 12141537, 62100), $T0F().Create(8312205, 2428307, 12420), $T0F().Create(16624411, 4856614, 24840), $T0F().Create(16471606, 9713229, 49680), $T0F().Create(16716094, 1942645, 9936), $T0F().Create(16654972, 3885291, 19872), $T0F().Create(16532728, 7770583, 39744), $T0F().Create(10017432, 14975889, 7948), $T0F().Create(3257648, 13174563, 15897), $T0F().Create(6515296, 9571910, 31795), $T0F().Create(13030592, 2366604, 63591), $T0F().Create(2606118, 3828764, 12718), $T0F().Create(5212237, 7657528, 25436), $T0F().Create(10424474, 15315056, 50872), $T0F().Create(12151224, 9773897, 10174), $T0F().Create(7525232, 2770579, 20349), $T0F().Create(15050465, 5541158, 40698), $T0F().Create(6365536, 11174561, 8139), $T0F().Create(12731072, 5571906, 16279), $T0F().Create(8684929, 11143813, 32558), $T0F().Create(5092429, 12295092, 6511), $T0F().Create(10184858, 7812968, 13023), $T0F().Create(3592500, 15625937, 26046), $T0F().Create(7185000, 14474658, 52093), $T0F().Create(4792443, 12961261, 10418), $T0F().Create(9584886, 9145306, 20837), $T0F().Create(2392557, 1513397, 41675), $T0F().Create(7189397, 302679, 8335), $T0F().Create(14378795, 605358, 16670), $T0F().Create(11980375, 1210717, 33340), $T0F().Create(9106961, 242143, 6668), $T0F().Create(1436706, 484287, 13336), $T0F().Create(2873413, 968574, 26672), $T0F().Create(5746827, 1937148, 53344), $T0F().Create(7860251, 13809202, 10668), $T0F().Create(15720503, 10841188, 21337), $T0F().Create(14663791, 4905161, 42675), $T0F().Create(6288201, 981032, 8535), $T0F().Create(12576403, 1962064, 17070), $T0F().Create(8375590, 3924129, 34140), $T0F().Create(15096890, 784825, 6828), $T0F().Create(13416565, 1569651, 13656), $T0F().Create(10055915, 3139303, 27312), $T0F().Create(3334614, 6278607, 54624), $T0F().Create(4022366, 14677494, 10924), $T0F().Create(8044732, 12577772, 21849), $T0F().Create(16089464, 8378328, 43699), $T0F().Create(9928779, 15097438, 8739), $T0F().Create(3080342, 13417661, 17479), $T0F().Create(6160685, 10058106, 34959), $T0F().Create(1232137, 15433394, 6991), $T0F().Create(2464274, 14089572, 13983), $T0F().Create(4928548, 11401928, 27967), $T0F().Create(9857096, 6026640, 55935), $T0F().Create(1971419, 1205328, 11187), $T0F().Create(3942838, 2410656, 22374), $T0F().Create(7885677, 4821312, 44748), $T0F().Create(1577135, 11030592, 8949), $T0F().Create(3154270, 5283968, 17899), $T0F().Create(6308541, 10567936, 35798), $T0F().Create(14683481, 12179916, 7159), $T0F().Create(12589746, 7582617, 14319), $T0F().Create(8402276, 15165235, 28638), $T0F().Create(27337, 13553255, 57277), $T0F().Create(6716353, 9421537, 11455), $T0F().Create(13432707, 2065858, 22911), $T0F().Create(10088199, 4131717, 45822), $T0F().Create(15439412, 7537229, 9164), $T0F().Create(14101609, 15074459, 18328), $T0F().Create(11426002, 13371703, 36657), $T0F().Create(2285200, 9385227, 7331), $T0F().Create(4570401, 1993238, 14663), $T0F().Create(9140802, 3986476, 29326), $T0F().Create(1504388, 7972953, 58652), $T0F().Create(300877, 8305477, 11730), $T0F().Create(601755, 16610954, 23460), $T0F().Create(1203510, 16444692, 46921), $T0F().Create(10307031, 6644381, 9384), $T0F().Create(3836847, 13288763, 18768), $T0F().Create(7673695, 9800310, 37537), $T0F().Create(8245625, 8670948, 7507), $T0F().Create(16491250, 564680, 15015), $T0F().Create(16205285, 1129361, 30030), $T0F().Create(15633355, 2258723, 60060), $T0F().Create(13193000, 451744, 12012), $T0F().Create(9608785, 903489, 24024), $T0F().Create(2440354, 1806979, 48048), $T0F().Create(7198957, 10427725, 9609), $T0F().Create(14397914, 4078234, 19219), $T0F().Create(12018613, 8156469, 38438), $T0F().Create(9114609, 11697623, 7687), $T0F().Create(1452002, 6618031, 15375), $T0F().Create(2904004, 13236062, 30750), $T0F().Create(5808008, 9694908, 61501), $T0F().Create(14583374, 5294424, 12300), $T0F().Create(12389532, 10588849, 24600), $T0F().Create(8001849, 4400483, 49201), $T0F().Create(15022142, 4235539, 9840), $T0F().Create(13267069, 8471079, 19680), $T0F().Create(9756923, 164943, 39361), $T0F().Create(15373157, 3388431, 7872), $T0F().Create(13969098, 6776863, 15744), $T0F().Create(11160981, 13553727, 31488), $T0F().Create(5544747, 10330239, 62977), $T0F().Create(4464392, 8776934, 12595), $T0F().Create(8928785, 776652, 25191), $T0F().Create(1080354, 1553305, 50382), $T0F().Create(6926957, 7021547, 10076), $T0F().Create(13853914, 14043094, 20152), $T0F().Create(10930613, 11308973, 40305), $T0F().Create(12252452, 2261794, 8061), $T0F().Create(7727688, 4523589, 16122), $T0F().Create(15455377, 9047178, 32244), $T0F().Create(14133538, 1317141, 64489), $T0F().Create(2826707, 13685201, 12897), $T0F().Create(5653415, 10593186, 25795), $T0F().Create(11306830, 4409156, 51591), $T0F().Create(8972252, 4237274, 10318), $T0F().Create(1167289, 8474549, 20636), $T0F().Create(2334578, 171882, 41273), $T0F().Create(466915, 10100706, 8254), $T0F().Create(933831, 3424196, 16509), $T0F().Create(1867662, 6848392, 33018), $T0F().Create(373532, 11436008, 6603), $T0F().Create(747064, 6094800, 13207), $T0F().Create(1494129, 12189600, 26414), $T0F().Create(2988259, 7601984, 52829), $T0F().Create(10663981, 14942169, 10565), $T0F().Create(4550747, 13107123, 21131), $T0F().Create(9101494, 9437030, 42263), $T0F().Create(11886628, 11953735, 8452), $T0F().Create(6996040, 7130255, 16905), $T0F().Create(13992081, 14260510, 33810), $T0F().Create(2798416, 2852102, 6762), $T0F().Create(5596832, 5704204, 13524), $T0F().Create(11193665, 11408408, 27048), $T0F().Create(5610115, 6039601, 54097), $T0F().Create(11188352, 7918806, 10819), $T0F().Create(5599489, 15837613, 21638), $T0F().Create(11198978, 14898010, 43277), $T0F().Create(8950682, 9690488, 8655), $T0F().Create(1124148, 2603761, 17311), $T0F().Create(2248296, 5207522, 34622), $T0F().Create(13871432, 7752390, 6924), $T0F().Create(10965648, 15504781, 13848), $T0F().Create(5154080, 14232347, 27697), $T0F().Create(10308160, 11687478, 55395), $T0F().Create(12127961, 2337495, 11079), $T0F().Create(7478707, 4674991, 22158), $T0F().Create(14957414, 9349982, 44316), $T0F().Create(13057812, 5225439, 8863), $T0F().Create(9338409, 10450879, 17726), $T0F().Create(1899602, 4124543, 35453), $T0F().Create(3735363, 10891238, 7090), $T0F().Create(7470727, 5005260, 14181), $T0F().Create(14941454, 10010520, 28362), $T0F().Create(13105693, 3243825, 56725), $T0F().Create(2621138, 648765, 11345), $T0F().Create(5242277, 1297530, 22690), $T0F().Create(10484554, 2595060, 45380), $T0F().Create(2096910, 519012, 9076), $T0F().Create(4193821, 1038024, 18152), $T0F().Create(8387643, 2076048, 36304), $T0F().Create(8388415, 13836982, 7260), $T0F().Create(16776830, 10896748, 14521), $T0F().Create(16776444, 5016281, 29043), $T0F().Create(16775673, 10032563, 58086), $T0F().Create(16776907, 5361955, 11617), $T0F().Create(16776598, 10723911, 23234), $T0F().Create(16775981, 4670607, 46469), $T0F().Create(6710639, 14355894, 9293), $T0F().Create(13421279, 11934572, 18587), $T0F().Create(10065342, 7091929, 37175), $T0F().Create(15434841, 1418385, 7435), $T0F().Create(14092466, 2836771, 14870), $T0F().Create(11407716, 5673543, 29740), $T0F().Create(6038217, 11347087, 59480), $T0F().Create(7918529, 2269417, 11896), $T0F().Create(15837059, 4538834, 23792), $T0F().Create(14896903, 9077669, 47584), $T0F().Create(13045710, 15237306, 9516), $T0F().Create(9314204, 13697397, 19033), $T0F().Create(1851193, 10617579, 38067), $T0F().Create(3725681, 8834402, 7613), $T0F().Create(7451363, 891588, 15227), $T0F().Create(14902727, 1783176, 30454), $T0F().Create(13028239, 3566353, 60908), $T0F().Create(5961091, 10779600, 12181), $T0F().Create(11922182, 4781984, 24363), $T0F().Create(7067148, 9563969, 48726), $T0F().Create(1413429, 5268237, 9745), $T0F().Create(2826859, 10536474, 19490), $T0F().Create(5653718, 4295732, 38981), $T0F().Create(11197073, 4214589, 7796), $T0F().Create(5616930, 8429179, 15592), $T0F().Create(11233861, 81142, 31185), $T0F().Create(5690506, 162285, 62370), $T0F().Create(1138101, 32457, 12474), $T0F().Create(2276202, 64914, 24948), $T0F().Create(4552405, 129828, 49896), $T0F().Create(14332253, 3381408, 9979), $T0F().Create(11887291, 6762817, 19958), $T0F().Create(6997367, 13525635, 39916), $T0F().Create(4754916, 6060570, 7983), $T0F().Create(9509833, 12121140, 15966), $T0F().Create(2242450, 7465065, 31933), $T0F().Create(4484901, 14930130, 63866), $T0F().Create(4252423, 6341469, 12773), $T0F().Create(8504846, 12682938, 25546), $T0F().Create(232477, 8588661, 51093), $T0F().Create(13468268, 11784061, 10218), $T0F().Create(10159320, 6790907, 20437), $T0F().Create(3541425, 13581815, 40874), $T0F().Create(14130057, 16138135, 8174), $T0F().Create(11482899, 15499055, 16349), $T0F().Create(6188583, 14220895, 32699), $T0F().Create(14659489, 16265951, 6539), $T0F().Create(12541763, 15754687, 13079), $T0F().Create(8306310, 14732159, 26159)]));
        TensExponentTable.set(JSIL.Array.New($T05(), [-323, -323, -322, -322, -322, -322, -321, -321, -321, -320, -320, -320, -319, -319, -319, -319, -318, -318, -318, -317, -317, -317, -316, -316, -316, -316, -315, -315, -315, -314, -314, -314, -313, -313, -313, -313, -312, -312, -312, -311, -311, -311, -310, -310, -310, -310, -309, -309, -309, -308, -308, -308, -307, -307, -307, -307, -306, -306, -306, -305, -305, -305, -304, -304, -304, -304, -303, -303, -303, -302, -302, -302, -301, -301, -301, -301, -300, -300, -300, -299, -299, -299, -298, -298, -298, -298, -297, -297, -297, -296, -296, -296, -295, -295, -295, -295, -294, -294, -294, -293, -293, -293, -292, -292, -292, -291, -291, -291, -291, -290, -290, -290, -289, -289, -289, -288, -288, -288, -288, -287, -287, -287, -286, -286, -286, -285, -285, -285, -285, -284, -284, -284, -283, -283, -283, -282, -282, -282, -282, -281, -281, -281, -280, -280, -280, -279, -279, -279, -279, -278, -278, -278, -277, -277, -277, -276, -276, -276, -276, -275, -275, -275, -274, -274, -274, -273, -273, -273, -273, -272, -272, -272, -271, -271, -271, -270, -270, -270, -270, -269, -269, -269, -268, -268, -268, -267, -267, -267, -267, -266, -266, -266, -265, -265, -265, -264, -264, -264, -263, -263, -263, -263, -262, -262, -262, -261, -261, -261, -260, -260, -260, -260, -259, -259, -259, -258, -258, -258, -257, -257, -257, -257, -256, -256, -256, -255, -255, -255, -254, -254, -254, -254, -253, -253, -253, -252, -252, -252, -251, -251, -251, -251, -250, -250, -250, -249, -249, -249, -248, -248, -248, -248, -247, -247, -247, -246, -246, -246, -245, -245, -245, -245, -244, -244, -244, -243, -243, -243, -242, -242, -242, -242, -241, -241, -241, -240, -240, -240, -239, -239, -239, -239, -238, -238, -238, -237, -237, -237, -236, -236, -236, -235, -235, -235, -235, -234, -234, -234, -233, -233, -233, -232, -232, -232, -232, -231, -231, -231, -230, -230, -230, -229, -229, -229, -229, -228, -228, -228, -227, -227, -227, -226, -226, -226, -226, -225, -225, -225, -224, -224, -224, -223, -223, -223, -223, -222, -222, -222, -221, -221, -221, -220, -220, -220, -220, -219, -219, -219, -218, -218, -218, -217, -217, -217, -217, -216, -216, -216, -215, -215, -215, -214, -214, -214, -214, -213, -213, -213, -212, -212, -212, -211, -211, -211, -211, -210, -210, -210, -209, -209, -209, -208, -208, -208, -208, -207, -207, -207, -206, -206, -206, -205, -205, -205, -204, -204, -204, -204, -203, -203, -203, -202, -202, -202, -201, -201, -201, -201, -200, -200, -200, -199, -199, -199, -198, -198, -198, -198, -197, -197, -197, -196, -196, -196, -195, -195, -195, -195, -194, -194, -194, -193, -193, -193, -192, -192, -192, -192, -191, -191, -191, -190, -190, -190, -189, -189, -189, -189, -188, -188, -188, -187, -187, -187, -186, -186, -186, -186, -185, -185, -185, -184, -184, -184, -183, -183, -183, -183, -182, -182, -182, -181, -181, -181, -180, -180, -180, -180, -179, -179, -179, -178, -178, -178, -177, -177, -177, -176, -176, -176, -176, -175, -175, -175, -174, -174, -174, -173, -173, -173, -173, -172, -172, -172, -171, -171, -171, -170, -170, -170, -170, -169, -169, -169, -168, -168, -168, -167, -167, -167, -167, -166, -166, -166, -165, -165, -165, -164, -164, -164, -164, -163, -163, -163, -162, -162, -162, -161, -161, -161, -161, -160, -160, -160, -159, -159, -159, -158, -158, -158, -158, -157, -157, -157, -156, -156, -156, -155, -155, -155, -155, -154, -154, -154, -153, -153, -153, -152, -152, -152, -152, -151, -151, -151, -150, -150, -150, -149, -149, -149, -149, -148, -148, -148, -147, -147, -147, -146, -146, -146, -145, -145, -145, -145, -144, -144, -144, -143, -143, -143, -142, -142, -142, -142, -141, -141, -141, -140, -140, -140, -139, -139, -139, -139, -138, -138, -138, -137, -137, -137, -136, -136, -136, -136, -135, -135, -135, -134, -134, -134, -133, -133, -133, -133, -132, -132, -132, -131, -131, -131, -130, -130, -130, -130, -129, -129, -129, -128, -128, -128, -127, -127, -127, -127, -126, -126, -126, -125, -125, -125, -124, -124, -124, -124, -123, -123, -123, -122, -122, -122, -121, -121, -121, -121, -120, -120, -120, -119, -119, -119, -118, -118, -118, -117, -117, -117, -117, -116, -116, -116, -115, -115, -115, -114, -114, -114, -114, -113, -113, -113, -112, -112, -112, -111, -111, -111, -111, -110, -110, -110, -109, -109, -109, -108, -108, -108, -108, -107, -107, -107, -106, -106, -106, -105, -105, -105, -105, -104, -104, -104, -103, -103, -103, -102, -102, -102, -102, -101, -101, -101, -100, -100, -100, -99, -99, -99, -99, -98, -98, -98, -97, -97, -97, -96, -96, -96, -96, -95, -95, -95, -94, -94, -94, -93, -93, -93, -93, -92, -92, -92, -91, -91, -91, -90, -90, -90, -89, -89, -89, -89, -88, -88, -88, -87, -87, -87, -86, -86, -86, -86, -85, -85, -85, -84, -84, -84, -83, -83, -83, -83, -82, -82, -82, -81, -81, -81, -80, -80, -80, -80, -79, -79, -79, -78, -78, -78, -77, -77, -77, -77, -76, -76, -76, -75, -75, -75, -74, -74, -74, -74, -73, -73, -73, -72, -72, -72, -71, -71, -71, -71, -70, -70, -70, -69, -69, -69, -68, -68, -68, -68, -67, -67, -67, -66, -66, -66, -65, -65, -65, -65, -64, -64, -64, -63, -63, -63, -62, -62, -62, -62, -61, -61, -61, -60, -60, -60, -59, -59, -59, -58, -58, -58, -58, -57, -57, -57, -56, -56, -56, -55, -55, -55, -55, -54, -54, -54, -53, -53, -53, -52, -52, -52, -52, -51, -51, -51, -50, -50, -50, -49, -49, -49, -49, -48, -48, -48, -47, -47, -47, -46, -46, -46, -46, -45, -45, -45, -44, -44, -44, -43, -43, -43, -43, -42, -42, -42, -41, -41, -41, -40, -40, -40, -40, -39, -39, -39, -38, -38, -38, -37, -37, -37, -37, -36, -36, -36, -35, -35, -35, -34, -34, -34, -34, -33, -33, -33, -32, -32, -32, -31, -31, -31, -30, -30, -30, -30, -29, -29, -29, -28, -28, -28, -27, -27, -27, -27, -26, -26, -26, -25, -25, -25, -24, -24, -24, -24, -23, -23, -23, -22, -22, -22, -21, -21, -21, -21, -20, -20, -20, -19, -19, -19, -18, -18, -18, -18, -17, -17, -17, -16, -16, -16, -15, -15, -15, -15, -14, -14, -14, -13, -13, -13, -12, -12, -12, -12, -11, -11, -11, -10, -10, -10, -9, -9, -9, -9, -8, -8, -8, -7, -7, -7, -6, -6, -6, -6, -5, -5, -5, -4, -4, -4, -3, -3, -3, -3, -2, -2, -2, -1, -1, -1, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10, 10, 11, 11, 11, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 15, 15, 15, 16, 16, 16, 16, 17, 17, 17, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 21, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 24, 25, 25, 25, 25, 26, 26, 26, 27, 27, 27, 28, 28, 28, 29, 29, 29, 29, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 38, 39, 39, 39, 40, 40, 40, 41, 41, 41, 41, 42, 42, 42, 43, 43, 43, 44, 44, 44, 44, 45, 45, 45, 46, 46, 46, 47, 47, 47, 47, 48, 48, 48, 49, 49, 49, 50, 50, 50, 50, 51, 51, 51, 52, 52, 52, 53, 53, 53, 53, 54, 54, 54, 55, 55, 55, 56, 56, 56, 56, 57, 57, 57, 58, 58, 58, 59, 59, 59, 60, 60, 60, 60, 61, 61, 61, 62, 62, 62, 63, 63, 63, 63, 64, 64, 64, 65, 65, 65, 66, 66, 66, 66, 67, 67, 67, 68, 68, 68, 69, 69, 69, 69, 70, 70, 70, 71, 71, 71, 72, 72, 72, 72, 73, 73, 73, 74, 74, 74, 75, 75, 75, 75, 76, 76, 76, 77, 77, 77, 78, 78, 78, 78, 79, 79, 79, 80, 80, 80, 81, 81, 81, 81, 82, 82, 82, 83, 83, 83, 84, 84, 84, 84, 85, 85, 85, 86, 86, 86, 87, 87, 87, 88, 88, 88, 88, 89, 89, 89, 90, 90, 90, 91, 91, 91, 91, 92, 92, 92, 93, 93, 93, 94, 94, 94, 94, 95, 95, 95, 96, 96, 96, 97, 97, 97, 97, 98, 98, 98, 99, 99, 99, 100, 100, 100, 100, 101, 101, 101, 102, 102, 102, 103, 103, 103, 103, 104, 104, 104, 105, 105, 105, 106, 106, 106, 106, 107, 107, 107, 108, 108, 108, 109, 109, 109, 109, 110, 110, 110, 111, 111, 111, 112, 112, 112, 112, 113, 113, 113, 114, 114, 114, 115, 115, 115, 116, 116, 116, 116, 117, 117, 117, 118, 118, 118, 119, 119, 119, 119, 120, 120, 120, 121, 121, 121, 122, 122, 122, 122, 123, 123, 123, 124, 124, 124, 125, 125, 125, 125, 126, 126, 126, 127, 127, 127, 128, 128, 128, 128, 129, 129, 129, 130, 130, 130, 131, 131, 131, 131, 132, 132, 132, 133, 133, 133, 134, 134, 134, 134, 135, 135, 135, 136, 136, 136, 137, 137, 137, 137, 138, 138, 138, 139, 139, 139, 140, 140, 140, 140, 141, 141, 141, 142, 142, 142, 143, 143, 143, 143, 144, 144, 144, 145, 145, 145, 146, 146, 146, 147, 147, 147, 147, 148, 148, 148, 149, 149, 149, 150, 150, 150, 150, 151, 151, 151, 152, 152, 152, 153, 153, 153, 153, 154, 154, 154, 155, 155, 155, 156, 156, 156, 156, 157, 157, 157, 158, 158, 158, 159, 159, 159, 159, 160, 160, 160, 161, 161, 161, 162, 162, 162, 162, 163, 163, 163, 164, 164, 164, 165, 165, 165, 165, 166, 166, 166, 167, 167, 167, 168, 168, 168, 168, 169, 169, 169, 170, 170, 170, 171, 171, 171, 171, 172, 172, 172, 173, 173, 173, 174, 174, 174, 175, 175, 175, 175, 176, 176, 176, 177, 177, 177, 178, 178, 178, 178, 179, 179, 179, 180, 180, 180, 181, 181, 181, 181, 182, 182, 182, 183, 183, 183, 184, 184, 184, 184, 185, 185, 185, 186, 186, 186, 187, 187, 187, 187, 188, 188, 188, 189, 189, 189, 190, 190, 190, 190, 191, 191, 191, 192, 192, 192, 193, 193, 193, 193, 194, 194, 194, 195, 195, 195, 196, 196, 196, 196, 197, 197, 197, 198, 198, 198, 199, 199, 199, 199, 200, 200, 200, 201, 201, 201, 202, 202, 202, 202, 203, 203, 203, 204, 204, 204, 205, 205, 205, 206, 206, 206, 206, 207, 207, 207, 208, 208, 208, 209, 209, 209, 209, 210, 210, 210, 211, 211, 211, 212, 212, 212, 212, 213, 213, 213, 214, 214, 214, 215, 215, 215, 215, 216, 216, 216, 217, 217, 217, 218, 218, 218, 218, 219, 219, 219, 220, 220, 220, 221, 221, 221, 221, 222, 222, 222, 223, 223, 223, 224, 224, 224, 224, 225, 225, 225, 226, 226, 226, 227, 227, 227, 227, 228, 228, 228, 229, 229, 229, 230, 230, 230, 230, 231, 231, 231, 232, 232, 232, 233, 233, 233, 234, 234, 234, 234, 235, 235, 235, 236, 236, 236, 237, 237, 237, 237, 238, 238, 238, 239, 239, 239, 240, 240, 240, 240, 241, 241, 241, 242, 242, 242, 243, 243, 243, 243, 244, 244, 244, 245, 245, 245, 246, 246, 246, 246, 247, 247, 247, 248, 248, 248, 249, 249, 249, 249, 250, 250, 250, 251, 251, 251, 252, 252, 252, 252, 253, 253, 253, 254, 254, 254, 255, 255, 255, 255, 256, 256, 256, 257, 257, 257, 258, 258, 258, 258, 259, 259, 259, 260, 260, 260, 261, 261, 261, 261, 262, 262, 262, 263, 263, 263, 264, 264, 264, 265, 265, 265, 265, 266, 266, 266, 267, 267, 267, 268, 268, 268, 268, 269, 269, 269, 270, 270, 270, 271, 271, 271, 271, 272, 272, 272, 273, 273, 273, 274, 274, 274, 274, 275, 275, 275, 276, 276, 276, 277, 277, 277, 277, 278, 278, 278, 279, 279, 279, 280, 280, 280, 280, 281, 281, 281, 282, 282, 282, 283, 283, 283, 283, 284, 284, 284, 285, 285, 285, 286, 286, 286, 286, 287, 287, 287, 288, 288, 288, 289, 289, 289, 289, 290, 290, 290, 291, 291, 291, 292, 292, 292, 293, 293, 293]));
        DigitLowerTable.set(JSIL.Array.New($T01(), ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f"]));
        DigitUpperTable.set(JSIL.Array.New($T01(), ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F"]));
        TenPowersList.set(JSIL.Array.New($T0C(), [$T0C().Create(1, 0, 0), $T0C().Create(10, 0, 0), $T0C().Create(100, 0, 0), $T0C().Create(1000, 0, 0), $T0C().Create(10000, 0, 0), $T0C().Create(100000, 0, 0), $T0C().Create(1000000, 0, 0), $T0C().Create(10000000, 0, 0), $T0C().Create(16113920, 5, 0), $T0C().Create(10144256, 59, 0), $T0C().Create(779264, 596, 0), $T0C().Create(7792640, 5960, 0), $T0C().Create(10817536, 59604, 0), $T0C().Create(7512064, 596046, 0), $T0C().Create(8011776, 5960464, 0), $T0C().Create(13008896, 9272996, 3), $T0C().Create(12648448, 8843887, 35), $T0C().Create(9043968, 4552797, 355), $T0C().Create(6553600, 11973543, 3552)]));
        DecHexDigits.set(JSIL.Array.New($T05(), [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153]));
      };

      function NumberFormatter_GetInstance (fp) {
        if (fp !== null) {
          if ($thisType.userFormatProvider === null) {
            $T16().CompareExchange$b1($thisType)(/* ref */ new JSIL.MemberReference($thisType, "userFormatProvider"), new $thisType(null), null);
          }
          var result = $thisType.userFormatProvider;
        } else {
          var res = $thisType.threadNumberFormatter;
          $thisType.threadNumberFormatter = null;
          if (res === null) {
            result = new $thisType($T00().get_CurrentThread());
          } else {
            res.set_CurrentCulture($T00().get_CurrentThread().get_CurrentCulture());
            result = res;
          }
        }
        return result;
      };

      function NumberFormatter_GetNumberFormatInstance (fp) {
        var flag = (this._nfi !== null) &&
        (fp === null);
        if (flag) {
          var result = this._nfi;
        } else {
          result = $T09().GetInstance(fp);
        }
        return result;
      };

      function NumberFormatter_GetTenPowerOf (i) {
        return $thisType.TenPowersList[i];
      };

      function NumberFormatter_Init$13 (format) {
        this._val1 = this._val2 = this._val3 = this._val4 = 0;
        this._offset = 0;
        this._NaN = this._infinity = false;
        this._isCustomFormat = false;
        this._specifierIsUpper = true;
        this._precision = -1;
        var flag = (format === null) ||
        ((format.length | 0) === 0);
        if (flag) {
          this._specifier = "G";
        } else {
          var specifier = (format[0]);
          var flag2 = ((specifier.charCodeAt(0) | 0) >= (("a").charCodeAt(0) | 0)) &&
          ((specifier.charCodeAt(0) | 0) <= (("z").charCodeAt(0) | 0));
          if (flag2) {
            specifier = String.fromCharCode(((String.fromCharCode((specifier.charCodeAt(0) | 0) - (("a").charCodeAt(0) | 0))).charCodeAt(0) | 0) + (("A").charCodeAt(0) | 0));
            this._specifierIsUpper = false;
          } else {
            var flag3 = ((specifier.charCodeAt(0) | 0) < (("A").charCodeAt(0) | 0)) ||
            ((specifier.charCodeAt(0) | 0) > (("Z").charCodeAt(0) | 0));
            if (flag3) {
              this._isCustomFormat = true;
              this._specifier = "0";
              return;
            }
          }
          this._specifier = specifier;
          var flag4 = (format.length | 0) > 1;
          if (flag4) {
            this._precision = ($thisType.ParsePrecision(format) | 0);
            if ((this._precision | 0) === -2) {
              this._isCustomFormat = true;
              this._specifier = "0";
              this._precision = -1;
            }
          }
        }
      };

      function NumberFormatter_Init$14 (format, value, defPrecision) {
        this.Init(format);
        this._defPrecision = (defPrecision | 0);
        this._positive = (value | 0) >= 0;
        var flag = ((value | 0) === 0) ||
        (((this._specifier).charCodeAt(0) | 0) === (("X").charCodeAt(0) | 0));
        if (flag) {
          this.InitHex(($T0C().FromNumber(value)).ToUInt64());
        } else {
          var flag2 = (value | 0) < 0;
          if (flag2) {
            value = (-value | 0);
          }
          $S0C().CallVirtual("InitDecHexDigits", null, this, (value >>> 0));
          this._decPointPos = this._digitsLen = (this.DecHexLen() | 0);
        }
      };

      function NumberFormatter_Init$15 (format, value, defPrecision) {
        this.Init(format);
        this._defPrecision = (defPrecision | 0);
        this._positive = true;
        if (((value >>> 0) === 0) || (((this._specifier).charCodeAt(0) | 0) === (("X").charCodeAt(0) | 0))) {
          this.InitHex($T0F().FromNumber(value));
        } else {
          $S0C().CallVirtual("InitDecHexDigits", null, this, value);
          this._decPointPos = this._digitsLen = (this.DecHexLen() | 0);
        }
      };

      function NumberFormatter_Init$16 (format, value) {
        this.Init(format);
        this._defPrecision = 19;
        this._positive = $T0C().op_GreaterThanOrEqual(value, $T0C().Create(0, 0, 0));
        var flag = !$T0C().op_Inequality(value, $T0C().Create(0, 0, 0)) ||
        (((this._specifier).charCodeAt(0) | 0) === (("X").charCodeAt(0) | 0));
        if (flag) {
          this.InitHex(value.ToUInt64());
        } else {
          var flag2 = $T0C().op_LessThan(value, $T0C().Create(0, 0, 0));
          if (flag2) {
            value = $T0C().op_UnaryNegation(value);
          }
          $S0D().CallVirtual("InitDecHexDigits", null, this, value.ToUInt64());
          this._decPointPos = this._digitsLen = (this.DecHexLen() | 0);
        }
      };

      function NumberFormatter_Init$17 (format, value) {
        this.Init(format);
        this._defPrecision = 20;
        this._positive = true;
        var flag = !$T0F().op_Inequality(value, $T0F().Create(0, 0, 0)) ||
        (((this._specifier).charCodeAt(0) | 0) === (("X").charCodeAt(0) | 0));
        if (flag) {
          this.InitHex(value);
        } else {
          $S0D().CallVirtual("InitDecHexDigits", null, this, value);
          this._decPointPos = this._digitsLen = (this.DecHexLen() | 0);
        }
      };

      function NumberFormatter_Init$18 (format, value, defPrecision) {
        this.Init(format);
        this._defPrecision = (defPrecision | 0);
        var bits = $T17().DoubleToInt64Bits(value);
        this._positive = $T0C().op_GreaterThanOrEqual(bits, $T0C().Create(0, 0, 0));
        bits = $T0C().op_BitwiseAnd(bits, $T0C().Create(16777215, 16777215, 32767));
        var flag = $T0C().op_Equality(bits, $T0C().Create(0, 0, 0));
        if (flag) {
          this._decPointPos = 1;
          this._digitsLen = 0;
          this._positive = true;
        } else {
          var e = (($T0C().op_RightShift(bits, 52)).ToNumber(4294967295, true) | 0);
          var i = $T0C().op_BitwiseAnd(bits, $T0C().Create(16777215, 16777215, 15));
          var flag2 = e === 2047;
          if (flag2) {
            this._NaN = $T0C().op_GreaterThan(i, $T0C().Create(0, 0, 0));
            this._infinity = $T0C().op_Equality(i, $T0C().Create(0, 0, 0));
          } else {
            var expAdjust = 0;
            var flag3 = e === 0;
            if (flag3) {
              e = 1;
              var scale = ($thisType.ScaleOrder(i) | 0);
              if (scale < 15) {
                expAdjust = ((scale - 15) | 0);
                i = $T0C().op_Multiplication(i, $thisType.GetTenPowerOf((-expAdjust | 0)));
              }
            } else {
              i = $T0C().op_Multiplication(
                $T0C().op_Addition(
                  $T0C().op_Addition(i, $T0C().Create(16777215, 16777215, 15)),
                  $T0C().Create(1, 0, 0)
                ),
                $T0C().Create(10, 0, 0)
              );
              expAdjust = -1;
            }
            var lo = $T0F().FromNumber(i.ToNumber(4294967295, false));
            var hi = $T0F().op_RightShift(i.ToUInt64(), 32);
            var lo2 = $thisType.MantissaBitsTable[e];
            var hi2 = $T0F().op_RightShift(lo2, 32);
            lo2 = $T0F().FromNumber(lo2.ToNumber(4294967295, false));
            var mm = $T0F().op_Addition(
              $T0F().op_Addition(
                $T0F().op_Multiplication(hi, lo2),
                $T0F().op_Multiplication(lo, hi2)
              ),
              $T0F().op_RightShift($T0F().op_Multiplication(lo, lo2), 32)
            );

            for (var res = ($T0F().op_Addition(
                  $T0F().op_Multiplication(hi, hi2),
                  $T0F().op_RightShift(mm, 32)
                )).ToInt64(); $T0C().op_LessThan(res, $T0C().Create(12648448, 8843887, 35)); ) {
              mm = $T0F().op_Multiplication(
                $T0F().op_BitwiseAnd(mm, $T0F().FromNumber(-1)),
                $T0F().Create(10, 0, 0)
              );
              res = $T0C().op_Addition(
                $T0C().op_Multiplication(res, $T0C().Create(10, 0, 0)),
                ($T0F().op_RightShift(mm, 32)).ToInt64()
              );
              var num = expAdjust;
              expAdjust = ((num - 1) | 0);
            }
            var flag5 = $T0F().op_GreaterThan(
              $T0F().op_BitwiseAnd(mm, $T0F().FromNumber(-2147483648)),
              $T0F().Create(0, 0, 0)
            );
            if (flag5) {
              var num2 = res;
              res = $T0C().op_Addition(num2, $T0C().Create(1, 0, 0));
            }
            var order = 17;
            this._decPointPos = ((((($thisType.TensExponentTable[e] | 0) + expAdjust) | 0) + order) | 0);
            var initialPrecision = (this.InitialFloatingPrecision() | 0);
            var flag6 = order > initialPrecision;
            if (flag6) {
              var val = $thisType.GetTenPowerOf(((order - initialPrecision) | 0));
              res = $T0C().op_Division($T0C().op_Addition(res, $T0C().op_RightShift(val, 1)), val);
              order = initialPrecision;
            }
            var flag7 = $T0C().op_GreaterThanOrEqual(res, $thisType.GetTenPowerOf(order));
            if (flag7) {
              num = order;
              order = ((num + 1) | 0);
              num = (this._decPointPos | 0);
              this._decPointPos = ((num + 1) | 0);
            }
            $S0D().CallVirtual("InitDecHexDigits", null, this, res.ToUInt64());
            this._offset = (this.CountTrailingZeros() | 0);
            this._digitsLen = ((order - (this._offset | 0)) | 0);
          }
        }
      };

      function NumberFormatter_Init$19 (format, value) {
        this.Init(format);
        this._defPrecision = 100;
        var bits = $T18().GetBits(value);
        var scale = ((bits[3] | 0) & 2031616) >> 16;
        this._positive = (bits[3] | 0) >= 0;
        var flag = !(((bits[0] | 0) !== 0) ||
          ((bits[1] | 0) !== 0)) &&
        ((bits[2] | 0) === 0);
        if (flag) {
          this._decPointPos = (-scale | 0);
          this._positive = true;
          this._digitsLen = 0;
        } else {
          this.InitDecHexDigits((bits[2] >>> 0), ($T0C().op_BitwiseOr(
                $T0C().op_LeftShift($T0C().FromNumber(bits[1]), 32),
                ($T0F().FromNumber(bits[0])).ToInt64()
              )).ToUInt64());
          this._digitsLen = (this.DecHexLen() | 0);
          this._decPointPos = (((this._digitsLen | 0) - scale) | 0);
          if (((this._precision | 0) !== -1) || (((this._specifier).charCodeAt(0) | 0) !== (("G").charCodeAt(0) | 0))) {
            this._offset = (this.CountTrailingZeros() | 0);
            this._digitsLen = (((this._digitsLen | 0) - (this._offset | 0)) | 0);
          }
        }
      };

      function NumberFormatter_InitDecHexDigits$1A (value) {
        var flag = (value >>> 0) >= 100000000;
        if (flag) {
          var div = ((((value >>> 0) / 100000000) >>> 0) | 0);
          value = (((value >>> 0) - (Math.imul(100000000, div) >>> 0)) >>> 0);
          this._val2 = ($thisType.FastToDecHex(div) >>> 0);
        }
        this._val1 = ($thisType.ToDecHex((value | 0)) >>> 0);
      };

      function NumberFormatter_InitDecHexDigits$1B (value) {
        var flag = $T0F().op_GreaterThanOrEqual(value, $T0F().Create(16113920, 5, 0));
        if (flag) {
          var div = ($T0F().op_Division(value, $T0F().Create(16113920, 5, 0))).ToInt64();
          value = $T0F().op_Subtraction(value, ($T0C().op_Multiplication($T0C().Create(16113920, 5, 0), div)).ToUInt64());
          var flag2 = $T0C().op_GreaterThanOrEqual(div, $T0C().Create(16113920, 5, 0));
          if (flag2) {
            var div2 = (($T0C().op_Division(div, $T0C().Create(16113920, 5, 0))).ToNumber(4294967295, true) | 0);
            div = $T0C().op_Subtraction(div, $T0C().op_Multiplication(
                $T0C().FromNumber(div2),
                $T0C().Create(16113920, 5, 0)
              ));
            this._val3 = ($thisType.ToDecHex(div2) >>> 0);
          }
          var flag3 = $T0C().op_GreaterThan(div, $T0C().Create(0, 0, 0));
          if (flag3) {
            this._val2 = ($thisType.ToDecHex(div.ToNumber(4294967295, true)) >>> 0);
          }
        }
        var flag4 = $T0F().op_GreaterThan(value, $T0F().Create(0, 0, 0));
        if (flag4) {
          this._val1 = ($thisType.ToDecHex(value.ToNumber(4294967295, true)) >>> 0);
        }
      };

      function NumberFormatter_InitDecHexDigits$1C (hi, lo) {
        var flag = (hi >>> 0) === 0;
        if (flag) {
          $S0D().CallVirtual("InitDecHexDigits", null, this, lo);
        } else {
          var divhi = (((hi >>> 0) / 100000000) >>> 0);
          var remhi = $T0F().FromNumber((((hi >>> 0) - (Math.imul(divhi, 100000000) >>> 0)) >>> 0));
          var divlo = $T0F().op_Division(lo, $T0F().Create(16113920, 5, 0));
          var remlo = $T0F().op_Addition(
            $T0F().op_Subtraction(lo, $T0F().op_Multiplication(divlo, $T0F().Create(16113920, 5, 0))),
            $T0F().op_Multiplication(remhi, $T0F().Create(9551616, 0, 0))
          );
          hi = divhi;
          lo = $T0F().op_Addition(divlo, $T0F().op_Multiplication(remhi, $T0F().Create(1950817, 10995, 0)));
          divlo = $T0F().op_Division(remlo, $T0F().Create(16113920, 5, 0));
          remlo = $T0F().op_Subtraction(remlo, $T0F().op_Multiplication(divlo, $T0F().Create(16113920, 5, 0)));
          lo = $T0F().op_Addition(lo, divlo);
          this._val1 = ($thisType.ToDecHex(remlo.ToNumber(4294967295, true)) >>> 0);
          divlo = $T0F().op_Division(lo, $T0F().Create(16113920, 5, 0));
          remlo = $T0F().op_Subtraction(lo, $T0F().op_Multiplication(divlo, $T0F().Create(16113920, 5, 0)));
          lo = divlo;
          var flag2 = (hi >>> 0) > 0;
          if (flag2) {
            lo = $T0F().op_Addition(lo, $T0F().op_Multiplication(
                $T0F().FromNumber(hi),
                $T0F().Create(1950817, 10995, 0)
              ));
            remlo = $T0F().op_Addition(remlo, $T0F().op_Multiplication(
                $T0F().FromNumber(hi),
                $T0F().Create(9551616, 0, 0)
              ));
            divlo = $T0F().op_Division(remlo, $T0F().Create(16113920, 5, 0));
            lo = $T0F().op_Addition(lo, divlo);
            remlo = $T0F().op_Subtraction(remlo, $T0F().op_Multiplication(divlo, $T0F().Create(16113920, 5, 0)));
          }
          this._val2 = ($thisType.ToDecHex(remlo.ToNumber(4294967295, true)) >>> 0);
          var flag3 = $T0F().op_GreaterThanOrEqual(lo, $T0F().Create(16113920, 5, 0));
          if (flag3) {
            divlo = $T0F().op_Division(lo, $T0F().Create(16113920, 5, 0));
            lo = $T0F().op_Subtraction(lo, $T0F().op_Multiplication(divlo, $T0F().Create(16113920, 5, 0)));
            this._val4 = ($thisType.ToDecHex(divlo.ToNumber(4294967295, true)) >>> 0);
          }
          this._val3 = ($thisType.ToDecHex(lo.ToNumber(4294967295, true)) >>> 0);
        }
      };

      function NumberFormatter_InitHex (value) {
        var defPrecision = (this._defPrecision | 0);
        if (defPrecision === 10) {
          value = $T0F().FromNumber(value.ToNumber(4294967295, false));
        }
        this._val1 = (value.ToNumber(4294967295, false) >>> 0);
        this._val2 = (($T0F().op_RightShift(value, 32)).ToNumber(4294967295, false) >>> 0);
        this._decPointPos = this._digitsLen = (this.DecHexLen() | 0);
        var flag = $T0F().op_Equality(value, $T0F().Create(0, 0, 0));
        if (flag) {
          this._decPointPos = 1;
        }
      };

      function NumberFormatter_InitialFloatingPrecision () {
        if (((this._specifier).charCodeAt(0) | 0) === (("R").charCodeAt(0) | 0)) {
          var result = (((this._defPrecision | 0) + 2) | 0);
        } else {
          if ((this._precision | 0) < (this._defPrecision | 0)) {
            result = (this._defPrecision | 0);
          } else {
            if (((this._specifier).charCodeAt(0) | 0) === (("G").charCodeAt(0) | 0)) {
              result = ($T0E().Min((((this._defPrecision | 0) + 2) | 0), this._precision) | 0);
            } else {
              if (((this._specifier).charCodeAt(0) | 0) === (("E").charCodeAt(0) | 0)) {
                result = ($T0E().Min((((this._defPrecision | 0) + 2) | 0), (((this._precision | 0) + 1) | 0)) | 0);
              } else {
                result = (this._defPrecision | 0);
              }
            }
          }
        }
        return result;
      };

      function NumberFormatter_IntegerToString (format, fp) {
        var nfi = this.GetNumberFormatInstance(fp);
        var specifier = this._specifier;
        if ((specifier.charCodeAt(0) | 0) <= (("N").charCodeAt(0) | 0)) {
          switch (specifier) {
            case "C":
              var result = this.FormatCurrency(this._precision, nfi);
              return result;

            case "D":
              result = this.FormatDecimal(this._precision, nfi);
              return result;

            case "E":
              result = this.FormatExponential(this._precision, nfi);
              return result;

            case "F":
              result = this.FormatFixedPoint(this._precision, nfi);
              return result;

            case "G":
              if ((this._precision | 0) <= 0) {
                result = this.FormatDecimal(-1, nfi);
                return result;
              }
              result = this.FormatGeneral(this._precision, nfi);
              return result;

            default:
              if ((specifier.charCodeAt(0) | 0) === (("N").charCodeAt(0) | 0)) {
                result = this.FormatNumber(this._precision, nfi);
                return result;
              }
              break;

          }
        } else {
          if ((specifier.charCodeAt(0) | 0) === (("P").charCodeAt(0) | 0)) {
            result = this.FormatPercent(this._precision, nfi);
            return result;
          }
          if ((specifier.charCodeAt(0) | 0) === (("X").charCodeAt(0) | 0)) {
            result = this.FormatHexadecimal(this._precision);
            return result;
          }
        }
        var isCustomFormat = this._isCustomFormat;
        if (!isCustomFormat) {
          throw $S0E().Construct(("The specified format '" + format + "' is invalid"));
        }
        result = this.FormatCustom(format, nfi);
        return result;
      };

      function NumberFormatter_IsZeroOnly (sb) {

        for (var i = 0; i < (sb.get_Length() | 0); ) {
          var flag = $T01().IsDigit(sb.get_Chars(i)) &&
          (((sb.get_Chars(i)).charCodeAt(0) | 0) !== (("0").charCodeAt(0) | 0));
          if (flag) {
            var result = false;
            return result;
          }
          var num = i;
          i = ((num + 1) | 0);
        }
        result = true;
        return result;
      };

      function NumberFormatter_Multiply10 (count) {
        if (!(((count | 0) <= 0) || ((this._digitsLen | 0) === 0))) {
          this._decPointPos = (((this._decPointPos | 0) + (count | 0)) | 0);
        }
      };

      function NumberFormatter_NumberToString$1D (format, value, fp) {
        return $S0F().CallStatic($thisType, "NumberToString", null, format, value, fp);
      };

      function NumberFormatter_NumberToString$1E (format, value, fp) {
        return $S0F().CallStatic($thisType, "NumberToString", null, format, value, fp);
      };

      function NumberFormatter_NumberToString$1F (format, value, fp) {
        return $S0F().CallStatic($thisType, "NumberToString", null, format, value, fp);
      };

      function NumberFormatter_NumberToString$20 (format, value, fp) {
        return $S0F().CallStatic($thisType, "NumberToString", null, format, value, fp);
      };

      function NumberFormatter_NumberToString$21 (format, value, fp) {
        var inst = $thisType.GetInstance(fp);
        $S10().CallVirtual("Init", null, inst, format, value, 10);
        var res = inst.IntegerToString(format, fp);
        inst.Release();
        return res;
      };

      function NumberFormatter_NumberToString$22 (format, value, fp) {
        var inst = $thisType.GetInstance(fp);
        $S11().CallVirtual("Init", null, inst, format, value, 10);
        var res = inst.IntegerToString(format, fp);
        inst.Release();
        return res;
      };

      function NumberFormatter_NumberToString$23 (format, value, fp) {
        var inst = $thisType.GetInstance(fp);
        $S12().CallVirtual("Init", null, inst, format, value);
        var res = inst.IntegerToString(format, fp);
        inst.Release();
        return res;
      };

      function NumberFormatter_NumberToString$24 (format, value, fp) {
        var inst = $thisType.GetInstance(fp);
        $S13().CallVirtual("Init", null, inst, format, value);
        var res = inst.IntegerToString(format, fp);
        inst.Release();
        return res;
      };

      function NumberFormatter_NumberToString$25 (format, value, fp) {
        var inst = $thisType.GetInstance(fp);
        $S14().CallVirtual("Init", null, inst, format, value, 7);
        var nfi = inst.GetNumberFormatInstance(fp);
        var naN = inst._NaN;
        if (naN) {
          var res = nfi.get_NaNSymbol();
        } else {
          var infinity = inst._infinity;
          if (infinity) {
            var positive = inst._positive;
            if (positive) {
              res = nfi.get_PositiveInfinitySymbol();
            } else {
              res = nfi.get_NegativeInfinitySymbol();
            }
          } else {
            var flag = ((inst._specifier).charCodeAt(0) | 0) === (("R").charCodeAt(0) | 0);
            if (flag) {
              res = $S15().CallVirtual("FormatRoundtrip", null, inst, value, nfi);
            } else {
              res = inst.NumberToString(format, nfi);
            }
          }
        }
        inst.Release();
        return res;
      };

      function NumberFormatter_NumberToString$26 (format, value, fp) {
        var inst = $thisType.GetInstance(fp);
        $S14().CallVirtual("Init", null, inst, format, value, 15);
        var nfi = inst.GetNumberFormatInstance(fp);
        var naN = inst._NaN;
        if (naN) {
          var res = nfi.get_NaNSymbol();
        } else {
          var infinity = inst._infinity;
          if (infinity) {
            var positive = inst._positive;
            if (positive) {
              res = nfi.get_PositiveInfinitySymbol();
            } else {
              res = nfi.get_NegativeInfinitySymbol();
            }
          } else {
            var flag = ((inst._specifier).charCodeAt(0) | 0) === (("R").charCodeAt(0) | 0);
            if (flag) {
              res = $S16().CallVirtual("FormatRoundtrip", null, inst, value, nfi);
            } else {
              res = inst.NumberToString(format, nfi);
            }
          }
        }
        inst.Release();
        return res;
      };

      function NumberFormatter_NumberToString$27 (format, value, fp) {
        var inst = $thisType.GetInstance(fp);
        $S17().CallVirtual("Init", null, inst, format, value);
        var res = inst.NumberToString(format, inst.GetNumberFormatInstance(fp));
        inst.Release();
        return res;
      };

      function NumberFormatter_NumberToString$28 (format, nfi) {
        var specifier = this._specifier;
        if ((specifier.charCodeAt(0) | 0) <= (("N").charCodeAt(0) | 0)) {
          switch (specifier) {
            case "C":
              var result = this.FormatCurrency(this._precision, nfi);
              return result;

            case "D":
              break;

            case "E":
              result = this.FormatExponential(this._precision, nfi);
              return result;

            case "F":
              result = this.FormatFixedPoint(this._precision, nfi);
              return result;

            case "G":
              result = this.FormatGeneral(this._precision, nfi);
              return result;

            default:
              if ((specifier.charCodeAt(0) | 0) === (("N").charCodeAt(0) | 0)) {
                result = this.FormatNumber(this._precision, nfi);
                return result;
              }
              break;

          }
        } else {
          if ((specifier.charCodeAt(0) | 0) === (("P").charCodeAt(0) | 0)) {
            result = this.FormatPercent(this._precision, nfi);
            return result;
          }
          if ((specifier.charCodeAt(0) | 0) !== (("X").charCodeAt(0) | 0)) {
          }
        }
        var isCustomFormat = this._isCustomFormat;
        if (!isCustomFormat) {
          throw $S0E().Construct(("The specified format '" + format + "' is invalid"));
        }
        result = this.FormatCustom(format, nfi);
        return result;
      };

      function NumberFormatter_ParsePrecision (format) {
        var precision = 0;

        for (var i = 1; i < (format.length | 0); ) {
          var val = ((String.fromCharCode(((format[i]).charCodeAt(0) | 0) - (("0").charCodeAt(0) | 0))).charCodeAt(0) | 0);
          precision = ((Math.imul(precision, 10) + val) | 0);
          var flag = (val < 0) ||
          (val > 9) ||
          (precision > 99);
          if (flag) {
            var result = -2;
            return result;
          }
          var num = i;
          i = ((num + 1) | 0);
        }
        result = precision;
        return result;
      };

      function NumberFormatter_Release () {
        if (this !== $thisType.userFormatProvider) {
          $thisType.threadNumberFormatter = this;
        }
      };

      function NumberFormatter_RemoveTrailingZeros () {
        this._offset = (this.CountTrailingZeros() | 0);
        this._digitsLen = (((this._digitsLen | 0) - (this._offset | 0)) | 0);
        if ((this._digitsLen | 0) === 0) {
          this._offset = 0;
          this._decPointPos = 1;
          this._positive = true;
        }
      };

      function NumberFormatter_ResetCharBuf (size) {
        this._ind = 0;
        var flag = (this._cbuf.length | 0) < (size | 0);
        if (flag) {
          this._cbuf = JSIL.Array.New($T01(), size);
        }
      };

      function NumberFormatter_Resize (len) {
        $T1D().Resize$b1($T01())(/* ref */ new JSIL.MemberReference(this, "_cbuf"), len);
      };

      function NumberFormatter_RoundBits (shift) {
        var flag = (shift | 0) <= 0;
        if (flag) {
          var result = false;
        } else {
          var flag2 = (shift | 0) > (this._digitsLen | 0);
          if (flag2) {
            this._digitsLen = 0;
            this._decPointPos = 1;
            this._val1 = this._val2 = this._val3 = this._val4 = 0;
            this._positive = true;
            result = false;
          } else {
            shift = (((shift | 0) + (this._offset | 0)) | 0);
            this._digitsLen = (((this._digitsLen | 0) + (this._offset | 0)) | 0);

            for (; (shift | 0) > 8; shift = (((shift | 0) - 8) | 0)) {
              this._val1 = (this._val2 >>> 0);
              this._val2 = (this._val3 >>> 0);
              this._val3 = (this._val4 >>> 0);
              this._val4 = 0;
              this._digitsLen = (((this._digitsLen | 0) - 8) | 0);
            }
            shift = (((shift | 0) - 1) | 0) << 2;
            var v = (this._val1 >>> 0) >>> (shift | 0);
            var rem16 = v & 15;
            this._val1 = (v ^ rem16) << (shift | 0);
            var res = false;
            if (rem16 >= 5) {
              this._val1 = (this._val1 >>> 0) | (2576980377 >>> ((28 - (shift | 0)) | 0));
              this.AddOneToDecHex();
              var newlen = (this.DecHexLen() | 0);
              res = newlen !== (this._digitsLen | 0);
              this._decPointPos = (((((this._decPointPos | 0) + newlen) | 0) - (this._digitsLen | 0)) | 0);
              this._digitsLen = newlen;
            }
            this.RemoveTrailingZeros();
            result = res;
          }
        }
        return result;
      };

      function NumberFormatter_RoundDecimal (decimals) {
        return this.RoundBits((((((this._digitsLen | 0) - (this._decPointPos | 0)) | 0) - (decimals | 0)) | 0));
      };

      function NumberFormatter_RoundPos (pos) {
        this.RoundBits((((this._digitsLen | 0) - (pos | 0)) | 0));
      };

      function NumberFormatter_ScaleOrder (hi) {

        for (var i = 18; i >= 0; ) {
          var flag = $T0C().op_GreaterThanOrEqual(hi, $thisType.GetTenPowerOf(i));
          if (flag) {
            var result = ((i + 1) | 0);
            return result;
          }
          var num = i;
          i = ((num - 1) | 0);
        }
        result = 1;
        return result;
      };

      function NumberFormatter_set_CurrentCulture (value) {
        var flag = (value !== null) &&
        value.get_IsReadOnly();
        if (flag) {
          this._nfi = value.get_NumberFormat();
        } else {
          this._nfi = null;
        }
      };

      function NumberFormatter_ToDecHex (val) {
        var res = 0;
        var flag = (val | 0) >= 10000;
        if (flag) {
          var v = (((val | 0) / 10000) | 0);
          val = (((val | 0) - Math.imul(v, 10000)) | 0);
          res = ($thisType.FastToDecHex(v) >>> 0) << 16;
        }
        return (res | ($thisType.FastToDecHex(val) >>> 0));
      };

      function NumberFormatter_ZeroTrimEnd (sb, canEmpty) {
        var len = 0;

      $loop0:
        for (var i = (((sb.get_Length() | 0) - 1) | 0); (
            canEmpty
               ? (i >= 0)
               : (i > 0))
          ; ) {
          var flag = ((sb.get_Chars(i)).charCodeAt(0) | 0) !== (("0").charCodeAt(0) | 0);
          if (flag) {
            break $loop0;
          }
          var num = len;
          len = ((num + 1) | 0);
          num = i;
          i = ((num - 1) | 0);
        }
        var flag2 = len > 0;
        if (flag2) {
          sb.Remove((((sb.get_Length() | 0) - len) | 0), len);
        }
      };

      JSIL.MakeType({
          BaseType: $asm01.TypeRef("System.Object"),
          Name: "JSIL.System.NumberFormatter",
          IsPublic: true,
          IsReferenceType: true,
          MaximumConstructorArguments: 1,
        }, function ($ib) {
        $ = $ib;

        $.Method({Static:false, Public:false}, ".ctor",
          JSIL.MethodSignature.Action($asm01.TypeRef("System.Threading.Thread")),
          NumberFormatter__ctor
        );

        $.Method({Static:false, Public:false}, "AddOneToDecHex",
          JSIL.MethodSignature.Void,
          NumberFormatter_AddOneToDecHex$00
        );

        $.Method({Static:true , Public:false}, "AddOneToDecHex",
          new JSIL.MethodSignature($.UInt32, [$.UInt32]),
          NumberFormatter_AddOneToDecHex$01
        );

        $.Method({Static:false, Public:false}, "Append",
          JSIL.MethodSignature.Action($.Char),
          NumberFormatter_Append$02
        );

        $.Method({Static:false, Public:false}, "Append",
          new JSIL.MethodSignature(null, [$.Char, $.Int32]),
          NumberFormatter_Append$03
        );

        $.Method({Static:false, Public:false}, "Append",
          JSIL.MethodSignature.Action($.String),
          NumberFormatter_Append$04
        );

        $.Method({Static:false, Public:false}, "AppendDecimalString",
          new JSIL.MethodSignature(null, [$.Int32, $asm01.TypeRef("System.Text.StringBuilder")]),
          NumberFormatter_AppendDecimalString$05
        );

        $.Method({Static:false, Public:false}, "AppendDecimalString",
          JSIL.MethodSignature.Action($.Int32),
          NumberFormatter_AppendDecimalString$06
        );

        $.Method({Static:false, Public:false}, "AppendDigits",
          new JSIL.MethodSignature(null, [$.Int32, $.Int32]),
          NumberFormatter_AppendDigits$07
        );

        $.Method({Static:false, Public:false}, "AppendDigits",
          new JSIL.MethodSignature(null, [
              $.Int32, $.Int32,
              $asm01.TypeRef("System.Text.StringBuilder")
            ]),
          NumberFormatter_AppendDigits$08
        );

        $.Method({Static:false, Public:false}, "AppendExponent",
          new JSIL.MethodSignature(null, [
              $asm01.TypeRef("System.Globalization.NumberFormatInfo"), $.Int32,
              $.Int32
            ]),
          NumberFormatter_AppendExponent
        );

        $.Method({Static:false, Public:false}, "AppendIntegerString",
          new JSIL.MethodSignature(null, [$.Int32, $asm01.TypeRef("System.Text.StringBuilder")]),
          NumberFormatter_AppendIntegerString$09
        );

        $.Method({Static:false, Public:false}, "AppendIntegerString",
          JSIL.MethodSignature.Action($.Int32),
          NumberFormatter_AppendIntegerString$0A
        );

        $.Method({Static:false, Public:false}, "AppendIntegerStringWithGroupSeparator",
          new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Int32]), $.String]),
          NumberFormatter_AppendIntegerStringWithGroupSeparator
        );

        $.Method({Static:true , Public:false}, "AppendNonNegativeNumber",
          new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Text.StringBuilder"), $.Int32]),
          NumberFormatter_AppendNonNegativeNumber
        );

        $.Method({Static:false, Public:false}, "AppendOneDigit",
          JSIL.MethodSignature.Action($.Int32),
          NumberFormatter_AppendOneDigit
        );

        $.Method({Static:false, Public:false}, "CountTrailingZeros",
          JSIL.MethodSignature.Return($.Int32),
          NumberFormatter_CountTrailingZeros$0B
        );

        $.Method({Static:true , Public:false}, "CountTrailingZeros",
          new JSIL.MethodSignature($.Int32, [$.UInt32]),
          NumberFormatter_CountTrailingZeros$0C
        );

        $.Method({Static:true , Public:false}, "DecHexLen",
          new JSIL.MethodSignature($.Int32, [$.UInt32]),
          NumberFormatter_DecHexLen$0D
        );

        $.Method({Static:false, Public:false}, "DecHexLen",
          JSIL.MethodSignature.Return($.Int32),
          NumberFormatter_DecHexLen$0E
        );

        $.Method({Static:false, Public:false}, "Divide10",
          JSIL.MethodSignature.Action($.Int32),
          NumberFormatter_Divide10
        );

        $.Method({Static:true , Public:false}, "FastDecHexLen",
          new JSIL.MethodSignature($.Int32, [$.Int32]),
          NumberFormatter_FastDecHexLen
        );

        $.Method({Static:true , Public:false}, "FastToDecHex",
          new JSIL.MethodSignature($.UInt32, [$.Int32]),
          NumberFormatter_FastToDecHex
        );

        $.Method({Static:false, Public:false}, "FormatCurrency",
          new JSIL.MethodSignature($.String, [$.Int32, $asm01.TypeRef("System.Globalization.NumberFormatInfo")]),
          NumberFormatter_FormatCurrency
        );

        $.Method({Static:false, Public:false}, "FormatCustom",
          new JSIL.MethodSignature($.String, [$.String, $asm01.TypeRef("System.Globalization.NumberFormatInfo")]),
          NumberFormatter_FormatCustom
        );

        $.Method({Static:false, Public:false}, "FormatDecimal",
          new JSIL.MethodSignature($.String, [$.Int32, $asm01.TypeRef("System.Globalization.NumberFormatInfo")]),
          NumberFormatter_FormatDecimal
        );

        $.Method({Static:false, Public:false}, "FormatExponential",
          new JSIL.MethodSignature($.String, [$.Int32, $asm01.TypeRef("System.Globalization.NumberFormatInfo")]),
          NumberFormatter_FormatExponential$0F
        );

        $.Method({Static:false, Public:false}, "FormatExponential",
          new JSIL.MethodSignature($.String, [
              $.Int32, $asm01.TypeRef("System.Globalization.NumberFormatInfo"),
              $.Int32
            ]),
          NumberFormatter_FormatExponential$10
        );

        $.Method({Static:false, Public:false}, "FormatFixedPoint",
          new JSIL.MethodSignature($.String, [$.Int32, $asm01.TypeRef("System.Globalization.NumberFormatInfo")]),
          NumberFormatter_FormatFixedPoint
        );

        $.Method({Static:false, Public:false}, "FormatGeneral",
          new JSIL.MethodSignature($.String, [$.Int32, $asm01.TypeRef("System.Globalization.NumberFormatInfo")]),
          NumberFormatter_FormatGeneral
        );

        $.Method({Static:false, Public:false}, "FormatHexadecimal",
          new JSIL.MethodSignature($.String, [$.Int32]),
          NumberFormatter_FormatHexadecimal
        );

        $.Method({Static:false, Public:false}, "FormatNumber",
          new JSIL.MethodSignature($.String, [$.Int32, $asm01.TypeRef("System.Globalization.NumberFormatInfo")]),
          NumberFormatter_FormatNumber
        );

        $.Method({Static:false, Public:false}, "FormatPercent",
          new JSIL.MethodSignature($.String, [$.Int32, $asm01.TypeRef("System.Globalization.NumberFormatInfo")]),
          NumberFormatter_FormatPercent
        );

        $.Method({Static:false, Public:false}, "FormatRoundtrip",
          new JSIL.MethodSignature($.String, [$.Double, $asm01.TypeRef("System.Globalization.NumberFormatInfo")]),
          NumberFormatter_FormatRoundtrip$11
        );

        $.Method({Static:false, Public:false}, "FormatRoundtrip",
          new JSIL.MethodSignature($.String, [$.Single, $asm01.TypeRef("System.Globalization.NumberFormatInfo")]),
          NumberFormatter_FormatRoundtrip$12
        );

        $.Method({Static:false, Public:false}, "get_DecimalDigits",
          JSIL.MethodSignature.Return($.Int32),
          NumberFormatter_get_DecimalDigits
        );

        $.Method({Static:false, Public:false}, "get_IntegerDigits",
          JSIL.MethodSignature.Return($.Int32),
          NumberFormatter_get_IntegerDigits
        );

        $.Method({Static:false, Public:false}, "get_IsFloatingSource",
          JSIL.MethodSignature.Return($.Boolean),
          NumberFormatter_get_IsFloatingSource
        );

        $.Method({Static:false, Public:false}, "get_IsZero",
          JSIL.MethodSignature.Return($.Boolean),
          NumberFormatter_get_IsZero
        );

        $.Method({Static:false, Public:false}, "get_IsZeroInteger",
          JSIL.MethodSignature.Return($.Boolean),
          NumberFormatter_get_IsZeroInteger
        );

        $.Method({Static:false, Public:false}, "GetClone",
          JSIL.MethodSignature.Return($.Type),
          NumberFormatter_GetClone
        );

        $.Method({Static:true , Public:false}, "GetFormatterTables",
          new JSIL.MethodSignature(null, [
              $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.UInt64])]), $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Int32])]),
              $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Char])]), $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Char])]),
              $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Int64])]), $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Int32])])
            ]),
          NumberFormatter_GetFormatterTables
        );

        $.Method({Static:true , Public:false}, "GetInstance",
          new JSIL.MethodSignature($.Type, [$asm01.TypeRef("System.IFormatProvider")]),
          NumberFormatter_GetInstance
        );

        $.Method({Static:false, Public:false}, "GetNumberFormatInstance",
          new JSIL.MethodSignature($asm01.TypeRef("System.Globalization.NumberFormatInfo"), [$asm01.TypeRef("System.IFormatProvider")]),
          NumberFormatter_GetNumberFormatInstance
        );

        $.Method({Static:true , Public:false}, "GetTenPowerOf",
          new JSIL.MethodSignature($.Int64, [$.Int32]),
          NumberFormatter_GetTenPowerOf
        );

        $.Method({Static:false, Public:false}, "Init",
          JSIL.MethodSignature.Action($.String),
          NumberFormatter_Init$13
        );

        $.Method({Static:false, Public:false}, "Init",
          new JSIL.MethodSignature(null, [
              $.String, $.Int32,
              $.Int32
            ]),
          NumberFormatter_Init$14
        );

        $.Method({Static:false, Public:false}, "Init",
          new JSIL.MethodSignature(null, [
              $.String, $.UInt32,
              $.Int32
            ]),
          NumberFormatter_Init$15
        );

        $.Method({Static:false, Public:false}, "Init",
          new JSIL.MethodSignature(null, [$.String, $.Int64]),
          NumberFormatter_Init$16
        );

        $.Method({Static:false, Public:false}, "Init",
          new JSIL.MethodSignature(null, [$.String, $.UInt64]),
          NumberFormatter_Init$17
        );

        $.Method({Static:false, Public:false}, "Init",
          new JSIL.MethodSignature(null, [
              $.String, $.Double,
              $.Int32
            ]),
          NumberFormatter_Init$18
        );

        $.Method({Static:false, Public:false}, "Init",
          new JSIL.MethodSignature(null, [$.String, $asm01.TypeRef("System.Decimal")]),
          NumberFormatter_Init$19
        );

        $.Method({Static:false, Public:false}, "InitDecHexDigits",
          JSIL.MethodSignature.Action($.UInt32),
          NumberFormatter_InitDecHexDigits$1A
        );

        $.Method({Static:false, Public:false}, "InitDecHexDigits",
          JSIL.MethodSignature.Action($.UInt64),
          NumberFormatter_InitDecHexDigits$1B
        );

        $.Method({Static:false, Public:false}, "InitDecHexDigits",
          new JSIL.MethodSignature(null, [$.UInt32, $.UInt64]),
          NumberFormatter_InitDecHexDigits$1C
        );

        $.Method({Static:false, Public:false}, "InitHex",
          JSIL.MethodSignature.Action($.UInt64),
          NumberFormatter_InitHex
        );

        $.Method({Static:false, Public:false}, "InitialFloatingPrecision",
          JSIL.MethodSignature.Return($.Int32),
          NumberFormatter_InitialFloatingPrecision
        );

        $.Method({Static:false, Public:false}, "IntegerToString",
          new JSIL.MethodSignature($.String, [$.String, $asm01.TypeRef("System.IFormatProvider")]),
          NumberFormatter_IntegerToString
        );

        $.Method({Static:true , Public:false}, "IsZeroOnly",
          new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Text.StringBuilder")]),
          NumberFormatter_IsZeroOnly
        );

        $.Method({Static:false, Public:false}, "Multiply10",
          JSIL.MethodSignature.Action($.Int32),
          NumberFormatter_Multiply10
        );

        $.Method({Static:true , Public:true }, "NumberToString",
          new JSIL.MethodSignature($.String, [
              $.String, $.Int16,
              $asm01.TypeRef("System.IFormatProvider")
            ]),
          NumberFormatter_NumberToString$1D
        );

        $.Method({Static:true , Public:true }, "NumberToString",
          new JSIL.MethodSignature($.String, [
              $.String, $.UInt16,
              $asm01.TypeRef("System.IFormatProvider")
            ]),
          NumberFormatter_NumberToString$1E
        );

        $.Method({Static:true , Public:true }, "NumberToString",
          new JSIL.MethodSignature($.String, [
              $.String, $.Byte,
              $asm01.TypeRef("System.IFormatProvider")
            ]),
          NumberFormatter_NumberToString$1F
        );

        $.Method({Static:true , Public:true }, "NumberToString",
          new JSIL.MethodSignature($.String, [
              $.String, $.SByte,
              $asm01.TypeRef("System.IFormatProvider")
            ]),
          NumberFormatter_NumberToString$20
        );

        $.Method({Static:true , Public:true }, "NumberToString",
          new JSIL.MethodSignature($.String, [
              $.String, $.UInt32,
              $asm01.TypeRef("System.IFormatProvider")
            ]),
          NumberFormatter_NumberToString$21
        );

        $.Method({Static:true , Public:true }, "NumberToString",
          new JSIL.MethodSignature($.String, [
              $.String, $.Int32,
              $asm01.TypeRef("System.IFormatProvider")
            ]),
          NumberFormatter_NumberToString$22
        );

        $.Method({Static:true , Public:true }, "NumberToString",
          new JSIL.MethodSignature($.String, [
              $.String, $.UInt64,
              $asm01.TypeRef("System.IFormatProvider")
            ]),
          NumberFormatter_NumberToString$23
        );

        $.Method({Static:true , Public:true }, "NumberToString",
          new JSIL.MethodSignature($.String, [
              $.String, $.Int64,
              $asm01.TypeRef("System.IFormatProvider")
            ]),
          NumberFormatter_NumberToString$24
        );

        $.Method({Static:true , Public:true }, "NumberToString",
          new JSIL.MethodSignature($.String, [
              $.String, $.Single,
              $asm01.TypeRef("System.IFormatProvider")
            ]),
          NumberFormatter_NumberToString$25
        );

        $.Method({Static:true , Public:true }, "NumberToString",
          new JSIL.MethodSignature($.String, [
              $.String, $.Double,
              $asm01.TypeRef("System.IFormatProvider")
            ]),
          NumberFormatter_NumberToString$26
        );

        $.Method({Static:true , Public:true }, "NumberToString",
          new JSIL.MethodSignature($.String, [
              $.String, $asm01.TypeRef("System.Decimal"),
              $asm01.TypeRef("System.IFormatProvider")
            ]),
          NumberFormatter_NumberToString$27
        );

        $.Method({Static:false, Public:false}, "NumberToString",
          new JSIL.MethodSignature($.String, [$.String, $asm01.TypeRef("System.Globalization.NumberFormatInfo")]),
          NumberFormatter_NumberToString$28
        );

        $.Method({Static:true , Public:false}, "ParsePrecision",
          new JSIL.MethodSignature($.Int32, [$.String]),
          NumberFormatter_ParsePrecision
        );

        $.Method({Static:false, Public:false}, "Release",
          JSIL.MethodSignature.Void,
          NumberFormatter_Release
        );

        $.Method({Static:false, Public:false}, "RemoveTrailingZeros",
          JSIL.MethodSignature.Void,
          NumberFormatter_RemoveTrailingZeros
        );

        $.Method({Static:false, Public:false}, "ResetCharBuf",
          JSIL.MethodSignature.Action($.Int32),
          NumberFormatter_ResetCharBuf
        );

        $.Method({Static:false, Public:false}, "Resize",
          JSIL.MethodSignature.Action($.Int32),
          NumberFormatter_Resize
        );

        $.Method({Static:false, Public:false}, "RoundBits",
          new JSIL.MethodSignature($.Boolean, [$.Int32]),
          NumberFormatter_RoundBits
        );

        $.Method({Static:false, Public:false}, "RoundDecimal",
          new JSIL.MethodSignature($.Boolean, [$.Int32]),
          NumberFormatter_RoundDecimal
        );

        $.Method({Static:false, Public:false}, "RoundPos",
          JSIL.MethodSignature.Action($.Int32),
          NumberFormatter_RoundPos
        );

        $.Method({Static:true , Public:false}, "ScaleOrder",
          new JSIL.MethodSignature($.Int32, [$.Int64]),
          NumberFormatter_ScaleOrder
        );

        $.Method({Static:false, Public:false}, "set_CurrentCulture",
          JSIL.MethodSignature.Action($asm01.TypeRef("System.Globalization.CultureInfo")),
          NumberFormatter_set_CurrentCulture
        );

        $.Method({Static:true , Public:false}, "ToDecHex",
          new JSIL.MethodSignature($.UInt32, [$.Int32]),
          NumberFormatter_ToDecHex
        );

        $.Method({Static:true , Public:false}, "ZeroTrimEnd",
          new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Text.StringBuilder"), $.Boolean]),
          NumberFormatter_ZeroTrimEnd
        );

        $.Constant({Static:true , Public:false}, "DefaultExpPrecision", $.Int32, 6);

        $.Constant({Static:true , Public:false}, "HundredMillion", $.Int32, 100000000);

        $.Constant({Static:true , Public:false}, "SeventeenDigitsThreshold", $.Int64, 10000000000000000);

        $.Constant({Static:true , Public:false}, "ULongDivHundredMillion", $.UInt64, 184467440737);

        $.Constant({Static:true , Public:false}, "ULongModHundredMillion", $.UInt64, 9551616);

        $.Constant({Static:true , Public:false}, "DoubleBitsExponentShift", $.Int32, 52);

        $.Constant({Static:true , Public:false}, "DoubleBitsExponentMask", $.Int32, 2047);

        $.Constant({Static:true , Public:false}, "DoubleBitsMantissaMask", $.Int64, 4503599627370495);

        $.Constant({Static:true , Public:false}, "DecimalBitsScaleMask", $.Int32, 2031616);

        $.Constant({Static:true , Public:false}, "SingleDefPrecision", $.Int32, 7);

        $.Constant({Static:true , Public:false}, "DoubleDefPrecision", $.Int32, 15);

        $.Constant({Static:true , Public:false}, "Int32DefPrecision", $.Int32, 10);

        $.Constant({Static:true , Public:false}, "UInt32DefPrecision", $.Int32, 10);

        $.Constant({Static:true , Public:false}, "Int64DefPrecision", $.Int32, 19);

        $.Constant({Static:true , Public:false}, "UInt64DefPrecision", $.Int32, 20);

        $.Constant({Static:true , Public:false}, "DecimalDefPrecision", $.Int32, 100);

        $.Constant({Static:true , Public:false}, "TenPowersListLength", $.Int32, 19);

        $.Constant({Static:true , Public:false}, "MinRoundtripVal", $.Double, -1.79769313486231E+308);

        $.Constant({Static:true , Public:false}, "MaxRoundtripVal", $.Double, 1.79769313486231E+308);

        $.Field({Static:true , Public:false, ReadOnly:true }, "MantissaBitsTable", $jsilcore.TypeRef("System.Array", [$.UInt64]));

        $.Field({Static:true , Public:false, ReadOnly:true }, "TensExponentTable", $jsilcore.TypeRef("System.Array", [$.Int32]));

        $.Field({Static:true , Public:false, ReadOnly:true }, "DigitLowerTable", $jsilcore.TypeRef("System.Array", [$.Char]));

        $.Field({Static:true , Public:false, ReadOnly:true }, "DigitUpperTable", $jsilcore.TypeRef("System.Array", [$.Char]));

        $.Field({Static:true , Public:false, ReadOnly:true }, "TenPowersList", $jsilcore.TypeRef("System.Array", [$.Int64]));

        $.Field({Static:true , Public:false, ReadOnly:true }, "DecHexDigits", $jsilcore.TypeRef("System.Array", [$.Int32]));

        $.Field({Static:false, Public:false}, "_nfi", $asm01.TypeRef("System.Globalization.NumberFormatInfo"));

        $.Field({Static:false, Public:false}, "_cbuf", $jsilcore.TypeRef("System.Array", [$.Char]));

        $.Field({Static:false, Public:false}, "_NaN", $.Boolean);

        $.Field({Static:false, Public:false}, "_infinity", $.Boolean);

        $.Field({Static:false, Public:false}, "_isCustomFormat", $.Boolean);

        $.Field({Static:false, Public:false}, "_specifierIsUpper", $.Boolean);

        $.Field({Static:false, Public:false}, "_positive", $.Boolean);

        $.Field({Static:false, Public:false}, "_specifier", $.Char);

        $.Field({Static:false, Public:false}, "_precision", $.Int32);

        $.Field({Static:false, Public:false}, "_defPrecision", $.Int32);

        $.Field({Static:false, Public:false}, "_digitsLen", $.Int32);

        $.Field({Static:false, Public:false}, "_offset", $.Int32);

        $.Field({Static:false, Public:false}, "_decPointPos", $.Int32);

        $.Field({Static:false, Public:false}, "_val1", $.UInt32);

        $.Field({Static:false, Public:false}, "_val2", $.UInt32);

        $.Field({Static:false, Public:false}, "_val3", $.UInt32);

        $.Field({Static:false, Public:false}, "_val4", $.UInt32);

        $.Field({Static:false, Public:false}, "_ind", $.Int32);

        $.Field({Static:true , Public:false}, "threadNumberFormatter", $.Type)
          .Attribute($asm01.TypeRef("System.ThreadStaticAttribute"));

        $.Field({Static:true , Public:false}, "userFormatProvider", $.Type)
          .Attribute($asm01.TypeRef("System.ThreadStaticAttribute"));


        function NumberFormatter__cctor () {
          $thisType.GetFormatterTables(
            /* ref */ new JSIL.MemberReference($thisType, "MantissaBitsTable"),
            /* ref */ new JSIL.MemberReference($thisType, "TensExponentTable"),
            /* ref */ new JSIL.MemberReference($thisType, "DigitLowerTable"),
            /* ref */ new JSIL.MemberReference($thisType, "DigitUpperTable"),
            /* ref */ new JSIL.MemberReference($thisType, "TenPowersList"),
            /* ref */ new JSIL.MemberReference($thisType, "DecHexDigits")
          );
        };

        $.Method({Static:true , Public:false}, ".cctor",
          JSIL.MethodSignature.Void,
          NumberFormatter__cctor
        );

        $.Property({Static:false, Public:false}, "CurrentCulture", $asm01.TypeRef("System.Globalization.CultureInfo"));

        $.Property({Static:false, Public:false}, "IntegerDigits", $.Int32);

        $.Property({Static:false, Public:false}, "DecimalDigits", $.Int32);

        $.Property({Static:false, Public:false}, "IsFloatingSource", $.Boolean);

        $.Property({Static:false, Public:false}, "IsZero", $.Boolean);

        $.Property({Static:false, Public:false}, "IsZeroInteger", $.Boolean);


        return function (newThisType) { $thisType = newThisType; };
      });

    })();

    /* class JSIL.System.NumberFormatter+CustomInfo */

    (function CustomInfo$Members () {
      var $, $thisType;
      var $T00 = function () {
        return ($T00 = JSIL.Memoize($asm01.System.String)) ();
      };
      var $T01 = function () {
        return ($T01 = JSIL.Memoize($asm01.System.Int32)) ();
      };
      var $T02 = function () {
        return ($T02 = JSIL.Memoize($asm01.System.Globalization.NumberFormatInfo)) ();
      };
      var $T03 = function () {
        return ($T03 = JSIL.Memoize($asm01.System.Boolean)) ();
      };
      var $T04 = function () {
        return ($T04 = JSIL.Memoize($asm01.System.Text.StringBuilder)) ();
      };
      var $T05 = function () {
        return ($T05 = JSIL.Memoize($asm01.System.Char)) ();
      };
      var $T06 = function () {
        return ($T06 = JSIL.Memoize(System.Array.Of($asm01.System.Int32))) ();
      };
      var $T07 = function () {
        return ($T07 = JSIL.Memoize($asm01.System.Object)) ();
      };
      var $T08 = function () {
        return ($T08 = JSIL.Memoize($asm01.System.ArgumentException)) ();
      };
      var $S00 = function () {
        return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Text.StringBuilder"), null))) ();
      };
      var $S01 = function () {
        return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Text.StringBuilder"), [$asm01.TypeRef("System.Char")]))) ();
      };
      var $S02 = function () {
        return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Text.StringBuilder"), [$asm01.TypeRef("System.String")]))) ();
      };
      var $S03 = function () {
        return ($S03 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Text.StringBuilder"), [$asm01.TypeRef("System.Object")]))) ();
      };
      var $S04 = function () {
        return ($S04 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Text.StringBuilder"), [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.String")]))) ();
      };
      var $S05 = function () {
        return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentException"), null))) ();
      };


      function CustomInfo__ctor () {
        this.UseGroup = false;
        this.DecimalDigits = 0;
        this.DecimalPointPos = -1;
        this.DecimalTailSharpDigits = 0;
        this.IntegerDigits = 0;
        this.IntegerHeadSharpDigits = 0;
        this.IntegerHeadPos = 0;
        this.UseExponent = false;
        this.ExponentDigits = 0;
        this.ExponentTailSharpDigits = 0;
        this.ExponentNegativeSignOnly = true;
        this.DividePlaces = 0;
        this.Percents = 0;
        this.Permilles = 0;
      };

      function CustomInfo_Format (format, offset, length, nfi, positive, sb_int, sb_dec, sb_exp) {
        var sb = $S00().Construct();
        var literal = "\x00";
        var integerArea = true;
        var decimalArea = false;
        var intSharpCounter = 0;
        var sb_int_index = 0;
        var sb_dec_index = 0;
        var groups = nfi.get_NumberGroupSizes();
        var groupSeparator = nfi.get_NumberGroupSeparator();
        var intLen = 0;
        var total = 0;
        var groupIndex = 0;
        var counter = 0;
        var groupSize = 0;
        var flag3 = this.UseGroup &&
        ((groups.length | 0) > 0);
        if (flag3) {
          intLen = (sb_int.get_Length() | 0);

          for (var i = 0; i < (groups.length | 0); ) {
            total = ((total + (groups[i] | 0)) | 0);
            var flag4 = total <= intLen;
            if (flag4) {
              groupIndex = i;
            }
            var num = i;
            i = ((num + 1) | 0);
          }
          groupSize = (groups[groupIndex] | 0);
          var fraction = ((
            (intLen > total)
               ? ((intLen - total) | 0)
               : 0)
           | 0);
          var flag5 = groupSize === 0;
          if (flag5) {

            while ((groupIndex >= 0) && ((groups[groupIndex] | 0) === 0)) {
              num = groupIndex;
              groupIndex = ((num - 1) | 0);
            }
            groupSize = ((
              (fraction > 0)
                 ? fraction
                 : groups[groupIndex])
             | 0);
          }
          if (fraction === 0) {
            counter = groupSize;
          } else {
            groupIndex = ((groupIndex + ((fraction / groupSize) | 0)) | 0);
            counter = ((fraction % groupSize) | 0);
            var flag7 = counter === 0;
            if (flag7) {
              counter = groupSize;
            } else {
              num = groupIndex;
              groupIndex = ((num + 1) | 0);
            }
          }
        } else {
          this.UseGroup = false;
        }
        var j = (offset | 0);

      $loop2:
        while (((j - (offset | 0)) | 0) < (length | 0)) {

          var $label2 = 0;
        $labelgroup2:
          while (true) {
            switch ($label2) {
              case 0: /* $entry2 */
                var c = (format[j]);
                var flag8 = ((c.charCodeAt(0) | 0) === (literal.charCodeAt(0) | 0)) &&
                ((c.charCodeAt(0) | 0) > (("\x00").charCodeAt(0) | 0));
                if (flag8) {
                  literal = "\x00";
                } else {
                  var flag9 = (literal.charCodeAt(0) | 0) > (("\x00").charCodeAt(0) | 0);
                  if (flag9) {
                    $S01().CallVirtual("Append", null, sb, c);
                  } else {

                    var $label1 = 0;
                  $labelgroup1:
                    while (true) {
                      switch ($label1) {
                        case 0: /* $entry1 */
                          var c2 = c;
                          if ((c2.charCodeAt(0) | 0) <= (("E").charCodeAt(0) | 0)) {
                            switch (c2) {
                              case "\"":
                              case "'":
                                if (((c.charCodeAt(0) | 0) === (("\"").charCodeAt(0) | 0)) || ((c.charCodeAt(0) | 0) === (("'").charCodeAt(0) | 0))) {
                                  literal = c;
                                }
                                $label2 = 1 /* goto IL_4FC */ ;
                                continue $labelgroup2;

                              case "#":
                                break;

                              case "$":
                              case "&":
                                $label1 = 3 /* goto IL_4F0 */ ;
                                continue $labelgroup1;

                              case "%":
                                $S02().CallVirtual("Append", null, sb, nfi.get_PercentSymbol());
                                $label1 = 1 /* goto IL_4FB */ ;
                                continue $labelgroup1;

                              default:
                                switch (c2) {
                                  case ",":
                                    $label1 = 1 /* goto IL_4FB */ ;
                                    continue $labelgroup1;

                                  case "-":
                                  case "/":
                                    $label1 = 3 /* goto IL_4F0 */ ;
                                    continue $labelgroup1;

                                  case ".":
                                    var flag11 = (this.DecimalPointPos | 0) === j;
                                    if (flag11) {
                                      if ((this.DecimalDigits | 0) > 0) {

                                        while (sb_int_index < (sb_int.get_Length() | 0)) {
                                          var arg_491_0 = sb;
                                          num = sb_int_index;
                                          sb_int_index = ((num + 1) | 0);
                                          $S01().CallVirtual("Append", null, arg_491_0, sb_int.get_Chars(num));
                                        }
                                      }
                                      var flag13 = (sb_dec.get_Length() | 0) > 0;
                                      if (flag13) {
                                        $S02().CallVirtual("Append", null, sb, nfi.get_NumberDecimalSeparator());
                                      }
                                    }
                                    integerArea = false;
                                    decimalArea = true;
                                    $label1 = 1 /* goto IL_4FB */ ;
                                    continue $labelgroup1;

                                  case "0":
                                    break;

                                  default:
                                    if ((c2.charCodeAt(0) | 0) !== (("E").charCodeAt(0) | 0)) {
                                      $label1 = 3 /* goto IL_4F0 */ ;
                                      continue $labelgroup1;
                                    }
                                    $label1 = 2 /* goto IL_375 */ ;
                                    continue $labelgroup1;

                                }
                                break;

                            }
                            var flag14 = integerArea;
                            if (flag14) {
                              num = intSharpCounter;
                              intSharpCounter = ((num + 1) | 0);
                              var flag15 = ((((this.IntegerDigits | 0) - intSharpCounter) | 0) < (((sb_int.get_Length() | 0) + sb_int_index) | 0)) ||
                              ((c.charCodeAt(0) | 0) === (("0").charCodeAt(0) | 0));
                              if (flag15) {

                              $loop4:
                                while ((((((this.IntegerDigits | 0) - intSharpCounter) | 0) + sb_int_index) | 0) < (sb_int.get_Length() | 0)) {

                                  var $label0 = 0;
                                $labelgroup0:
                                  while (true) {
                                    switch ($label0) {
                                      case 0: /* $entry0 */
                                        var arg_29D_0 = sb;
                                        num = sb_int_index;
                                        sb_int_index = ((num + 1) | 0);
                                        $S01().CallVirtual("Append", null, arg_29D_0, sb_int.get_Chars(num));
                                        if (!this.UseGroup) {
                                          $label0 = 2 /* goto IL_2CB */ ;
                                          continue $labelgroup0;
                                        }
                                        num = ((intLen - 1) | 0);
                                        intLen = num;
                                        if (num <= 0) {
                                          $label0 = 2 /* goto IL_2CB */ ;
                                          continue $labelgroup0;
                                        }
                                        num = ((counter - 1) | 0);
                                        counter = num;
                                        var arg_2CC_0 = num === 0;

                                        $label0 = 1 /* goto IL_2CC */ ;
                                        continue $labelgroup0;
                                      case 1: /* IL_2CC */
                                        var flag16 = arg_2CC_0;
                                        if (flag16) {
                                          $S02().CallVirtual("Append", null, sb, groupSeparator);
                                          num = ((groupIndex - 1) | 0);
                                          groupIndex = num;
                                          var flag17 = (num < (groups.length | 0)) &&
                                          (groupIndex >= 0);
                                          if (flag17) {
                                            groupSize = (groups[groupIndex] | 0);
                                          }
                                          counter = groupSize;
                                        }
                                        continue $loop4;

                                      case 2: /* IL_2CB */
                                        arg_2CC_0 = false;
                                        $label0 = 1 /* goto IL_2CC */ ;
                                        continue $labelgroup0;

                                    }
                                  }
                                }
                              }
                            } else {
                              var flag18 = decimalArea;
                              if (flag18) {
                                var flag19 = sb_dec_index < (sb_dec.get_Length() | 0);
                                if (flag19) {
                                  var arg_35C_0 = sb;
                                  num = sb_dec_index;
                                  sb_dec_index = ((num + 1) | 0);
                                  $S01().CallVirtual("Append", null, arg_35C_0, sb_dec.get_Chars(num));
                                }
                              } else {
                                $S01().CallVirtual("Append", null, sb, c);
                              }
                            }
                          } else if ((c2.charCodeAt(0) | 0) !== (("\\").charCodeAt(0) | 0)) {
                            if ((c2.charCodeAt(0) | 0) === (("e").charCodeAt(0) | 0)) {
                              $label1 = 2 /* goto IL_375 */ ;
                              continue $labelgroup1;
                            }
                            if ((c2.charCodeAt(0) | 0) !== (("\u2030").charCodeAt(0) | 0)) {
                              $label1 = 3 /* goto IL_4F0 */ ;
                              continue $labelgroup1;
                            }
                            $S02().CallVirtual("Append", null, sb, nfi.get_PerMilleSymbol());
                          } else {
                            num = j;
                            j = ((num + 1) | 0);
                            var flag20 = ((j - (offset | 0)) | 0) < (length | 0);
                            if (flag20) {
                              $S01().CallVirtual("Append", null, sb, format[j]);
                            }
                          }

                          $label1 = 1 /* goto IL_4FB */ ;
                          continue $labelgroup1;
                        case 1: /* IL_4FB */
                          $label2 = 1 /* goto IL_4FC */ ;
                          continue $labelgroup2;

                        case 2: /* IL_375 */
                          var flag21 = (sb_exp === null) ||
                          !this.UseExponent;
                          if (flag21) {
                            $S01().CallVirtual("Append", null, sb, c);
                            $label1 = 1 /* goto IL_4FB */ ;
                            continue $labelgroup1;
                          }
                          var flag = true;
                          var flag2 = false;

                        $loop5:
                          for (var q = ((j + 1) | 0); ((q - (offset | 0)) | 0) < (length | 0); ) {
                            var flag22 = ((format[q]).charCodeAt(0) | 0) === (("0").charCodeAt(0) | 0);
                            if (flag22) {
                              flag2 = true;
                            } else {
                              var flag23 = (q === ((j + 1) | 0)) &&
                              ((((format[q]).charCodeAt(0) | 0) === (("+").charCodeAt(0) | 0)) ||
                                (((format[q]).charCodeAt(0) | 0) === (("-").charCodeAt(0) | 0)));
                              if (!flag23) {
                                var flag24 = !flag2;
                                if (flag24) {
                                  flag = false;
                                }
                                break $loop5;
                              }
                            }
                            num = q;
                            q = ((num + 1) | 0);
                          }
                          var flag25 = flag;
                          if (flag25) {
                            j = ((q - 1) | 0);
                            integerArea = (this.DecimalPointPos | 0) < 0;
                            decimalArea = !integerArea;
                            $S01().CallVirtual("Append", null, sb, c);
                            $S03().CallVirtual("Append", null, sb, sb_exp);
                            sb_exp = null;
                          } else {
                            $S01().CallVirtual("Append", null, sb, c);
                          }
                          $label1 = 1 /* goto IL_4FB */ ;
                          continue $labelgroup1;

                        case 3: /* IL_4F0 */
                          $S01().CallVirtual("Append", null, sb, c);
                          break $labelgroup1;

                      }
                    }
                  }
                }

                $label2 = 1 /* goto IL_4FC */ ;
                continue $labelgroup2;
              case 1: /* IL_4FC */
                num = j;
                j = ((num + 1) | 0);

                break $labelgroup2;
            }
          }
        }
        var flag26 = !positive;
        if (flag26) {
          $S04().CallVirtual("Insert", null, sb, 0, nfi.get_NegativeSign());
        }
        return sb.toString();
      };

      function CustomInfo_GetActiveSection (format, /* ref */ positive, zero, /* ref */ offset, /* ref */ length) {
        var lens = JSIL.Array.New($T01(), 3);
        var index = 0;
        var lastPos = 0;
        var quoted = false;

      $loop0:
        for (var i = 0; i < (format.length | 0); ) {
          var c = (format[i]);
          var flag = ((c.charCodeAt(0) | 0) === (("\"").charCodeAt(0) | 0)) ||
          ((c.charCodeAt(0) | 0) === (("'").charCodeAt(0) | 0));
          if (flag) {
            var flag2 = (i === 0) ||
            (((format[((i - 1) | 0)]).charCodeAt(0) | 0) !== (("\\").charCodeAt(0) | 0));
            if (flag2) {
              quoted = !quoted;
            }
          } else {
            var flag3 = !(((c.charCodeAt(0) | 0) !== ((";").charCodeAt(0) | 0)) ||
              quoted) &&
            ((i === 0) ||
              (((format[((i - 1) | 0)]).charCodeAt(0) | 0) !== (("\\").charCodeAt(0) | 0)));
            if (flag3) {
              var num = index;
              index = ((num + 1) | 0);
              lens[num] = ((i - lastPos) | 0);
              lastPos = ((i + 1) | 0);
              var flag4 = index === 3;
              if (flag4) {
                break $loop0;
              }
            }
          }
          num = i;
          i = ((num + 1) | 0);
        }
        var flag5 = index === 0;
        if (flag5) {
          offset.set(0);
          length.set(format.length);
        } else {
          var flag6 = index === 1;
          if (flag6) {
            var flag7 = positive.get() | zero;
            if (flag7) {
              offset.set(0);
              length.set(lens[0]);
            } else {
              var flag8 = (((lens[0] | 0) + 1) | 0) < (format.length | 0);
              if (flag8) {
                positive.set(true);
                offset.set((((lens[0] | 0) + 1) | 0));
                length.set((((format.length | 0) - (offset.get() | 0)) | 0));
              } else {
                offset.set(0);
                length.set(lens[0]);
              }
            }
          } else {
            var flag9 = index === 2;
            if (flag9) {
              if (zero) {
                offset.set((((((lens[0] | 0) + (lens[1] | 0)) | 0) + 2) | 0));
                length.set((((format.length | 0) - (offset.get() | 0)) | 0));
              } else {
                var flag10 = positive.get();
                if (flag10) {
                  offset.set(0);
                  length.set(lens[0]);
                } else {
                  var flag11 = (lens[1] | 0) > 0;
                  if (flag11) {
                    positive.set(true);
                    offset.set((((lens[0] | 0) + 1) | 0));
                    length.set(lens[1]);
                  } else {
                    offset.set(0);
                    length.set(lens[0]);
                  }
                }
              }
            } else {
              var flag12 = index === 3;
              if (!flag12) {
                throw $S05().Construct();
              }
              if (zero) {
                offset.set((((((lens[0] | 0) + (lens[1] | 0)) | 0) + 2) | 0));
                length.set(lens[2]);
              } else {
                var flag13 = positive.get();
                if (flag13) {
                  offset.set(0);
                  length.set(lens[0]);
                } else {
                  var flag14 = (lens[1] | 0) > 0;
                  if (flag14) {
                    positive.set(true);
                    offset.set((((lens[0] | 0) + 1) | 0));
                    length.set(lens[1]);
                  } else {
                    offset.set(0);
                    length.set(lens[0]);
                  }
                }
              }
            }
          }
        }
      };

      function CustomInfo_Parse (format, offset, length, nfi) {
        var literal = "\x00";
        var integerArea = true;
        var decimalArea = false;
        var exponentArea = false;
        var sharpContinues = true;
        var info = new $thisType();
        var groupSeparatorCounter = 0;
        var i = (offset | 0);

      $loop0:
        while (((i - (offset | 0)) | 0) < (length | 0)) {

          var $label1 = 0;
        $labelgroup1:
          while (true) {
            switch ($label1) {
              case 0: /* $entry1 */
                var c = (format[i]);
                var flag = ((c.charCodeAt(0) | 0) === (literal.charCodeAt(0) | 0)) &&
                ((c.charCodeAt(0) | 0) > (("\x00").charCodeAt(0) | 0));
                if (flag) {
                  literal = "\x00";
                } else {
                  var flag2 = (literal.charCodeAt(0) | 0) > (("\x00").charCodeAt(0) | 0);
                  if (!flag2) {
                    var flag3 = exponentArea &&
                    !((c === "\x00") ||
                      ((c.charCodeAt(0) | 0) === (("0").charCodeAt(0) | 0))) &&
                    ((c.charCodeAt(0) | 0) !== (("#").charCodeAt(0) | 0));
                    if (flag3) {
                      exponentArea = false;
                      integerArea = (info.DecimalPointPos | 0) < 0;
                      decimalArea = !integerArea;
                      var num = i;
                      i = ((num - 1) | 0);
                    } else {

                      var $label0 = 0;
                    $labelgroup0:
                      while (true) {
                        switch ($label0) {
                          case 0: /* $entry0 */
                            var c2 = c;
                            if ((c2.charCodeAt(0) | 0) <= (("E").charCodeAt(0) | 0)) {
                              switch (c2) {
                                case "\"":
                                case "'":
                                  var flag4 = ((c.charCodeAt(0) | 0) === (("\"").charCodeAt(0) | 0)) ||
                                  ((c.charCodeAt(0) | 0) === (("'").charCodeAt(0) | 0));
                                  if (flag4) {
                                    literal = c;
                                  }
                                  $label1 = 1 /* goto IL_398 */ ;
                                  continue $labelgroup1;

                                case "#":
                                  var flag5 = sharpContinues & integerArea;
                                  if (flag5) {
                                    var customInfo = info;
                                    var arg_162_0 = customInfo;
                                    num = (customInfo.IntegerHeadSharpDigits | 0);
                                    arg_162_0.IntegerHeadSharpDigits = ((num + 1) | 0);
                                  } else {
                                    var flag6 = decimalArea;
                                    if (flag6) {
                                      customInfo = info;
                                      var arg_183_0 = customInfo;
                                      num = (customInfo.DecimalTailSharpDigits | 0);
                                      arg_183_0.DecimalTailSharpDigits = ((num + 1) | 0);
                                    } else {
                                      var flag7 = exponentArea;
                                      if (flag7) {
                                        customInfo = info;
                                        var arg_1A4_0 = customInfo;
                                        num = (customInfo.ExponentTailSharpDigits | 0);
                                        arg_1A4_0.ExponentTailSharpDigits = ((num + 1) | 0);
                                      }
                                    }
                                  }
                                  break;

                                case "$":
                                case "&":
                                  $label0 = 3 /* goto IL_395 */ ;
                                  continue $labelgroup0;

                                case "%":
                                  customInfo = info;
                                  var arg_352_0 = customInfo;
                                  num = (customInfo.Percents | 0);
                                  arg_352_0.Percents = ((num + 1) | 0);
                                  $label0 = 1 /* goto IL_397 */ ;
                                  continue $labelgroup0;

                                default:
                                  switch (c2) {
                                    case ",":
                                      var flag8 = integerArea &&
                                      ((info.IntegerDigits | 0) > 0);
                                      if (flag8) {
                                        num = groupSeparatorCounter;
                                        groupSeparatorCounter = ((num + 1) | 0);
                                      }
                                      $label0 = 1 /* goto IL_397 */ ;
                                      continue $labelgroup0;

                                    case "-":
                                    case "/":
                                      $label0 = 3 /* goto IL_395 */ ;
                                      continue $labelgroup0;

                                    case ".":
                                      integerArea = false;
                                      decimalArea = true;
                                      exponentArea = false;
                                      var flag9 = (info.DecimalPointPos | 0) === -1;
                                      if (flag9) {
                                        info.DecimalPointPos = i;
                                      }
                                      $label0 = 1 /* goto IL_397 */ ;
                                      continue $labelgroup0;

                                    case "0":
                                      break;

                                    default:
                                      if ((c2.charCodeAt(0) | 0) !== (("E").charCodeAt(0) | 0)) {
                                        $label0 = 3 /* goto IL_395 */ ;
                                        continue $labelgroup0;
                                      }
                                      $label0 = 2 /* goto IL_276 */ ;
                                      continue $labelgroup0;

                                  }
                                  break;

                              }
                              var flag10 = (c.charCodeAt(0) | 0) !== (("#").charCodeAt(0) | 0);
                              if (flag10) {
                                sharpContinues = false;
                                var flag11 = decimalArea;
                                if (flag11) {
                                  info.DecimalTailSharpDigits = 0;
                                } else {
                                  var flag12 = exponentArea;
                                  if (flag12) {
                                    info.ExponentTailSharpDigits = 0;
                                  }
                                }
                              }
                              var flag13 = (info.IntegerHeadPos | 0) === -1;
                              if (flag13) {
                                info.IntegerHeadPos = i;
                              }
                              var flag14 = integerArea;
                              if (flag14) {
                                customInfo = info;
                                var arg_213_0 = customInfo;
                                num = (customInfo.IntegerDigits | 0);
                                arg_213_0.IntegerDigits = ((num + 1) | 0);
                                var flag15 = groupSeparatorCounter > 0;
                                if (flag15) {
                                  info.UseGroup = true;
                                }
                                groupSeparatorCounter = 0;
                              } else {
                                var flag16 = decimalArea;
                                if (flag16) {
                                  customInfo = info;
                                  var arg_24B_0 = customInfo;
                                  num = (customInfo.DecimalDigits | 0);
                                  arg_24B_0.DecimalDigits = ((num + 1) | 0);
                                } else {
                                  var flag17 = exponentArea;
                                  if (flag17) {
                                    customInfo = info;
                                    var arg_26C_0 = customInfo;
                                    num = (customInfo.ExponentDigits | 0);
                                    arg_26C_0.ExponentDigits = ((num + 1) | 0);
                                  }
                                }
                              }
                            } else if ((c2.charCodeAt(0) | 0) !== (("\\").charCodeAt(0) | 0)) {
                              if ((c2.charCodeAt(0) | 0) === (("e").charCodeAt(0) | 0)) {
                                $label0 = 2 /* goto IL_276 */ ;
                                continue $labelgroup0;
                              }
                              if ((c2.charCodeAt(0) | 0) === (("\u2030").charCodeAt(0) | 0)) {
                                customInfo = info;
                                var arg_36C_0 = customInfo;
                                num = (customInfo.Permilles | 0);
                                arg_36C_0.Permilles = ((num + 1) | 0);
                              }
                            } else {
                              num = i;
                              i = ((num + 1) | 0);
                            }

                            $label0 = 1 /* goto IL_397 */ ;
                            continue $labelgroup0;
                          case 1: /* IL_397 */
                            $label1 = 1 /* goto IL_398 */ ;
                            continue $labelgroup1;

                          case 2: /* IL_276 */
                            var useExponent = info.UseExponent;
                            if (!useExponent) {
                              info.UseExponent = true;
                              integerArea = false;
                              decimalArea = false;
                              exponentArea = true;
                              var flag18 = ((((i + 1) | 0) - (offset | 0)) | 0) < (length | 0);
                              if (flag18) {
                                var nc = (format[((i + 1) | 0)]);
                                var flag19 = (nc.charCodeAt(0) | 0) === (("+").charCodeAt(0) | 0);
                                if (flag19) {
                                  info.ExponentNegativeSignOnly = false;
                                }
                                var flag20 = ((nc.charCodeAt(0) | 0) === (("+").charCodeAt(0) | 0)) ||
                                ((nc.charCodeAt(0) | 0) === (("-").charCodeAt(0) | 0));
                                if (flag20) {
                                  num = i;
                                  i = ((num + 1) | 0);
                                } else {
                                  var flag21 = ((nc.charCodeAt(0) | 0) !== (("0").charCodeAt(0) | 0)) &&
                                  ((nc.charCodeAt(0) | 0) !== (("#").charCodeAt(0) | 0));
                                  if (flag21) {
                                    info.UseExponent = false;
                                    var flag22 = (info.DecimalPointPos | 0) < 0;
                                    if (flag22) {
                                      integerArea = true;
                                    }
                                  }
                                }
                              }
                            }

                            $label0 = 3 /* goto IL_395 */ ;
                            continue $labelgroup0;
                          case 3: /* IL_395 */
                            break $labelgroup0;

                        }
                      }
                    }
                  }
                }

                $label1 = 1 /* goto IL_398 */ ;
                continue $labelgroup1;
              case 1: /* IL_398 */
                num = i;
                i = ((num + 1) | 0);

                break $labelgroup1;
            }
          }
        }
        var flag23 = (info.ExponentDigits | 0) === 0;
        if (flag23) {
          info.UseExponent = false;
        } else {
          info.IntegerHeadSharpDigits = 0;
        }
        var flag24 = (info.DecimalDigits | 0) === 0;
        if (flag24) {
          info.DecimalPointPos = -1;
        }
        customInfo = info;
        customInfo.DividePlaces = (((customInfo.DividePlaces | 0) + Math.imul(groupSeparatorCounter, 3)) | 0);
        return info;
      };

      JSIL.MakeType({
          BaseType: $asm01.TypeRef("System.Object"),
          Name: "JSIL.System.NumberFormatter+CustomInfo",
          IsPublic: false,
          IsReferenceType: true,
          MaximumConstructorArguments: 0,
        }, function ($ib) {
        $ = $ib;

        $.Method({Static:false, Public:true }, ".ctor",
          JSIL.MethodSignature.Void,
          CustomInfo__ctor
        );

        $.Method({Static:false, Public:true }, "Format",
          new JSIL.MethodSignature($.String, [
              $.String, $.Int32,
              $.Int32, $asm01.TypeRef("System.Globalization.NumberFormatInfo"),
              $.Boolean, $asm01.TypeRef("System.Text.StringBuilder"),
              $asm01.TypeRef("System.Text.StringBuilder"), $asm01.TypeRef("System.Text.StringBuilder")
            ]),
          CustomInfo_Format
        );

        $.Method({Static:true , Public:true }, "GetActiveSection",
          new JSIL.MethodSignature(null, [
              $.String, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]),
              $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]),
              $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
            ]),
          CustomInfo_GetActiveSection
        );

        $.Method({Static:true , Public:true }, "Parse",
          new JSIL.MethodSignature($.Type, [
              $.String, $.Int32,
              $.Int32, $asm01.TypeRef("System.Globalization.NumberFormatInfo")
            ]),
          CustomInfo_Parse
        );

        $.Field({Static:false, Public:true }, "UseGroup", $.Boolean);

        $.Field({Static:false, Public:true }, "DecimalDigits", $.Int32);

        $.Field({Static:false, Public:true }, "DecimalPointPos", $.Int32);

        $.Field({Static:false, Public:true }, "DecimalTailSharpDigits", $.Int32);

        $.Field({Static:false, Public:true }, "IntegerDigits", $.Int32);

        $.Field({Static:false, Public:true }, "IntegerHeadSharpDigits", $.Int32);

        $.Field({Static:false, Public:true }, "IntegerHeadPos", $.Int32);

        $.Field({Static:false, Public:true }, "UseExponent", $.Boolean);

        $.Field({Static:false, Public:true }, "ExponentDigits", $.Int32);

        $.Field({Static:false, Public:true }, "ExponentTailSharpDigits", $.Int32);

        $.Field({Static:false, Public:true }, "ExponentNegativeSignOnly", $.Boolean);

        $.Field({Static:false, Public:true }, "DividePlaces", $.Int32);

        $.Field({Static:false, Public:true }, "Percents", $.Int32);

        $.Field({Static:false, Public:true }, "Permilles", $.Int32);


        return function (newThisType) { $thisType = newThisType; };
      });

    })();

    JSIL.DeclareNamespace("System.Globalization");
    /* class System.Globalization.NumberFormatInfo */

    (function NumberFormatInfo$Members () {
      var $, $thisType;
      var $T00 = function () {
        return ($T00 = JSIL.Memoize($asm01.System.Globalization.CultureData)) ();
      };
      var $T01 = function () {
        return ($T01 = JSIL.Memoize($asm01.System.Int32)) ();
      };
      var $T02 = function () {
        return ($T02 = JSIL.Memoize($asm01.System.String)) ();
      };
      var $T03 = function () {
        return ($T03 = JSIL.Memoize(System.Array.Of($asm01.System.Int32))) ();
      };
      var $T04 = function () {
        return ($T04 = JSIL.Memoize($asm01.System.ArgumentException)) ();
      };
      var $T05 = function () {
        return ($T05 = JSIL.Memoize($asm01.System.Environment)) ();
      };
      var $T06 = function () {
        return ($T06 = JSIL.Memoize($asm01.System.Object)) ();
      };
      var $T07 = function () {
        return ($T07 = JSIL.Memoize($asm01.System.Array)) ();
      };
      var $T08 = function () {
        return ($T08 = JSIL.Memoize($asm01.System.Globalization.CultureInfo)) ();
      };
      var $T09 = function () {
        return ($T09 = JSIL.Memoize($asm01.System.Threading.Thread)) ();
      };
      var $T0A = function () {
        return ($T0A = JSIL.Memoize($asm01.System.Globalization.DigitShapes)) ();
      };
      var $T0B = function () {
        return ($T0B = JSIL.Memoize($asm01.System.Globalization.NumberFormatInfo)) ();
      };
      var $T0C = function () {
        return ($T0C = JSIL.Memoize(System.Array.Of($asm01.System.String))) ();
      };
      var $T0D = function () {
        return ($T0D = JSIL.Memoize($asm01.System.Type)) ();
      };
      var $T0E = function () {
        return ($T0E = JSIL.Memoize($asm01.System.IFormatProvider)) ();
      };
      var $T0F = function () {
        return ($T0F = JSIL.Memoize($asm01.System.Runtime.Serialization.StreamingContext)) ();
      };
      var $T10 = function () {
        return ($T10 = JSIL.Memoize($asm01.System.ArgumentNullException)) ();
      };
      var $T11 = function () {
        return ($T11 = JSIL.Memoize($asm01.System.ArgumentOutOfRangeException)) ();
      };
      var $T12 = function () {
        return ($T12 = JSIL.Memoize($asm01.System.Globalization.NumberStyles)) ();
      };
      var $T13 = function () {
        return ($T13 = JSIL.Memoize($asm01.System.Char)) ();
      };
      var $T14 = function () {
        return ($T14 = JSIL.Memoize($asm01.System.Globalization.CharUnicodeInfo)) ();
      };
      var $T15 = function () {
        return ($T15 = JSIL.Memoize($asm01.System.Globalization.UnicodeCategory)) ();
      };
      var $T16 = function () {
        return ($T16 = JSIL.Memoize($asm01.System.InvalidOperationException)) ();
      };
      var $S00 = function () {
        return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentException"), [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.String")]))) ();
      };
      var $S01 = function () {
        return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Globalization.NumberFormatInfo"), null))) ();
      };
      var $S02 = function () {
        return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentNullException"), [$asm01.TypeRef("System.String")]))) ();
      };
      var $S03 = function () {
        return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentOutOfRangeException"), [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.String")]))) ();
      };
      var $S04 = function () {
        return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentNullException"), [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.String")]))) ();
      };
      var $S05 = function () {
        return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentException"), [$asm01.TypeRef("System.String")]))) ();
      };
      var $S06 = function () {
        return ($S06 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Char"), $asm01.TypeRef("System.Char")]))) ();
      };
      var $S07 = function () {
        return ($S07 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.InvalidOperationException"), [$asm01.TypeRef("System.String")]))) ();
      };
      var $IM00 = function () {
        return ($IM00 = JSIL.Memoize($asm01.System.IFormatProvider.GetFormat)) ();
      };


      function NumberFormatInfo__ctor$00 () {
        $thisType.prototype._ctor.call(this, null);
      };

      function NumberFormatInfo__ctor$01 (cultureData) {
        this.numberGroupSizes = JSIL.Array.New($T01(), [3]);
        this.currencyGroupSizes = JSIL.Array.New($T01(), [3]);
        this.percentGroupSizes = JSIL.Array.New($T01(), [3]);
        this.positiveSign = "+";
        this.negativeSign = "-";
        this.numberDecimalSeparator = ".";
        this.numberGroupSeparator = ",";
        this.currencyGroupSeparator = ",";
        this.currencyDecimalSeparator = ".";
        this.currencySymbol = "\xa4";
        this.nanSymbol = "NaN";
        this.positiveInfinitySymbol = "Infinity";
        this.negativeInfinitySymbol = "-Infinity";
        this.percentDecimalSeparator = ".";
        this.percentGroupSeparator = ",";
        this.percentSymbol = "%";
        this.perMilleSymbol = "\u2030";
        this.nativeDigits = JSIL.Array.New($T02(), ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"]);
        this.numberDecimalDigits = 2;
        this.currencyDecimalDigits = 2;
        this.numberNegativePattern = 1;
        this.percentDecimalDigits = 2;
        this.digitSubstitution = 1;
        this.validForParseAsNumber = true;
        this.validForParseAsCurrency = true;
        if (cultureData !== null) {
          cultureData.GetNFIValues(this);
          if (cultureData.get_IsInvariantCulture()) {
            this.m_isInvariant = true;
          }
        }
      };

      function NumberFormatInfo_CheckGroupSize (propName, groupSize) {

        for (var i = 0; i < (groupSize.length | 0); ) {
          if ((groupSize[i] | 0) < 1) {
            if (!((i !== (((groupSize.length | 0) - 1) | 0)) || ((groupSize[i] | 0) !== 0))) {
              return;
            }
            throw $S00().Construct($T05().GetResourceString("Argument_InvalidGroupSize"), propName);
          } else {
            if ((groupSize[i] | 0) > 9) {
              throw $S00().Construct($T05().GetResourceString("Argument_InvalidGroupSize"), propName);
            }
            i = ((i + 1) | 0);
          }
        }
      };

      function NumberFormatInfo_Clone () {
        var expr_0B = $thisType.$Cast($T06().prototype.MemberwiseClone.call(this));
        expr_0B.isReadOnly = false;
        return expr_0B;
      };

      function NumberFormatInfo_get_CurrencyDecimalDigits () {
        return this.currencyDecimalDigits;
      };

      function NumberFormatInfo_get_CurrencyDecimalSeparator () {
        return this.currencyDecimalSeparator;
      };

      function NumberFormatInfo_get_CurrencyGroupSeparator () {
        return this.currencyGroupSeparator;
      };

      function NumberFormatInfo_get_CurrencyGroupSizes () {
        return $T03().$Cast(JSIL.Array.Clone(this.currencyGroupSizes));
      };

      function NumberFormatInfo_get_CurrencyNegativePattern () {
        return this.currencyNegativePattern;
      };

      function NumberFormatInfo_get_CurrencyPositivePattern () {
        return this.currencyPositivePattern;
      };

      function NumberFormatInfo_get_CurrencySymbol () {
        return this.currencySymbol;
      };

      function NumberFormatInfo_get_CurrentInfo () {
        var currentCulture = $T09().get_CurrentThread().get_CurrentCulture();
        if (!currentCulture.m_isInherited) {
          var numInfo = currentCulture.numInfo;
          if (numInfo !== null) {
            return numInfo;
          }
        }
        return $thisType.$Cast(currentCulture.GetFormat($thisType.__Type__));
      };

      function NumberFormatInfo_get_DigitSubstitution () {
        return $T0A().$Cast(this.digitSubstitution);
      };

      function NumberFormatInfo_get_InvariantInfo () {
        if ($thisType.invariantInfo === null) {
          var expr_0E = $S01().Construct();
          expr_0E.m_isInvariant = true;
          $thisType.invariantInfo = $thisType.ReadOnly(expr_0E);
        }
        return $thisType.invariantInfo;
      };

      function NumberFormatInfo_get_IsReadOnly () {
        return this.isReadOnly;
      };

      function NumberFormatInfo_get_NaNSymbol () {
        return this.nanSymbol;
      };

      function NumberFormatInfo_get_NativeDigits () {
        return $T0C().$Cast(JSIL.Array.Clone(this.nativeDigits));
      };

      function NumberFormatInfo_get_NegativeInfinitySymbol () {
        return this.negativeInfinitySymbol;
      };

      function NumberFormatInfo_get_NegativeSign () {
        return this.negativeSign;
      };

      function NumberFormatInfo_get_NumberDecimalDigits () {
        return this.numberDecimalDigits;
      };

      function NumberFormatInfo_get_NumberDecimalSeparator () {
        return this.numberDecimalSeparator;
      };

      function NumberFormatInfo_get_NumberGroupSeparator () {
        return this.numberGroupSeparator;
      };

      function NumberFormatInfo_get_NumberGroupSizes () {
        return $T03().$Cast(JSIL.Array.Clone(this.numberGroupSizes));
      };

      function NumberFormatInfo_get_NumberNegativePattern () {
        return this.numberNegativePattern;
      };

      function NumberFormatInfo_get_PercentDecimalDigits () {
        return this.percentDecimalDigits;
      };

      function NumberFormatInfo_get_PercentDecimalSeparator () {
        return this.percentDecimalSeparator;
      };

      function NumberFormatInfo_get_PercentGroupSeparator () {
        return this.percentGroupSeparator;
      };

      function NumberFormatInfo_get_PercentGroupSizes () {
        return $T03().$Cast(JSIL.Array.Clone(this.percentGroupSizes));
      };

      function NumberFormatInfo_get_PercentNegativePattern () {
        return this.percentNegativePattern;
      };

      function NumberFormatInfo_get_PercentPositivePattern () {
        return this.percentPositivePattern;
      };

      function NumberFormatInfo_get_PercentSymbol () {
        return this.percentSymbol;
      };

      function NumberFormatInfo_get_PerMilleSymbol () {
        return this.perMilleSymbol;
      };

      function NumberFormatInfo_get_PositiveInfinitySymbol () {
        return this.positiveInfinitySymbol;
      };

      function NumberFormatInfo_get_PositiveSign () {
        return this.positiveSign;
      };

      function NumberFormatInfo_GetFormat (formatType) {
        if (!$T0D().op_Equality(formatType, $thisType.__Type__)) {
          return null;
        }
        return this;
      };

      function NumberFormatInfo_GetInstance (formatProvider) {
        var cultureInfo = $T08().$As(formatProvider);
        if (!((cultureInfo === null) || cultureInfo.m_isInherited)) {
          var numberFormatInfo = cultureInfo.numInfo;
          if (numberFormatInfo !== null) {
            return numberFormatInfo;
          }
          return cultureInfo.get_NumberFormat();
        } else {
          numberFormatInfo = $thisType.$As(formatProvider);
          if (numberFormatInfo !== null) {
            return numberFormatInfo;
          }
          if (formatProvider !== null) {
            numberFormatInfo = $thisType.$As($IM00().Call(formatProvider, null, $thisType.__Type__));
            if (numberFormatInfo !== null) {
              return numberFormatInfo;
            }
          }
          return $thisType.get_CurrentInfo();
        }
      };

      function NumberFormatInfo_OnDeserialized (ctx) {
      };

      function NumberFormatInfo_OnDeserializing (ctx) {
      };

      function NumberFormatInfo_OnSerializing (ctx) {
        if (this.numberDecimalSeparator != this.numberGroupSeparator) {
          this.validForParseAsNumber = true;
        } else {
          this.validForParseAsNumber = false;
        }
        if (!(!(this.numberDecimalSeparator != this.numberGroupSeparator) ||
            !(this.numberDecimalSeparator != this.currencyGroupSeparator) ||
            !(this.currencyDecimalSeparator != this.numberGroupSeparator) || !(this.currencyDecimalSeparator != this.currencyGroupSeparator))) {
          this.validForParseAsCurrency = true;
          return;
        }
        this.validForParseAsCurrency = false;
      };

      function NumberFormatInfo_ReadOnly (nfi) {
        if (nfi === null) {
          throw $S02().Construct("nfi");
        }
        if (nfi.get_IsReadOnly()) {
          return nfi;
        }
        var expr_23 = $thisType.$Cast($T06().prototype.MemberwiseClone.call(nfi));
        expr_23.isReadOnly = true;
        return expr_23;
      };

      function NumberFormatInfo_set_CurrencyDecimalDigits (value) {
        if (!(((value | 0) >= 0) && ((value | 0) <= 99))) {
          throw $S03().Construct("CurrencyDecimalDigits", $T02().Format(
              $T08().get_CurrentCulture(),
              $T05().GetResourceString("ArgumentOutOfRange_Range"),
              $T01().$Box(0),
              $T01().$Box(99)
            ));
        }
        this.VerifyWritable();
        this.currencyDecimalDigits = (value | 0);
      };

      function NumberFormatInfo_set_CurrencyDecimalSeparator (value) {
        this.VerifyWritable();
        $thisType.VerifyDecimalSeparator(value, "CurrencyDecimalSeparator");
        this.currencyDecimalSeparator = value;
      };

      function NumberFormatInfo_set_CurrencyGroupSeparator (value) {
        this.VerifyWritable();
        $thisType.VerifyGroupSeparator(value, "CurrencyGroupSeparator");
        this.currencyGroupSeparator = value;
      };

      function NumberFormatInfo_set_CurrencyGroupSizes (value) {
        if (value === null) {
          throw $S04().Construct("CurrencyGroupSizes", $T05().GetResourceString("ArgumentNull_Obj"));
        }
        this.VerifyWritable();
        var groupSize = $T03().$Cast(JSIL.Array.Clone(value));
        $thisType.CheckGroupSize("CurrencyGroupSizes", groupSize);
        this.currencyGroupSizes = groupSize;
      };

      function NumberFormatInfo_set_CurrencyNegativePattern (value) {
        if (!(((value | 0) >= 0) && ((value | 0) <= 15))) {
          throw $S03().Construct("CurrencyNegativePattern", $T02().Format(
              $T08().get_CurrentCulture(),
              $T05().GetResourceString("ArgumentOutOfRange_Range"),
              $T01().$Box(0),
              $T01().$Box(15)
            ));
        }
        this.VerifyWritable();
        this.currencyNegativePattern = (value | 0);
      };

      function NumberFormatInfo_set_CurrencyPositivePattern (value) {
        if (!(((value | 0) >= 0) && ((value | 0) <= 3))) {
          throw $S03().Construct("CurrencyPositivePattern", $T02().Format(
              $T08().get_CurrentCulture(),
              $T05().GetResourceString("ArgumentOutOfRange_Range"),
              $T01().$Box(0),
              $T01().$Box(3)
            ));
        }
        this.VerifyWritable();
        this.currencyPositivePattern = (value | 0);
      };

      function NumberFormatInfo_set_CurrencySymbol (value) {
        if (value === null) {
          throw $S04().Construct("CurrencySymbol", $T05().GetResourceString("ArgumentNull_String"));
        }
        this.VerifyWritable();
        this.currencySymbol = value;
      };

      function NumberFormatInfo_set_DigitSubstitution (value) {
        this.VerifyWritable();
        $thisType.VerifyDigitSubstitution(value, "DigitSubstitution");
        this.digitSubstitution = (value.valueOf() | 0);
      };

      function NumberFormatInfo_set_NaNSymbol (value) {
        if (value === null) {
          throw $S04().Construct("NaNSymbol", $T05().GetResourceString("ArgumentNull_String"));
        }
        this.VerifyWritable();
        this.nanSymbol = value;
      };

      function NumberFormatInfo_set_NativeDigits (value) {
        this.VerifyWritable();
        $thisType.VerifyNativeDigits(value, "NativeDigits");
        this.nativeDigits = value;
      };

      function NumberFormatInfo_set_NegativeInfinitySymbol (value) {
        if (value === null) {
          throw $S04().Construct("NegativeInfinitySymbol", $T05().GetResourceString("ArgumentNull_String"));
        }
        this.VerifyWritable();
        this.negativeInfinitySymbol = value;
      };

      function NumberFormatInfo_set_NegativeSign (value) {
        if (value === null) {
          throw $S04().Construct("NegativeSign", $T05().GetResourceString("ArgumentNull_String"));
        }
        this.VerifyWritable();
        this.negativeSign = value;
      };

      function NumberFormatInfo_set_NumberDecimalDigits (value) {
        if (!(((value | 0) >= 0) && ((value | 0) <= 99))) {
          throw $S03().Construct("NumberDecimalDigits", $T02().Format(
              $T08().get_CurrentCulture(),
              $T05().GetResourceString("ArgumentOutOfRange_Range"),
              $T01().$Box(0),
              $T01().$Box(99)
            ));
        }
        this.VerifyWritable();
        this.numberDecimalDigits = (value | 0);
      };

      function NumberFormatInfo_set_NumberDecimalSeparator (value) {
        this.VerifyWritable();
        $thisType.VerifyDecimalSeparator(value, "NumberDecimalSeparator");
        this.numberDecimalSeparator = value;
      };

      function NumberFormatInfo_set_NumberGroupSeparator (value) {
        this.VerifyWritable();
        $thisType.VerifyGroupSeparator(value, "NumberGroupSeparator");
        this.numberGroupSeparator = value;
      };

      function NumberFormatInfo_set_NumberGroupSizes (value) {
        if (value === null) {
          throw $S04().Construct("NumberGroupSizes", $T05().GetResourceString("ArgumentNull_Obj"));
        }
        this.VerifyWritable();
        var groupSize = $T03().$Cast(JSIL.Array.Clone(value));
        $thisType.CheckGroupSize("NumberGroupSizes", groupSize);
        this.numberGroupSizes = groupSize;
      };

      function NumberFormatInfo_set_NumberNegativePattern (value) {
        if (!(((value | 0) >= 0) && ((value | 0) <= 4))) {
          throw $S03().Construct("NumberNegativePattern", $T02().Format(
              $T08().get_CurrentCulture(),
              $T05().GetResourceString("ArgumentOutOfRange_Range"),
              $T01().$Box(0),
              $T01().$Box(4)
            ));
        }
        this.VerifyWritable();
        this.numberNegativePattern = (value | 0);
      };

      function NumberFormatInfo_set_PercentDecimalDigits (value) {
        if (!(((value | 0) >= 0) && ((value | 0) <= 99))) {
          throw $S03().Construct("PercentDecimalDigits", $T02().Format(
              $T08().get_CurrentCulture(),
              $T05().GetResourceString("ArgumentOutOfRange_Range"),
              $T01().$Box(0),
              $T01().$Box(99)
            ));
        }
        this.VerifyWritable();
        this.percentDecimalDigits = (value | 0);
      };

      function NumberFormatInfo_set_PercentDecimalSeparator (value) {
        this.VerifyWritable();
        $thisType.VerifyDecimalSeparator(value, "PercentDecimalSeparator");
        this.percentDecimalSeparator = value;
      };

      function NumberFormatInfo_set_PercentGroupSeparator (value) {
        this.VerifyWritable();
        $thisType.VerifyGroupSeparator(value, "PercentGroupSeparator");
        this.percentGroupSeparator = value;
      };

      function NumberFormatInfo_set_PercentGroupSizes (value) {
        if (value === null) {
          throw $S04().Construct("PercentGroupSizes", $T05().GetResourceString("ArgumentNull_Obj"));
        }
        this.VerifyWritable();
        var groupSize = $T03().$Cast(JSIL.Array.Clone(value));
        $thisType.CheckGroupSize("PercentGroupSizes", groupSize);
        this.percentGroupSizes = groupSize;
      };

      function NumberFormatInfo_set_PercentNegativePattern (value) {
        if (!(((value | 0) >= 0) && ((value | 0) <= 11))) {
          throw $S03().Construct("PercentNegativePattern", $T02().Format(
              $T08().get_CurrentCulture(),
              $T05().GetResourceString("ArgumentOutOfRange_Range"),
              $T01().$Box(0),
              $T01().$Box(11)
            ));
        }
        this.VerifyWritable();
        this.percentNegativePattern = (value | 0);
      };

      function NumberFormatInfo_set_PercentPositivePattern (value) {
        if (!(((value | 0) >= 0) && ((value | 0) <= 3))) {
          throw $S03().Construct("PercentPositivePattern", $T02().Format(
              $T08().get_CurrentCulture(),
              $T05().GetResourceString("ArgumentOutOfRange_Range"),
              $T01().$Box(0),
              $T01().$Box(3)
            ));
        }
        this.VerifyWritable();
        this.percentPositivePattern = (value | 0);
      };

      function NumberFormatInfo_set_PercentSymbol (value) {
        if (value === null) {
          throw $S04().Construct("PercentSymbol", $T05().GetResourceString("ArgumentNull_String"));
        }
        this.VerifyWritable();
        this.percentSymbol = value;
      };

      function NumberFormatInfo_set_PerMilleSymbol (value) {
        if (value === null) {
          throw $S04().Construct("PerMilleSymbol", $T05().GetResourceString("ArgumentNull_String"));
        }
        this.VerifyWritable();
        this.perMilleSymbol = value;
      };

      function NumberFormatInfo_set_PositiveInfinitySymbol (value) {
        if (value === null) {
          throw $S04().Construct("PositiveInfinitySymbol", $T05().GetResourceString("ArgumentNull_String"));
        }
        this.VerifyWritable();
        this.positiveInfinitySymbol = value;
      };

      function NumberFormatInfo_set_PositiveSign (value) {
        if (value === null) {
          throw $S04().Construct("PositiveSign", $T05().GetResourceString("ArgumentNull_String"));
        }
        this.VerifyWritable();
        this.positiveSign = value;
      };

      function NumberFormatInfo_ValidateParseStyleFloatingPoint (style) {
        if ((($T12().$Cast(style & $T12().$Cast(-1024))).valueOf() | 0) !== 0) {
          throw $S00().Construct($T05().GetResourceString("Argument_InvalidNumberStyles"), "style");
        }
        if ((($T12().$Cast(style & $T12().AllowHexSpecifier)).valueOf() | 0) !== 0) {
          throw $S05().Construct($T05().GetResourceString("Arg_HexStyleNotSupported"));
        }
      };

      function NumberFormatInfo_ValidateParseStyleInteger (style) {
        if ((($T12().$Cast(style & $T12().$Cast(-1024))).valueOf() | 0) !== 0) {
          throw $S00().Construct($T05().GetResourceString("Argument_InvalidNumberStyles"), "style");
        }
        if (!(((($T12().$Cast(style & $T12().AllowHexSpecifier)).valueOf() | 0) === 0) || ((($T12().$Cast(style & $T12().$Flags(
                      "AllowCurrencySymbol", "AllowDecimalPoint", "AllowExponent", "AllowLeadingSign",
                      "AllowParentheses", "AllowThousands", "AllowTrailingSign"
                  ))).valueOf() | 0) === 0))) {
          throw $S05().Construct($T05().GetResourceString("Arg_InvalidHexStyle"));
        }
      };

      function NumberFormatInfo_VerifyDecimalSeparator (decSep, propertyName) {
        if (decSep === null) {
          throw $S04().Construct(propertyName, $T05().GetResourceString("ArgumentNull_String"));
        }
        if ((decSep.length | 0) === 0) {
          throw $S05().Construct($T05().GetResourceString("Argument_EmptyDecString"));
        }
      };

      function NumberFormatInfo_VerifyDigitSubstitution (digitSub, propertyName) {
        switch (digitSub.valueOf()) {
          case 0:
          case 1:
          case 2:
            return;

          default:
            throw $S00().Construct($T05().GetResourceString("Argument_InvalidDigitSubstitution"), propertyName);

        }
      };

      function NumberFormatInfo_VerifyGroupSeparator (groupSep, propertyName) {
        if (groupSep === null) {
          throw $S04().Construct(propertyName, $T05().GetResourceString("ArgumentNull_String"));
        }
      };

      function NumberFormatInfo_VerifyNativeDigits (nativeDig, propertyName) {
        if (nativeDig === null) {
          throw $S04().Construct(propertyName, $T05().GetResourceString("ArgumentNull_Array"));
        }
        if ((nativeDig.length | 0) !== 10) {
          throw $S00().Construct($T05().GetResourceString("Argument_InvalidNativeDigitCount"), propertyName);
        }

        for (var i = 0; i < (nativeDig.length | 0); i = ((i + 1) | 0)) {
          if (nativeDig[i] === null) {
            throw $S04().Construct(propertyName, $T05().GetResourceString("ArgumentNull_ArrayValue"));
          }
          if ((nativeDig[i].length | 0) !== 1) {
            if ((nativeDig[i].length | 0) !== 2) {
              throw $S00().Construct($T05().GetResourceString("Argument_InvalidNativeDigitValue"), propertyName);
            }
            if (!$S06().CallStatic($T13(), "IsSurrogatePair", null, nativeDig[i][0], nativeDig[i][1])) {
              throw $S00().Construct($T05().GetResourceString("Argument_InvalidNativeDigitValue"), propertyName);
            }
          }
          if (!((($T14().GetDecimalDigitValue(nativeDig[i], 0) | 0) === i) || ($T14().GetUnicodeCategory(nativeDig[i], 0) === $T15().PrivateUse))) {
            throw $S00().Construct($T05().GetResourceString("Argument_InvalidNativeDigitValue"), propertyName);
          }
        }
      };

      function NumberFormatInfo_VerifyWritable () {
        if (this.isReadOnly) {
          throw $S07().Construct($T05().GetResourceString("InvalidOperation_ReadOnly"));
        }
      };

      JSIL.MakeType({
          BaseType: $asm01.TypeRef("System.Object"),
          Name: "System.Globalization.NumberFormatInfo",
          IsPublic: true,
          IsReferenceType: true,
          MaximumConstructorArguments: 1,
        }, function ($ib) {
        $ = $ib;

        $.Method({Static:false, Public:true }, ".ctor",
          JSIL.MethodSignature.Void,
          NumberFormatInfo__ctor$00
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:false, Public:false}, ".ctor",
          JSIL.MethodSignature.Action($asm01.TypeRef("System.Globalization.CultureData")),
          NumberFormatInfo__ctor$01
        )
          .Attribute($asm01.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

        $.Method({Static:true , Public:false}, "CheckGroupSize",
          new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.Int32])]),
          NumberFormatInfo_CheckGroupSize
        );

        $.Method({Static:false, Public:true , Virtual:true }, "Clone",
          JSIL.MethodSignature.Return($.Object),
          NumberFormatInfo_Clone
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:false, Public:true }, "get_CurrencyDecimalDigits",
          JSIL.MethodSignature.Return($.Int32),
          NumberFormatInfo_get_CurrencyDecimalDigits
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:false, Public:true }, "get_CurrencyDecimalSeparator",
          JSIL.MethodSignature.Return($.String),
          NumberFormatInfo_get_CurrencyDecimalSeparator
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:false, Public:true }, "get_CurrencyGroupSeparator",
          JSIL.MethodSignature.Return($.String),
          NumberFormatInfo_get_CurrencyGroupSeparator
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:false, Public:true }, "get_CurrencyGroupSizes",
          JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Int32])),
          NumberFormatInfo_get_CurrencyGroupSizes
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:false, Public:true }, "get_CurrencyNegativePattern",
          JSIL.MethodSignature.Return($.Int32),
          NumberFormatInfo_get_CurrencyNegativePattern
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:false, Public:true }, "get_CurrencyPositivePattern",
          JSIL.MethodSignature.Return($.Int32),
          NumberFormatInfo_get_CurrencyPositivePattern
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:false, Public:true }, "get_CurrencySymbol",
          JSIL.MethodSignature.Return($.String),
          NumberFormatInfo_get_CurrencySymbol
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "get_CurrentInfo",
          JSIL.MethodSignature.Return($.Type),
          NumberFormatInfo_get_CurrentInfo
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:false, Public:true }, "get_DigitSubstitution",
          JSIL.MethodSignature.Return($asm01.TypeRef("System.Globalization.DigitShapes")),
          NumberFormatInfo_get_DigitSubstitution
        );

        $.Method({Static:true , Public:true }, "get_InvariantInfo",
          JSIL.MethodSignature.Return($.Type),
          NumberFormatInfo_get_InvariantInfo
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:false, Public:true }, "get_IsReadOnly",
          JSIL.MethodSignature.Return($.Boolean),
          NumberFormatInfo_get_IsReadOnly
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:false, Public:true }, "get_NaNSymbol",
          JSIL.MethodSignature.Return($.String),
          NumberFormatInfo_get_NaNSymbol
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:false, Public:true }, "get_NativeDigits",
          JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String])),
          NumberFormatInfo_get_NativeDigits
        );

        $.Method({Static:false, Public:true }, "get_NegativeInfinitySymbol",
          JSIL.MethodSignature.Return($.String),
          NumberFormatInfo_get_NegativeInfinitySymbol
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:false, Public:true }, "get_NegativeSign",
          JSIL.MethodSignature.Return($.String),
          NumberFormatInfo_get_NegativeSign
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:false, Public:true }, "get_NumberDecimalDigits",
          JSIL.MethodSignature.Return($.Int32),
          NumberFormatInfo_get_NumberDecimalDigits
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:false, Public:true }, "get_NumberDecimalSeparator",
          JSIL.MethodSignature.Return($.String),
          NumberFormatInfo_get_NumberDecimalSeparator
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:false, Public:true }, "get_NumberGroupSeparator",
          JSIL.MethodSignature.Return($.String),
          NumberFormatInfo_get_NumberGroupSeparator
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:false, Public:true }, "get_NumberGroupSizes",
          JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Int32])),
          NumberFormatInfo_get_NumberGroupSizes
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:false, Public:true }, "get_NumberNegativePattern",
          JSIL.MethodSignature.Return($.Int32),
          NumberFormatInfo_get_NumberNegativePattern
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:false, Public:true }, "get_PercentDecimalDigits",
          JSIL.MethodSignature.Return($.Int32),
          NumberFormatInfo_get_PercentDecimalDigits
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:false, Public:true }, "get_PercentDecimalSeparator",
          JSIL.MethodSignature.Return($.String),
          NumberFormatInfo_get_PercentDecimalSeparator
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:false, Public:true }, "get_PercentGroupSeparator",
          JSIL.MethodSignature.Return($.String),
          NumberFormatInfo_get_PercentGroupSeparator
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:false, Public:true }, "get_PercentGroupSizes",
          JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Int32])),
          NumberFormatInfo_get_PercentGroupSizes
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:false, Public:true }, "get_PercentNegativePattern",
          JSIL.MethodSignature.Return($.Int32),
          NumberFormatInfo_get_PercentNegativePattern
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:false, Public:true }, "get_PercentPositivePattern",
          JSIL.MethodSignature.Return($.Int32),
          NumberFormatInfo_get_PercentPositivePattern
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:false, Public:true }, "get_PercentSymbol",
          JSIL.MethodSignature.Return($.String),
          NumberFormatInfo_get_PercentSymbol
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:false, Public:true }, "get_PerMilleSymbol",
          JSIL.MethodSignature.Return($.String),
          NumberFormatInfo_get_PerMilleSymbol
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:false, Public:true }, "get_PositiveInfinitySymbol",
          JSIL.MethodSignature.Return($.String),
          NumberFormatInfo_get_PositiveInfinitySymbol
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:false, Public:true }, "get_PositiveSign",
          JSIL.MethodSignature.Return($.String),
          NumberFormatInfo_get_PositiveSign
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:false, Public:true , Virtual:true }, "GetFormat",
          new JSIL.MethodSignature($.Object, [$asm01.TypeRef("System.Type")]),
          NumberFormatInfo_GetFormat
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "GetInstance",
          new JSIL.MethodSignature($.Type, [$asm01.TypeRef("System.IFormatProvider")]),
          NumberFormatInfo_GetInstance
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:false, Public:false}, "OnDeserialized",
          JSIL.MethodSignature.Action($asm01.TypeRef("System.Runtime.Serialization.StreamingContext")),
          NumberFormatInfo_OnDeserialized
        )
          .Attribute($asm01.TypeRef("System.Runtime.Serialization.OnDeserializedAttribute"));

        $.Method({Static:false, Public:false}, "OnDeserializing",
          JSIL.MethodSignature.Action($asm01.TypeRef("System.Runtime.Serialization.StreamingContext")),
          NumberFormatInfo_OnDeserializing
        )
          .Attribute($asm01.TypeRef("System.Runtime.Serialization.OnDeserializingAttribute"));

        $.Method({Static:false, Public:false}, "OnSerializing",
          JSIL.MethodSignature.Action($asm01.TypeRef("System.Runtime.Serialization.StreamingContext")),
          NumberFormatInfo_OnSerializing
        )
          .Attribute($asm01.TypeRef("System.Runtime.Serialization.OnSerializingAttribute"));

        $.Method({Static:true , Public:true }, "ReadOnly",
          new JSIL.MethodSignature($.Type, [$.Type]),
          NumberFormatInfo_ReadOnly
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:false, Public:true }, "set_CurrencyDecimalDigits",
          JSIL.MethodSignature.Action($.Int32),
          NumberFormatInfo_set_CurrencyDecimalDigits
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:false, Public:true }, "set_CurrencyDecimalSeparator",
          JSIL.MethodSignature.Action($.String),
          NumberFormatInfo_set_CurrencyDecimalSeparator
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:false, Public:true }, "set_CurrencyGroupSeparator",
          JSIL.MethodSignature.Action($.String),
          NumberFormatInfo_set_CurrencyGroupSeparator
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:false, Public:true }, "set_CurrencyGroupSizes",
          JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Int32])),
          NumberFormatInfo_set_CurrencyGroupSizes
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:false, Public:true }, "set_CurrencyNegativePattern",
          JSIL.MethodSignature.Action($.Int32),
          NumberFormatInfo_set_CurrencyNegativePattern
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:false, Public:true }, "set_CurrencyPositivePattern",
          JSIL.MethodSignature.Action($.Int32),
          NumberFormatInfo_set_CurrencyPositivePattern
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:false, Public:true }, "set_CurrencySymbol",
          JSIL.MethodSignature.Action($.String),
          NumberFormatInfo_set_CurrencySymbol
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:false, Public:true }, "set_DigitSubstitution",
          JSIL.MethodSignature.Action($asm01.TypeRef("System.Globalization.DigitShapes")),
          NumberFormatInfo_set_DigitSubstitution
        );

        $.Method({Static:false, Public:true }, "set_NaNSymbol",
          JSIL.MethodSignature.Action($.String),
          NumberFormatInfo_set_NaNSymbol
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:false, Public:true }, "set_NativeDigits",
          JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String])),
          NumberFormatInfo_set_NativeDigits
        );

        $.Method({Static:false, Public:true }, "set_NegativeInfinitySymbol",
          JSIL.MethodSignature.Action($.String),
          NumberFormatInfo_set_NegativeInfinitySymbol
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:false, Public:true }, "set_NegativeSign",
          JSIL.MethodSignature.Action($.String),
          NumberFormatInfo_set_NegativeSign
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:false, Public:true }, "set_NumberDecimalDigits",
          JSIL.MethodSignature.Action($.Int32),
          NumberFormatInfo_set_NumberDecimalDigits
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:false, Public:true }, "set_NumberDecimalSeparator",
          JSIL.MethodSignature.Action($.String),
          NumberFormatInfo_set_NumberDecimalSeparator
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:false, Public:true }, "set_NumberGroupSeparator",
          JSIL.MethodSignature.Action($.String),
          NumberFormatInfo_set_NumberGroupSeparator
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:false, Public:true }, "set_NumberGroupSizes",
          JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Int32])),
          NumberFormatInfo_set_NumberGroupSizes
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:false, Public:true }, "set_NumberNegativePattern",
          JSIL.MethodSignature.Action($.Int32),
          NumberFormatInfo_set_NumberNegativePattern
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:false, Public:true }, "set_PercentDecimalDigits",
          JSIL.MethodSignature.Action($.Int32),
          NumberFormatInfo_set_PercentDecimalDigits
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:false, Public:true }, "set_PercentDecimalSeparator",
          JSIL.MethodSignature.Action($.String),
          NumberFormatInfo_set_PercentDecimalSeparator
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:false, Public:true }, "set_PercentGroupSeparator",
          JSIL.MethodSignature.Action($.String),
          NumberFormatInfo_set_PercentGroupSeparator
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:false, Public:true }, "set_PercentGroupSizes",
          JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Int32])),
          NumberFormatInfo_set_PercentGroupSizes
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:false, Public:true }, "set_PercentNegativePattern",
          JSIL.MethodSignature.Action($.Int32),
          NumberFormatInfo_set_PercentNegativePattern
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:false, Public:true }, "set_PercentPositivePattern",
          JSIL.MethodSignature.Action($.Int32),
          NumberFormatInfo_set_PercentPositivePattern
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:false, Public:true }, "set_PercentSymbol",
          JSIL.MethodSignature.Action($.String),
          NumberFormatInfo_set_PercentSymbol
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:false, Public:true }, "set_PerMilleSymbol",
          JSIL.MethodSignature.Action($.String),
          NumberFormatInfo_set_PerMilleSymbol
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:false, Public:true }, "set_PositiveInfinitySymbol",
          JSIL.MethodSignature.Action($.String),
          NumberFormatInfo_set_PositiveInfinitySymbol
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:false, Public:true }, "set_PositiveSign",
          JSIL.MethodSignature.Action($.String),
          NumberFormatInfo_set_PositiveSign
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:false}, "ValidateParseStyleFloatingPoint",
          JSIL.MethodSignature.Action($asm01.TypeRef("System.Globalization.NumberStyles")),
          NumberFormatInfo_ValidateParseStyleFloatingPoint
        );

        $.Method({Static:true , Public:false}, "ValidateParseStyleInteger",
          JSIL.MethodSignature.Action($asm01.TypeRef("System.Globalization.NumberStyles")),
          NumberFormatInfo_ValidateParseStyleInteger
        );

        $.Method({Static:true , Public:false}, "VerifyDecimalSeparator",
          new JSIL.MethodSignature(null, [$.String, $.String]),
          NumberFormatInfo_VerifyDecimalSeparator
        );

        $.Method({Static:true , Public:false}, "VerifyDigitSubstitution",
          new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Globalization.DigitShapes"), $.String]),
          NumberFormatInfo_VerifyDigitSubstitution
        );

        $.Method({Static:true , Public:false}, "VerifyGroupSeparator",
          new JSIL.MethodSignature(null, [$.String, $.String]),
          NumberFormatInfo_VerifyGroupSeparator
        );

        $.Method({Static:true , Public:false}, "VerifyNativeDigits",
          new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.String]), $.String]),
          NumberFormatInfo_VerifyNativeDigits
        );

        $.Method({Static:false, Public:false}, "VerifyWritable",
          JSIL.MethodSignature.Void,
          NumberFormatInfo_VerifyWritable
        );

        $.Field({Static:true , Public:false}, "invariantInfo", $asm01.TypeRef("System.Globalization.NumberFormatInfo"));

        $.Field({Static:false, Public:false}, "numberGroupSizes", $jsilcore.TypeRef("System.Array", [$.Int32]));

        $.Field({Static:false, Public:false}, "currencyGroupSizes", $jsilcore.TypeRef("System.Array", [$.Int32]));

        $.Field({Static:false, Public:false}, "percentGroupSizes", $jsilcore.TypeRef("System.Array", [$.Int32]));

        $.Field({Static:false, Public:false}, "positiveSign", $.String);

        $.Field({Static:false, Public:false}, "negativeSign", $.String);

        $.Field({Static:false, Public:false}, "numberDecimalSeparator", $.String);

        $.Field({Static:false, Public:false}, "numberGroupSeparator", $.String);

        $.Field({Static:false, Public:false}, "currencyGroupSeparator", $.String);

        $.Field({Static:false, Public:false}, "currencyDecimalSeparator", $.String);

        $.Field({Static:false, Public:false}, "currencySymbol", $.String);

        $.Field({Static:false, Public:false}, "ansiCurrencySymbol", $.String);

        $.Field({Static:false, Public:false}, "nanSymbol", $.String);

        $.Field({Static:false, Public:false}, "positiveInfinitySymbol", $.String);

        $.Field({Static:false, Public:false}, "negativeInfinitySymbol", $.String);

        $.Field({Static:false, Public:false}, "percentDecimalSeparator", $.String);

        $.Field({Static:false, Public:false}, "percentGroupSeparator", $.String);

        $.Field({Static:false, Public:false}, "percentSymbol", $.String);

        $.Field({Static:false, Public:false}, "perMilleSymbol", $.String);

        $.Field({Static:false, Public:false}, "nativeDigits", $jsilcore.TypeRef("System.Array", [$.String]))
          .Attribute($asm01.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute"));

        $.Field({Static:false, Public:false}, "m_dataItem", $.Int32)
          .Attribute($asm01.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute"));

        $.Field({Static:false, Public:false}, "numberDecimalDigits", $.Int32);

        $.Field({Static:false, Public:false}, "currencyDecimalDigits", $.Int32);

        $.Field({Static:false, Public:false}, "currencyPositivePattern", $.Int32);

        $.Field({Static:false, Public:false}, "currencyNegativePattern", $.Int32);

        $.Field({Static:false, Public:false}, "numberNegativePattern", $.Int32);

        $.Field({Static:false, Public:false}, "percentPositivePattern", $.Int32);

        $.Field({Static:false, Public:false}, "percentNegativePattern", $.Int32);

        $.Field({Static:false, Public:false}, "percentDecimalDigits", $.Int32);

        $.Field({Static:false, Public:false}, "digitSubstitution", $.Int32)
          .Attribute($asm01.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute"));

        $.Field({Static:false, Public:false}, "isReadOnly", $.Boolean);

        $.Field({Static:false, Public:false}, "m_useUserOverride", $.Boolean)
          .Attribute($asm01.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute"));

        $.Field({Static:false, Public:false}, "m_isInvariant", $.Boolean)
          .Attribute($asm01.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute"));

        $.Field({Static:false, Public:false}, "validForParseAsNumber", $.Boolean)
          .Attribute($asm01.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute"));

        $.Field({Static:false, Public:false}, "validForParseAsCurrency", $.Boolean)
          .Attribute($asm01.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute"));

        $.Constant({Static:true , Public:false}, "InvalidNumberStyles", $asm01.TypeRef("System.Globalization.NumberStyles"), -1024);

        $.Property({Static:true , Public:true }, "InvariantInfo", $.Type)
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Property({Static:false, Public:true }, "CurrencyDecimalDigits", $.Int32)
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Property({Static:false, Public:true }, "CurrencyDecimalSeparator", $.String)
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Property({Static:false, Public:true }, "IsReadOnly", $.Boolean)
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Property({Static:false, Public:true }, "CurrencyGroupSizes", $jsilcore.TypeRef("System.Array", [$.Int32]))
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Property({Static:false, Public:true }, "NumberGroupSizes", $jsilcore.TypeRef("System.Array", [$.Int32]))
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Property({Static:false, Public:true }, "PercentGroupSizes", $jsilcore.TypeRef("System.Array", [$.Int32]))
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Property({Static:false, Public:true }, "CurrencyGroupSeparator", $.String)
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Property({Static:false, Public:true }, "CurrencySymbol", $.String)
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Property({Static:true , Public:true }, "CurrentInfo", $.Type)
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Property({Static:false, Public:true }, "NaNSymbol", $.String)
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Property({Static:false, Public:true }, "CurrencyNegativePattern", $.Int32)
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Property({Static:false, Public:true }, "NumberNegativePattern", $.Int32)
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Property({Static:false, Public:true }, "PercentPositivePattern", $.Int32)
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Property({Static:false, Public:true }, "PercentNegativePattern", $.Int32)
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Property({Static:false, Public:true }, "NegativeInfinitySymbol", $.String)
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Property({Static:false, Public:true }, "NegativeSign", $.String)
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Property({Static:false, Public:true }, "NumberDecimalDigits", $.Int32)
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Property({Static:false, Public:true }, "NumberDecimalSeparator", $.String)
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Property({Static:false, Public:true }, "NumberGroupSeparator", $.String)
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Property({Static:false, Public:true }, "CurrencyPositivePattern", $.Int32)
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Property({Static:false, Public:true }, "PositiveInfinitySymbol", $.String)
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Property({Static:false, Public:true }, "PositiveSign", $.String)
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Property({Static:false, Public:true }, "PercentDecimalDigits", $.Int32)
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Property({Static:false, Public:true }, "PercentDecimalSeparator", $.String)
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Property({Static:false, Public:true }, "PercentGroupSeparator", $.String)
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Property({Static:false, Public:true }, "PercentSymbol", $.String)
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Property({Static:false, Public:true }, "PerMilleSymbol", $.String)
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Property({Static:false, Public:true }, "NativeDigits", $jsilcore.TypeRef("System.Array", [$.String]))
          .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

        $.Property({Static:false, Public:true }, "DigitSubstitution", $asm01.TypeRef("System.Globalization.DigitShapes"))
          .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

        $.ImplementInterfaces(
          /* 0 */ $asm01.TypeRef("System.ICloneable"),
          /* 1 */ $asm01.TypeRef("System.IFormatProvider")
        );


        return function (newThisType) { $thisType = newThisType; };
      })
        .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; })
        .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

    })();

    /* interface System.ICloneable */

    JSIL.MakeInterface(
      "System.ICloneable", true, [], function ($) {
        $.Method({}, "Clone", JSIL.MethodSignature.Return($.Object));
      }, [])
      .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

    /* interface System.IFormattable */

    JSIL.MakeInterface(
      "System.IFormattable", true, [], function ($) {
        $.Method({}, "ToString", new JSIL.MethodSignature($.String, [$.String, $asm01.TypeRef("System.IFormatProvider")]));
      }, [])
      .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; })
      .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

    /* class System.Convert */

    (function Convert$Members () {
      var $, $thisType;
      var $T00 = function () {
        return ($T00 = JSIL.Memoize($asm01.System.RuntimeType)) ();
      };
      var $T01 = function () {
        return ($T01 = JSIL.Memoize($asm01.System.Empty)) ();
      };
      var $T02 = function () {
        return ($T02 = JSIL.Memoize($asm01.System.Object)) ();
      };
      var $T03 = function () {
        return ($T03 = JSIL.Memoize($asm01.System.DBNull)) ();
      };
      var $T04 = function () {
        return ($T04 = JSIL.Memoize($asm01.System.Boolean)) ();
      };
      var $T05 = function () {
        return ($T05 = JSIL.Memoize($asm01.System.Char)) ();
      };
      var $T06 = function () {
        return ($T06 = JSIL.Memoize($asm01.System.SByte)) ();
      };
      var $T07 = function () {
        return ($T07 = JSIL.Memoize($asm01.System.Byte)) ();
      };
      var $T08 = function () {
        return ($T08 = JSIL.Memoize($asm01.System.Int16)) ();
      };
      var $T09 = function () {
        return ($T09 = JSIL.Memoize($asm01.System.UInt16)) ();
      };
      var $T0A = function () {
        return ($T0A = JSIL.Memoize($asm01.System.Int32)) ();
      };
      var $T0B = function () {
        return ($T0B = JSIL.Memoize($asm01.System.UInt32)) ();
      };
      var $T0C = function () {
        return ($T0C = JSIL.Memoize($asm01.System.Int64)) ();
      };
      var $T0D = function () {
        return ($T0D = JSIL.Memoize($asm01.System.UInt64)) ();
      };
      var $T0E = function () {
        return ($T0E = JSIL.Memoize($asm01.System.Single)) ();
      };
      var $T0F = function () {
        return ($T0F = JSIL.Memoize($asm01.System.Double)) ();
      };
      var $T10 = function () {
        return ($T10 = JSIL.Memoize($asm01.System.Decimal)) ();
      };
      var $T11 = function () {
        return ($T11 = JSIL.Memoize($asm01.System.DateTime)) ();
      };
      var $T12 = function () {
        return ($T12 = JSIL.Memoize($asm01.System.String)) ();
      };
      var $T13 = function () {
        return ($T13 = JSIL.Memoize($asm01.System.Enum)) ();
      };
      var $T14 = function () {
        return ($T14 = JSIL.Memoize($asm01.System.TypeCode)) ();
      };
      var $T15 = function () {
        return ($T15 = JSIL.Memoize($asm01.System.Threading.Thread)) ();
      };
      var $T16 = function () {
        return ($T16 = JSIL.Memoize($asm01.System.IFormatProvider)) ();
      };
      var $T17 = function () {
        return ($T17 = JSIL.Memoize($asm01.System.IConvertible)) ();
      };
      var $T18 = function () {
        return ($T18 = JSIL.Memoize($asm01.System.InvalidCastException)) ();
      };
      var $T19 = function () {
        return ($T19 = JSIL.Memoize($asm01.System.Environment)) ();
      };
      var $T1A = function () {
        return ($T1A = JSIL.Memoize($asm01.System.ArgumentException)) ();
      };
      var $T1B = function () {
        return ($T1B = JSIL.Memoize($asm01.System.Type)) ();
      };
      var $T1C = function () {
        return ($T1C = JSIL.Memoize($asm01.System.ArgumentNullException)) ();
      };
      var $T1D = function () {
        return ($T1D = JSIL.Memoize($asm01.System.OutOfMemoryException)) ();
      };
      var $T1E = function () {
        return ($T1E = JSIL.Memoize(System.Array.Of($asm01.System.Byte))) ();
      };
      var $T1F = function () {
        return ($T1F = JSIL.Memoize(System.Array.Of($asm01.System.Char))) ();
      };
      var $T20 = function () {
        return ($T20 = JSIL.Memoize($asm01.System.Base64FormattingOptions)) ();
      };
      var $T21 = function () {
        return ($T21 = JSIL.Memoize($asm01.System.OverflowException)) ();
      };
      var $T22 = function () {
        return ($T22 = JSIL.Memoize($asm01.System.Globalization.CultureInfo)) ();
      };
      var $T23 = function () {
        return ($T23 = JSIL.Memoize($asm01.System.Globalization.NumberStyles)) ();
      };
      var $T24 = function () {
        return ($T24 = JSIL.Memoize($asm01.System.ParseNumbers)) ();
      };
      var $T25 = function () {
        return ($T25 = JSIL.Memoize($asm01.System.FormatException)) ();
      };
      var $T26 = function () {
        return ($T26 = JSIL.Memoize($asm01.System.Math)) ();
      };
      var $T27 = function () {
        return ($T27 = JSIL.Memoize($asm01.System.IFormattable)) ();
      };
      var $S00 = function () {
        return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Object"), [
            $asm01.TypeRef("System.Object"), $asm01.TypeRef("System.TypeCode"),
            $asm01.TypeRef("System.IFormatProvider")
          ]))) ();
      };
      var $S01 = function () {
        return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.InvalidCastException"), [$asm01.TypeRef("System.String")]))) ();
      };
      var $S02 = function () {
        return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentException"), [$asm01.TypeRef("System.String")]))) ();
      };
      var $S03 = function () {
        return ($S03 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Object"), [
            $asm01.TypeRef("System.Object"), $asm01.TypeRef("System.Type"),
            $asm01.TypeRef("System.IFormatProvider")
          ]))) ();
      };
      var $S04 = function () {
        return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentNullException"), [$asm01.TypeRef("System.String")]))) ();
      };
      var $S05 = function () {
        return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.OutOfMemoryException"), null))) ();
      };
      var $S06 = function () {
        return ($S06 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.OverflowException"), [$asm01.TypeRef("System.String")]))) ();
      };
      var $S07 = function () {
        return ($S07 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Byte"), [$asm01.TypeRef("System.Double")]))) ();
      };
      var $S08 = function () {
        return ($S08 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Byte"), [$asm01.TypeRef("System.Int32")]))) ();
      };
      var $S09 = function () {
        return ($S09 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Double")]))) ();
      };
      var $S0A = function () {
        return ($S0A = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [$asm01.TypeRef("System.Decimal"), $asm01.TypeRef("System.Int32")]))) ();
      };
      var $S0B = function () {
        return ($S0B = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Byte"), [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.IFormatProvider")]))) ();
      };
      var $S0C = function () {
        return ($S0C = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Byte"), [
            $asm01.TypeRef("System.String"), $asm01.TypeRef("System.Globalization.NumberStyles"),
            $asm01.TypeRef("System.IFormatProvider")
          ]))) ();
      };
      var $S0D = function () {
        return ($S0D = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Char"), [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.IFormatProvider")]))) ();
      };
      var $S0E = function () {
        return ($S0E = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.FormatException"), [$asm01.TypeRef("System.String")]))) ();
      };
      var $S0F = function () {
        return ($S0F = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.DateTime"), [$asm01.TypeRef("System.Int64")]))) ();
      };
      var $S10 = function () {
        return ($S10 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [$asm01.TypeRef("System.SByte")]))) ();
      };
      var $S11 = function () {
        return ($S11 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [$asm01.TypeRef("System.Byte")]))) ();
      };
      var $S12 = function () {
        return ($S12 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [$asm01.TypeRef("System.Int16")]))) ();
      };
      var $S13 = function () {
        return ($S13 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [$asm01.TypeRef("System.UInt16")]))) ();
      };
      var $S14 = function () {
        return ($S14 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [$asm01.TypeRef("System.Int32")]))) ();
      };
      var $S15 = function () {
        return ($S15 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [$asm01.TypeRef("System.UInt32")]))) ();
      };
      var $S16 = function () {
        return ($S16 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [$asm01.TypeRef("System.Int64")]))) ();
      };
      var $S17 = function () {
        return ($S17 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [$asm01.TypeRef("System.UInt64")]))) ();
      };
      var $S18 = function () {
        return ($S18 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [$asm01.TypeRef("System.Single")]))) ();
      };
      var $S19 = function () {
        return ($S19 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [$asm01.TypeRef("System.Double")]))) ();
      };
      var $S1A = function () {
        return ($S1A = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.IFormatProvider")]))) ();
      };
      var $S1B = function () {
        return ($S1B = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Double"), [$asm01.TypeRef("System.Decimal")]))) ();
      };
      var $S1C = function () {
        return ($S1C = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Double"), [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.IFormatProvider")]))) ();
      };
      var $S1D = function () {
        return ($S1D = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Double"), [
            $asm01.TypeRef("System.String"), $asm01.TypeRef("System.Globalization.NumberStyles"),
            $asm01.TypeRef("System.IFormatProvider")
          ]))) ();
      };
      var $S1E = function () {
        return ($S1E = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Int16"), [$asm01.TypeRef("System.Double")]))) ();
      };
      var $S1F = function () {
        return ($S1F = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Int16"), [$asm01.TypeRef("System.Int32")]))) ();
      };
      var $S20 = function () {
        return ($S20 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Int16"), [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.IFormatProvider")]))) ();
      };
      var $S21 = function () {
        return ($S21 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Int16"), [
            $asm01.TypeRef("System.String"), $asm01.TypeRef("System.Globalization.NumberStyles"),
            $asm01.TypeRef("System.IFormatProvider")
          ]))) ();
      };
      var $S22 = function () {
        return ($S22 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.IFormatProvider")]))) ();
      };
      var $S23 = function () {
        return ($S23 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Int64"), [$asm01.TypeRef("System.Double")]))) ();
      };
      var $S24 = function () {
        return ($S24 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Int64"), [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.IFormatProvider")]))) ();
      };
      var $S25 = function () {
        return ($S25 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.SByte"), [$asm01.TypeRef("System.Double")]))) ();
      };
      var $S26 = function () {
        return ($S26 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.SByte"), [$asm01.TypeRef("System.Int32")]))) ();
      };
      var $S27 = function () {
        return ($S27 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.SByte"), [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.IFormatProvider")]))) ();
      };
      var $S28 = function () {
        return ($S28 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.SByte"), [
            $asm01.TypeRef("System.String"), $asm01.TypeRef("System.Globalization.NumberStyles"),
            $asm01.TypeRef("System.IFormatProvider")
          ]))) ();
      };
      var $S29 = function () {
        return ($S29 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Single"), [$asm01.TypeRef("System.Decimal")]))) ();
      };
      var $S2A = function () {
        return ($S2A = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Single"), [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.IFormatProvider")]))) ();
      };
      var $S2B = function () {
        return ($S2B = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Single"), [
            $asm01.TypeRef("System.String"), $asm01.TypeRef("System.Globalization.NumberStyles"),
            $asm01.TypeRef("System.IFormatProvider")
          ]))) ();
      };
      var $S2C = function () {
        return ($S2C = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.String"), [$asm01.TypeRef("System.Object"), $asm01.TypeRef("System.IFormatProvider")]))) ();
      };
      var $S2D = function () {
        return ($S2D = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.String"), [$asm01.TypeRef("System.Char")]))) ();
      };
      var $S2E = function () {
        return ($S2E = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.String"), [$asm01.TypeRef("System.IFormatProvider")]))) ();
      };
      var $S2F = function () {
        return ($S2F = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.String"), [$asm01.TypeRef("System.IFormatProvider")]))) ();
      };
      var $S30 = function () {
        return ($S30 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.UInt16"), [$asm01.TypeRef("System.Double")]))) ();
      };
      var $S31 = function () {
        return ($S31 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.UInt16"), [$asm01.TypeRef("System.Int32")]))) ();
      };
      var $S32 = function () {
        return ($S32 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.UInt16"), [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.IFormatProvider")]))) ();
      };
      var $S33 = function () {
        return ($S33 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.UInt16"), [
            $asm01.TypeRef("System.String"), $asm01.TypeRef("System.Globalization.NumberStyles"),
            $asm01.TypeRef("System.IFormatProvider")
          ]))) ();
      };
      var $S34 = function () {
        return ($S34 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.UInt32"), [$asm01.TypeRef("System.Double")]))) ();
      };
      var $S35 = function () {
        return ($S35 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.UInt32"), [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.IFormatProvider")]))) ();
      };
      var $S36 = function () {
        return ($S36 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.UInt64"), [$asm01.TypeRef("System.Double")]))) ();
      };
      var $S37 = function () {
        return ($S37 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.UInt64"), [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.IFormatProvider")]))) ();
      };
      var $IM00 = function () {
        return ($IM00 = JSIL.Memoize($asm01.System.IConvertible.ToBoolean)) ();
      };
      var $IM01 = function () {
        return ($IM01 = JSIL.Memoize($asm01.System.IConvertible.ToChar)) ();
      };
      var $IM02 = function () {
        return ($IM02 = JSIL.Memoize($asm01.System.IConvertible.ToSByte)) ();
      };
      var $IM03 = function () {
        return ($IM03 = JSIL.Memoize($asm01.System.IConvertible.ToByte)) ();
      };
      var $IM04 = function () {
        return ($IM04 = JSIL.Memoize($asm01.System.IConvertible.ToInt16)) ();
      };
      var $IM05 = function () {
        return ($IM05 = JSIL.Memoize($asm01.System.IConvertible.ToUInt16)) ();
      };
      var $IM06 = function () {
        return ($IM06 = JSIL.Memoize($asm01.System.IConvertible.ToInt32)) ();
      };
      var $IM07 = function () {
        return ($IM07 = JSIL.Memoize($asm01.System.IConvertible.ToUInt32)) ();
      };
      var $IM08 = function () {
        return ($IM08 = JSIL.Memoize($asm01.System.IConvertible.ToInt64)) ();
      };
      var $IM09 = function () {
        return ($IM09 = JSIL.Memoize($asm01.System.IConvertible.ToUInt64)) ();
      };
      var $IM0A = function () {
        return ($IM0A = JSIL.Memoize($asm01.System.IConvertible.ToSingle)) ();
      };
      var $IM0B = function () {
        return ($IM0B = JSIL.Memoize($asm01.System.IConvertible.ToDouble)) ();
      };
      var $IM0C = function () {
        return ($IM0C = JSIL.Memoize($asm01.System.IConvertible.ToDecimal)) ();
      };
      var $IM0D = function () {
        return ($IM0D = JSIL.Memoize($asm01.System.IConvertible.ToDateTime)) ();
      };
      var $IM0E = function () {
        return ($IM0E = JSIL.Memoize($asm01.System.IConvertible.ToString)) ();
      };
      var $IM0F = function () {
        return ($IM0F = JSIL.Memoize($asm01.System.IConvertible.ToType)) ();
      };
      var $IM10 = function () {
        return ($IM10 = JSIL.Memoize($asm01.System.IConvertible.GetTypeCode)) ();
      };
      var $IM11 = function () {
        return ($IM11 = JSIL.Memoize($asm01.System.IFormattable.ToString)) ();
      };


      function Convert_ChangeType$00 (value, typeCode) {
        return $S00().CallStatic($thisType, "ChangeType", null, value, typeCode, $T15().get_CurrentThread().get_CurrentCulture());
      };

      function Convert_ChangeType$01 (value, typeCode, provider) {
        if (!((value !== null) || (((typeCode.valueOf() | 0) !== 0) &&
              (typeCode !== $T14().String) &&
              (typeCode !== $T14().Object)))) {
          return null;
        }
        var convertible = $T17().$As(value);
        if (convertible === null) {
          throw $S01().Construct($T19().GetResourceString("InvalidCast_IConvertible"));
        }
        switch (typeCode.valueOf()) {
          case 0:
            throw $S01().Construct($T19().GetResourceString("InvalidCast_Empty"));

          case 1:
            return value;

          case 2:
            throw $S01().Construct($T19().GetResourceString("InvalidCast_DBNull"));

          case 3:
            return $T04().$Box($IM00().Call(convertible, null, provider));

          case 4:
            return $T05().$Box($IM01().Call(convertible, null, provider));

          case 5:
            return $T06().$Box($IM02().Call(convertible, null, provider));

          case 6:
            return $T07().$Box($IM03().Call(convertible, null, provider));

          case 7:
            return $T08().$Box($IM04().Call(convertible, null, provider));

          case 8:
            return $T09().$Box($IM05().Call(convertible, null, provider));

          case 9:
            return $T0A().$Box($IM06().Call(convertible, null, provider));

          case 10:
            return $T0B().$Box($IM07().Call(convertible, null, provider));

          case 11:
            return $IM08().Call(convertible, null, provider);

          case 12:
            return $IM09().Call(convertible, null, provider);

          case 13:
            return $T0E().$Box($IM0A().Call(convertible, null, provider));

          case 14:
            return $T0F().$Box($IM0B().Call(convertible, null, provider));

          case 15:
            return $IM0C().Call(convertible, null, provider);

          case 16:
            return $IM0D().Call(convertible, null, provider);

          case 18:
            return $IM0E().Call(convertible, null, provider);

        }
        throw $S02().Construct($T19().GetResourceString("Arg_UnknownTypeCode"));
      };

      function Convert_ChangeType$02 (value, conversionType) {
        return $S03().CallStatic($thisType, "ChangeType", null, value, conversionType, $T15().get_CurrentThread().get_CurrentCulture());
      };

      function Convert_ChangeType$03 (value, conversionType, provider) {
        if ($T1B().op_Equality(conversionType, null)) {
          throw $S04().Construct("conversionType");
        }
        if (value === null) {
          if (conversionType.get_IsValueType()) {
            throw $S01().Construct($T19().GetResourceString("InvalidCast_CannotCastNullToValueType"));
          }
          return null;
        } else {
          var convertible = $T17().$As(value);
          if (convertible === null) {
            if ($T1B().op_Equality(JSIL.GetType(value), conversionType)) {
              return value;
            }
            throw $S01().Construct($T19().GetResourceString("InvalidCast_IConvertible"));
          } else {
            var left = $T00().$As(conversionType);
            if ($T00().op_Equality(left, $thisType.ConvertTypes[3])) {
              return $T04().$Box($IM00().Call(convertible, null, provider));
            }
            if ($T00().op_Equality(left, $thisType.ConvertTypes[4])) {
              return $T05().$Box($IM01().Call(convertible, null, provider));
            }
            if ($T00().op_Equality(left, $thisType.ConvertTypes[5])) {
              return $T06().$Box($IM02().Call(convertible, null, provider));
            }
            if ($T00().op_Equality(left, $thisType.ConvertTypes[6])) {
              return $T07().$Box($IM03().Call(convertible, null, provider));
            }
            if ($T00().op_Equality(left, $thisType.ConvertTypes[7])) {
              return $T08().$Box($IM04().Call(convertible, null, provider));
            }
            if ($T00().op_Equality(left, $thisType.ConvertTypes[8])) {
              return $T09().$Box($IM05().Call(convertible, null, provider));
            }
            if ($T00().op_Equality(left, $thisType.ConvertTypes[9])) {
              return $T0A().$Box($IM06().Call(convertible, null, provider));
            }
            if ($T00().op_Equality(left, $thisType.ConvertTypes[10])) {
              return $T0B().$Box($IM07().Call(convertible, null, provider));
            }
            if ($T00().op_Equality(left, $thisType.ConvertTypes[11])) {
              return $IM08().Call(convertible, null, provider);
            }
            if ($T00().op_Equality(left, $thisType.ConvertTypes[12])) {
              return $IM09().Call(convertible, null, provider);
            }
            if ($T00().op_Equality(left, $thisType.ConvertTypes[13])) {
              return $T0E().$Box($IM0A().Call(convertible, null, provider));
            }
            if ($T00().op_Equality(left, $thisType.ConvertTypes[14])) {
              return $T0F().$Box($IM0B().Call(convertible, null, provider));
            }
            if ($T00().op_Equality(left, $thisType.ConvertTypes[15])) {
              return $IM0C().Call(convertible, null, provider);
            }
            if ($T00().op_Equality(left, $thisType.ConvertTypes[16])) {
              return $IM0D().Call(convertible, null, provider);
            }
            if ($T00().op_Equality(left, $thisType.ConvertTypes[18])) {
              return $IM0E().Call(convertible, null, provider);
            }
            if ($T00().op_Equality(left, $thisType.ConvertTypes[1])) {
              return value;
            }
            return $IM0F().Call(convertible, null, conversionType, provider);
          }
        }
      };


      function Convert_DefaultToType (value, targetType, provider) {
        if ($T1B().op_Equality(targetType, null)) {
          throw $S04().Construct("targetType");
        }
        var left = $T00().$As(targetType);
        if ($T00().op_Inequality(left, null)) {
          if ($T1B().op_Equality(JSIL.GetType(value), targetType)) {
            return value;
          }
          if ($T00().op_Equality(left, $thisType.ConvertTypes[3])) {
            return $T04().$Box($IM00().Call(value, null, provider));
          }
          if ($T00().op_Equality(left, $thisType.ConvertTypes[4])) {
            return $T05().$Box($IM01().Call(value, null, provider));
          }
          if ($T00().op_Equality(left, $thisType.ConvertTypes[5])) {
            return $T06().$Box($IM02().Call(value, null, provider));
          }
          if ($T00().op_Equality(left, $thisType.ConvertTypes[6])) {
            return $T07().$Box($IM03().Call(value, null, provider));
          }
          if ($T00().op_Equality(left, $thisType.ConvertTypes[7])) {
            return $T08().$Box($IM04().Call(value, null, provider));
          }
          if ($T00().op_Equality(left, $thisType.ConvertTypes[8])) {
            return $T09().$Box($IM05().Call(value, null, provider));
          }
          if ($T00().op_Equality(left, $thisType.ConvertTypes[9])) {
            return $T0A().$Box($IM06().Call(value, null, provider));
          }
          if ($T00().op_Equality(left, $thisType.ConvertTypes[10])) {
            return $T0B().$Box($IM07().Call(value, null, provider));
          }
          if ($T00().op_Equality(left, $thisType.ConvertTypes[11])) {
            return $IM08().Call(value, null, provider);
          }
          if ($T00().op_Equality(left, $thisType.ConvertTypes[12])) {
            return $IM09().Call(value, null, provider);
          }
          if ($T00().op_Equality(left, $thisType.ConvertTypes[13])) {
            return $T0E().$Box($IM0A().Call(value, null, provider));
          }
          if ($T00().op_Equality(left, $thisType.ConvertTypes[14])) {
            return $T0F().$Box($IM0B().Call(value, null, provider));
          }
          if ($T00().op_Equality(left, $thisType.ConvertTypes[15])) {
            return $IM0C().Call(value, null, provider);
          }
          if ($T00().op_Equality(left, $thisType.ConvertTypes[16])) {
            return $IM0D().Call(value, null, provider);
          }
          if ($T00().op_Equality(left, $thisType.ConvertTypes[18])) {
            return $IM0E().Call(value, null, provider);
          }
          if ($T00().op_Equality(left, $thisType.ConvertTypes[1])) {
            return value;
          }
          if ($T00().op_Equality(left, $thisType.EnumType)) {
            return $T13().$Cast(value);
          }
          if ($T00().op_Equality(left, $thisType.ConvertTypes[2])) {
            throw $S01().Construct($T19().GetResourceString("InvalidCast_DBNull"));
          }
          if ($T00().op_Equality(left, $thisType.ConvertTypes[0])) {
            throw $S01().Construct($T19().GetResourceString("InvalidCast_Empty"));
          }
        }
        throw $S01().Construct($T19().GetResourceString("InvalidCast_FromTo", JSIL.Array.New($T02(), [(JSIL.GetType(value)).get_FullName(), targetType.get_FullName()])));
      };






      function Convert_GetTypeCode (value) {
        if (value === null) {
          return $T14().Empty;
        }
        var convertible = $T17().$As(value);
        if (convertible !== null) {
          return $IM10().Call(convertible, null);
        }
        return $T14().Object;
      };

      function Convert_IsDBNull (value) {
        if (value === $T03().Value) {
          return true;
        }
        var convertible = $T17().$As(value);
        return ((convertible !== null) && ($IM10().Call(convertible, null) === $T14().DBNull));
      };

      function Convert_ToBase64_CalculateAndValidateOutputLength (inputLength, insertLineBreaks) {
        var num = $T0C().op_Multiplication(
          $T0C().op_Division(
            $T0C().FromNumber(inputLength),
            $T0C().Create(3, 0, 0)
          ),
          $T0C().Create(4, 0, 0)
        );
        num = $T0C().op_Addition(num, (
            ((((inputLength | 0) % 3) | 0) !== 0)
               ? 4
               : 0)
        );
        if (!$T0C().op_Inequality(num, $T0C().Create(0, 0, 0))) {
          return 0;
        }
        if (insertLineBreaks) {
          var num2 = $T0C().op_Division(num, $T0C().Create(76, 0, 0));
          if (!$T0C().op_Inequality(
              $T0C().op_Modulus(num, $T0C().Create(76, 0, 0)),
              $T0C().Create(0, 0, 0)
            )) {
            num2 = $T0C().op_Subtraction(num2, $T0C().Create(1, 0, 0));
          }
          num = $T0C().op_Addition(num, $T0C().op_Multiplication(num2, $T0C().Create(2, 0, 0)));
        }
        if (!$T0C().op_LessThanOrEqual(num, $T0C().Create(16777215, 127, 0))) {
          throw $S05().Construct();
        }
        return num.ToNumber(4294967295, true);
      };

      function Convert_ToBase64CharArray$04 (inArray, offsetIn, length, outArray, offsetOut) {
        return $thisType.ToBase64CharArray(
          inArray,
          offsetIn,
          length,
          outArray,
          offsetOut,
          $T20().None
        );
      };






      function Convert_ToBoolean$05 (value) {
        return ((value !== null) && $IM00().Call($T17().$Cast(value), null, null));
      };

      function Convert_ToBoolean$06 (value, provider) {
        return ((value !== null) && $IM00().Call($T17().$Cast(value), null, provider));
      };

      function Convert_ToBoolean$07 (value) {
        return value;
      };

      function Convert_ToBoolean$08 (value) {
        return ((value | 0) > 0);
      };

      function Convert_ToBoolean$09 (value) {
        return $IM00().Call($T05().$Box(value), null, null);
      };

      function Convert_ToBoolean$0A (value) {
        return ((value | 0) > 0);
      };

      function Convert_ToBoolean$0B (value) {
        return ((value | 0) > 0);
      };

      function Convert_ToBoolean$0C (value) {
        return ((value | 0) > 0);
      };

      function Convert_ToBoolean$0D (value) {
        return ((value | 0) > 0);
      };

      function Convert_ToBoolean$0E (value) {
        return ((value >>> 0) > 0);
      };

      function Convert_ToBoolean$0F (value) {
        return $T0C().op_GreaterThan(value, $T0C().Create(0, 0, 0));
      };

      function Convert_ToBoolean$10 (value) {
        return $T0D().op_GreaterThan(value, $T0D().Create(0, 0, 0));
      };

      function Convert_ToBoolean$11 (value) {
        return ((value !== null) && $T04().Parse(value));
      };

      function Convert_ToBoolean$12 (value, provider) {
        return ((value !== null) && $T04().Parse(value));
      };

      function Convert_ToBoolean$13 (value) {
        return (+value !== 0);
      };

      function Convert_ToBoolean$14 (value) {
        return (+value !== 0);
      };

      function Convert_ToBoolean$15 (value) {
        return $T10().op_Inequality(value, $T10().Zero);
      };

      function Convert_ToBoolean$16 (value) {
        return $IM00().Call(value, null, null);
      };

      function Convert_ToByte$17 (value) {
        if (value !== null) {
          return $IM03().Call($T17().$Cast(value), null, null);
        }
        return 0;
      };

      function Convert_ToByte$18 (value, provider) {
        if (value !== null) {
          return $IM03().Call($T17().$Cast(value), null, provider);
        }
        return 0;
      };

      function Convert_ToByte$19 (value) {
        if (!value) {
          return 0;
        }
        return 1;
      };

      function Convert_ToByte$1A (value) {
        return value;
      };

      function Convert_ToByte$1B (value) {
        if ((value.charCodeAt(0) | 0) > (("\xff").charCodeAt(0) | 0)) {
          throw $S06().Construct($T19().GetResourceString("Overflow_Byte"));
        }
        return value.charCodeAt(0);
      };

      function Convert_ToByte$1C (value) {
        if ((value | 0) < 0) {
          throw $S06().Construct($T19().GetResourceString("Overflow_Byte"));
        }
        return (value & 0xFF);
      };

      function Convert_ToByte$1D (value) {
        if (!(((value | 0) >= 0) && ((value | 0) <= 255))) {
          throw $S06().Construct($T19().GetResourceString("Overflow_Byte"));
        }
        return (value & 0xFF);
      };

      function Convert_ToByte$1E (value) {
        if ((value | 0) > 255) {
          throw $S06().Construct($T19().GetResourceString("Overflow_Byte"));
        }
        return (value & 0xFF);
      };

      function Convert_ToByte$1F (value) {
        if (!(((value | 0) >= 0) && ((value | 0) <= 255))) {
          throw $S06().Construct($T19().GetResourceString("Overflow_Byte"));
        }
        return (value & 0xFF);
      };

      function Convert_ToByte$20 (value) {
        if ((value >>> 0) > 255) {
          throw $S06().Construct($T19().GetResourceString("Overflow_Byte"));
        }
        return (value & 0xFF);
      };

      function Convert_ToByte$21 (value) {
        if (!($T0C().op_GreaterThanOrEqual(value, $T0C().Create(0, 0, 0)) && $T0C().op_LessThanOrEqual(value, $T0C().Create(255, 0, 0)))) {
          throw $S06().Construct($T19().GetResourceString("Overflow_Byte"));
        }
        return value.ToNumber(255, false);
      };

      function Convert_ToByte$22 (value) {
        if (!$T0D().op_LessThanOrEqual(value, $T0D().Create(255, 0, 0))) {
          throw $S06().Construct($T19().GetResourceString("Overflow_Byte"));
        }
        return value.ToNumber(255, false);
      };

      function Convert_ToByte$23 (value) {
        return $S07().CallStatic($thisType, "ToByte", null, value);
      };

      function Convert_ToByte$24 (value) {
        return $S08().CallStatic($thisType, "ToByte", null, $S09().CallStatic($thisType, "ToInt32", null, value));
      };

      function Convert_ToByte$25 (value) {
        return $T10().ToByte($S0A().CallStatic($T10(), "Round", null, value, 0));
      };

      function Convert_ToByte$26 (value) {
        if (value === null) {
          return 0;
        }
        return $S0B().CallStatic($T07(), "Parse", null, value, $T22().get_CurrentCulture());
      };

      function Convert_ToByte$27 (value, provider) {
        if (value === null) {
          return 0;
        }
        return $S0C().CallStatic($T07(), "Parse", null, value, $T23().Integer, provider);
      };

      function Convert_ToByte$28 (value) {
        return $IM03().Call(value, null, null);
      };

      function Convert_ToByte$29 (value, fromBase) {
        if (!(((fromBase | 0) === 2) ||
            ((fromBase | 0) === 8) ||
            ((fromBase | 0) === 10) || ((fromBase | 0) === 16))) {
          throw $S02().Construct($T19().GetResourceString("Arg_InvalidBase"));
        }
        var num = ($T24().StringToInt(value, fromBase, 4608) | 0);
        if (!((num >= 0) && (num <= 255))) {
          throw $S06().Construct($T19().GetResourceString("Overflow_Byte"));
        }
        return (num & 0xFF);
      };

      function Convert_ToChar$2A (value) {
        if (value !== null) {
          return $IM01().Call($T17().$Cast(value), null, null);
        }
        return "\x00";
      };

      function Convert_ToChar$2B (value, provider) {
        if (value !== null) {
          return $IM01().Call($T17().$Cast(value), null, provider);
        }
        return "\x00";
      };

      function Convert_ToChar$2C (value) {
        return $IM01().Call($T04().$Box(value), null, null);
      };

      function Convert_ToChar$2D (value) {
        return value;
      };

      function Convert_ToChar$2E (value) {
        if ((value | 0) < 0) {
          throw $S06().Construct($T19().GetResourceString("Overflow_Char"));
        }
        return String.fromCharCode(value);
      };

      function Convert_ToChar$2F (value) {
        return String.fromCharCode(value);
      };

      function Convert_ToChar$30 (value) {
        if ((value | 0) < 0) {
          throw $S06().Construct($T19().GetResourceString("Overflow_Char"));
        }
        return String.fromCharCode(value);
      };

      function Convert_ToChar$31 (value) {
        return String.fromCharCode(value);
      };

      function Convert_ToChar$32 (value) {
        if (!(((value | 0) >= 0) && ((value | 0) <= 65535))) {
          throw $S06().Construct($T19().GetResourceString("Overflow_Char"));
        }
        return String.fromCharCode(value);
      };

      function Convert_ToChar$33 (value) {
        if ((value >>> 0) > 65535) {
          throw $S06().Construct($T19().GetResourceString("Overflow_Char"));
        }
        return String.fromCharCode(value);
      };

      function Convert_ToChar$34 (value) {
        if (!($T0C().op_GreaterThanOrEqual(value, $T0C().Create(0, 0, 0)) && $T0C().op_LessThanOrEqual(value, $T0C().Create(65535, 0, 0)))) {
          throw $S06().Construct($T19().GetResourceString("Overflow_Char"));
        }
        return String.fromCharCode(value);
      };

      function Convert_ToChar$35 (value) {
        if (!$T0D().op_LessThanOrEqual(value, $T0D().Create(65535, 0, 0))) {
          throw $S06().Construct($T19().GetResourceString("Overflow_Char"));
        }
        return String.fromCharCode(value);
      };

      function Convert_ToChar$36 (value) {
        return $S0D().CallStatic($thisType, "ToChar", null, value, null);
      };

      function Convert_ToChar$37 (value, provider) {
        if (value === null) {
          throw $S04().Construct("value");
        }
        if ((value.length | 0) !== 1) {
          throw $S0E().Construct($T19().GetResourceString("Format_NeedSingleChar"));
        }
        return value[0];
      };

      function Convert_ToChar$38 (value) {
        return $IM01().Call($T0E().$Box(value), null, null);
      };

      function Convert_ToChar$39 (value) {
        return $IM01().Call($T0F().$Box(value), null, null);
      };

      function Convert_ToChar$3A (value) {
        return $IM01().Call(value, null, null);
      };

      function Convert_ToChar$3B (value) {
        return $IM01().Call(value, null, null);
      };

      function Convert_ToDateTime$3C (value) {
        return value;
      };

      function Convert_ToDateTime$3D (value) {
        if (value !== null) {
          return $IM0D().Call($T17().$Cast(value), null, null);
        }
        return $T11().MinValue;
      };

      function Convert_ToDateTime$3E (value, provider) {
        if (value !== null) {
          return $IM0D().Call($T17().$Cast(value), null, provider);
        }
        return $T11().MinValue;
      };

      function Convert_ToDateTime$3F (value) {
        if (value === null) {
          return $S0F().Construct($T0C().Create(0, 0, 0));
        }
        return $T11().Parse(value, $T22().get_CurrentCulture());
      };

      function Convert_ToDateTime$40 (value, provider) {
        if (value === null) {
          return $S0F().Construct($T0C().Create(0, 0, 0));
        }
        return $T11().Parse(value, provider);
      };

      function Convert_ToDateTime$41 (value) {
        return $IM0D().Call($T06().$Box(value), null, null);
      };

      function Convert_ToDateTime$42 (value) {
        return $IM0D().Call($T07().$Box(value), null, null);
      };

      function Convert_ToDateTime$43 (value) {
        return $IM0D().Call($T08().$Box(value), null, null);
      };

      function Convert_ToDateTime$44 (value) {
        return $IM0D().Call($T09().$Box(value), null, null);
      };

      function Convert_ToDateTime$45 (value) {
        return $IM0D().Call($T0A().$Box(value), null, null);
      };

      function Convert_ToDateTime$46 (value) {
        return $IM0D().Call($T0B().$Box(value), null, null);
      };

      function Convert_ToDateTime$47 (value) {
        return $IM0D().Call(value, null, null);
      };

      function Convert_ToDateTime$48 (value) {
        return $IM0D().Call(value, null, null);
      };

      function Convert_ToDateTime$49 (value) {
        return $IM0D().Call($T04().$Box(value), null, null);
      };

      function Convert_ToDateTime$4A (value) {
        return $IM0D().Call($T05().$Box(value), null, null);
      };

      function Convert_ToDateTime$4B (value) {
        return $IM0D().Call($T0E().$Box(value), null, null);
      };

      function Convert_ToDateTime$4C (value) {
        return $IM0D().Call($T0F().$Box(value), null, null);
      };

      function Convert_ToDateTime$4D (value) {
        return $IM0D().Call(value, null, null);
      };

      function Convert_ToDecimal$4E (value) {
        if (value !== null) {
          return $IM0C().Call($T17().$Cast(value), null, null);
        }
        return $T10().Zero;
      };

      function Convert_ToDecimal$4F (value, provider) {
        if (value !== null) {
          return $IM0C().Call($T17().$Cast(value), null, provider);
        }
        return $T10().Zero;
      };

      function Convert_ToDecimal$50 (value) {
        return $S10().CallStatic($T10(), "op_Implicit", null, value);
      };

      function Convert_ToDecimal$51 (value) {
        return $S11().CallStatic($T10(), "op_Implicit", null, value);
      };

      function Convert_ToDecimal$52 (value) {
        return $IM0C().Call($T05().$Box(value), null, null);
      };

      function Convert_ToDecimal$53 (value) {
        return $S12().CallStatic($T10(), "op_Implicit", null, value);
      };

      function Convert_ToDecimal$54 (value) {
        return $S13().CallStatic($T10(), "op_Implicit", null, value);
      };

      function Convert_ToDecimal$55 (value) {
        return $S14().CallStatic($T10(), "op_Implicit", null, value);
      };

      function Convert_ToDecimal$56 (value) {
        return $S15().CallStatic($T10(), "op_Implicit", null, value);
      };

      function Convert_ToDecimal$57 (value) {
        return $S16().CallStatic($T10(), "op_Implicit", null, value);
      };

      function Convert_ToDecimal$58 (value) {
        return $S17().CallStatic($T10(), "op_Implicit", null, value);
      };

      function Convert_ToDecimal$59 (value) {
        return $S18().CallStatic($T10(), "op_Explicit", null, value);
      };

      function Convert_ToDecimal$5A (value) {
        return $S19().CallStatic($T10(), "op_Explicit", null, value);
      };

      function Convert_ToDecimal$5B (value) {
        if (value === null) {
          return $T10().Zero;
        }
        return $S1A().CallStatic($T10(), "Parse", null, value, $T22().get_CurrentCulture());
      };

      function Convert_ToDecimal$5C (value, provider) {
        if (value === null) {
          return $T10().Zero;
        }
        return $T10().Parse(value, $T23().Number, provider);
      };

      function Convert_ToDecimal$5D (value) {
        return value;
      };

      function Convert_ToDecimal$5E (value) {
        return $S14().CallStatic($T10(), "op_Implicit", null, (
            value
               ? 1
               : 0)
        );
      };

      function Convert_ToDecimal$5F (value) {
        return $IM0C().Call(value, null, null);
      };

      function Convert_ToDouble$60 (value) {
        if (value !== null) {
          return $IM0B().Call($T17().$Cast(value), null, null);
        }
        return 0;
      };

      function Convert_ToDouble$61 (value, provider) {
        if (value !== null) {
          return $IM0B().Call($T17().$Cast(value), null, provider);
        }
        return 0;
      };

      function Convert_ToDouble$62 (value) {
        return +value;
      };

      function Convert_ToDouble$63 (value) {
        return +value;
      };

      function Convert_ToDouble$64 (value) {
        return +value;
      };

      function Convert_ToDouble$65 (value) {
        return $IM0B().Call($T05().$Box(value), null, null);
      };

      function Convert_ToDouble$66 (value) {
        return +value;
      };

      function Convert_ToDouble$67 (value) {
        return +value;
      };

      function Convert_ToDouble$68 (value) {
        return +value;
      };

      function Convert_ToDouble$69 (value) {
        return value.ToNumber(-1, false);
      };

      function Convert_ToDouble$6A (value) {
        return value.ToNumber(-1, false);
      };

      function Convert_ToDouble$6B (value) {
        return value;
      };

      function Convert_ToDouble$6C (value) {
        return value;
      };

      function Convert_ToDouble$6D (value) {
        return $S1B().CallStatic($T10(), "op_Explicit", null, value);
      };

      function Convert_ToDouble$6E (value) {
        if (value === null) {
          return 0;
        }
        return $S1C().CallStatic($T0F(), "Parse", null, value, $T22().get_CurrentCulture());
      };

      function Convert_ToDouble$6F (value, provider) {
        if (value === null) {
          return 0;
        }
        return $S1D().CallStatic($T0F(), "Parse", null, value, $T23().$Flags("AllowThousands", "Float"), provider);
      };

      function Convert_ToDouble$70 (value) {
        return +((
            value
               ? 1
               : 0)
        );
      };

      function Convert_ToDouble$71 (value) {
        return $IM0B().Call(value, null, null);
      };

      function Convert_ToInt16$72 (value) {
        if (value !== null) {
          return $IM04().Call($T17().$Cast(value), null, null);
        }
        return 0;
      };

      function Convert_ToInt16$73 (value, provider) {
        if (value !== null) {
          return $IM04().Call($T17().$Cast(value), null, provider);
        }
        return 0;
      };

      function Convert_ToInt16$74 (value) {
        if (!value) {
          return 0;
        }
        return 1;
      };

      function Convert_ToInt16$75 (value) {
        if ((value.charCodeAt(0) | 0) > (("\u7fff").charCodeAt(0) | 0)) {
          throw $S06().Construct($T19().GetResourceString("Overflow_Int16"));
        }
        return value.charCodeAt(0);
      };

      function Convert_ToInt16$76 (value) {
        return value;
      };

      function Convert_ToInt16$77 (value) {
        return value;
      };

      function Convert_ToInt16$78 (value) {
        if ((value | 0) > 32767) {
          throw $S06().Construct($T19().GetResourceString("Overflow_Int16"));
        }
        return ((value + 0x8000 & 0xFFFF) - 0x8000);
      };

      function Convert_ToInt16$79 (value) {
        if (!(((value | 0) >= -32768) && ((value | 0) <= 32767))) {
          throw $S06().Construct($T19().GetResourceString("Overflow_Int16"));
        }
        return ((value + 0x8000 & 0xFFFF) - 0x8000);
      };

      function Convert_ToInt16$7A (value) {
        if (!$T0D().op_LessThanOrEqual(
            $T0D().FromNumber(value),
            $T0D().Create(32767, 0, 0)
          )) {
          throw $S06().Construct($T19().GetResourceString("Overflow_Int16"));
        }
        return ((value + 0x8000 & 0xFFFF) - 0x8000);
      };

      function Convert_ToInt16$7B (value) {
        return value;
      };

      function Convert_ToInt16$7C (value) {
        if (!($T0C().op_GreaterThanOrEqual(value, $T0C().Create(16744448, 16777215, 65535)) && $T0C().op_LessThanOrEqual(value, $T0C().Create(32767, 0, 0)))) {
          throw $S06().Construct($T19().GetResourceString("Overflow_Int16"));
        }
        return value.ToNumber(65535, true);
      };

      function Convert_ToInt16$7D (value) {
        if (!$T0D().op_LessThanOrEqual(value, $T0D().Create(32767, 0, 0))) {
          throw $S06().Construct($T19().GetResourceString("Overflow_Int16"));
        }
        return value.ToNumber(65535, true);
      };

      function Convert_ToInt16$7E (value) {
        return $S1E().CallStatic($thisType, "ToInt16", null, value);
      };

      function Convert_ToInt16$7F (value) {
        return $S1F().CallStatic($thisType, "ToInt16", null, $S09().CallStatic($thisType, "ToInt32", null, value));
      };

      function Convert_ToInt16$80 (value) {
        return $T10().ToInt16($S0A().CallStatic($T10(), "Round", null, value, 0));
      };

      function Convert_ToInt16$81 (value) {
        if (value === null) {
          return 0;
        }
        return $S20().CallStatic($T08(), "Parse", null, value, $T22().get_CurrentCulture());
      };

      function Convert_ToInt16$82 (value, provider) {
        if (value === null) {
          return 0;
        }
        return $S21().CallStatic($T08(), "Parse", null, value, $T23().Integer, provider);
      };

      function Convert_ToInt16$83 (value) {
        return $IM04().Call(value, null, null);
      };

      function Convert_ToInt16$84 (value, fromBase) {
        if (!(((fromBase | 0) === 2) ||
            ((fromBase | 0) === 8) ||
            ((fromBase | 0) === 10) || ((fromBase | 0) === 16))) {
          throw $S02().Construct($T19().GetResourceString("Arg_InvalidBase"));
        }
        var num = ($T24().StringToInt(value, fromBase, 6144) | 0);
        if (!(((fromBase | 0) === 10) || (num > 65535))) {
          return ((num + 0x8000 & 0xFFFF) - 0x8000);
        }
        if (!((num >= -32768) && (num <= 32767))) {
          throw $S06().Construct($T19().GetResourceString("Overflow_Int16"));
        }
        return ((num + 0x8000 & 0xFFFF) - 0x8000);
      };

      function Convert_ToInt32$85 (value) {
        if (value !== null) {
          return $IM06().Call($T17().$Cast(value), null, null);
        }
        return 0;
      };

      function Convert_ToInt32$86 (value, provider) {
        if (value !== null) {
          return $IM06().Call($T17().$Cast(value), null, provider);
        }
        return 0;
      };

      function Convert_ToInt32$87 (value) {
        if (!value) {
          return 0;
        }
        return 1;
      };

      function Convert_ToInt32$88 (value) {
        return value.charCodeAt(0);
      };

      function Convert_ToInt32$89 (value) {
        return value;
      };

      function Convert_ToInt32$8A (value) {
        return value;
      };

      function Convert_ToInt32$8B (value) {
        return value;
      };

      function Convert_ToInt32$8C (value) {
        return value;
      };

      function Convert_ToInt32$8D (value) {
        if ((value >>> 0) > 2147483647) {
          throw $S06().Construct($T19().GetResourceString("Overflow_Int32"));
        }
        return (value | 0);
      };

      function Convert_ToInt32$8E (value) {
        return value;
      };

      function Convert_ToInt32$8F (value) {
        if (!($T0C().op_GreaterThanOrEqual(value, $T0C().Create(0, 16777088, 65535)) && $T0C().op_LessThanOrEqual(value, $T0C().Create(16777215, 127, 0)))) {
          throw $S06().Construct($T19().GetResourceString("Overflow_Int32"));
        }
        return value.ToNumber(4294967295, true);
      };

      function Convert_ToInt32$90 (value) {
        if (!$T0D().op_LessThanOrEqual(value, $T0D().Create(16777215, 127, 0))) {
          throw $S06().Construct($T19().GetResourceString("Overflow_Int32"));
        }
        return value.ToNumber(4294967295, true);
      };

      function Convert_ToInt32$91 (value) {
        return $S09().CallStatic($thisType, "ToInt32", null, value);
      };

      function Convert_ToInt32$92 (value) {
        if (+value >= 0) {
          if (+value < 2147483647.5) {
            var num = ((value) | 0);
            var num2 = +value - +num;
            if (!((num2 <= 0.5) && ((num2 !== 0.5) ||
                  ((num & 1) === 0)))) {
              num = ((num + 1) | 0);
            }
            return num;
          }
        } else if (+value >= -2147483648.5) {
          var num3 = ((value) | 0);
          var num4 = +value - +num3;
          if (!((num4 >= -0.5) && ((num4 !== -0.5) ||
                ((num3 & 1) === 0)))) {
            num3 = ((num3 - 1) | 0);
          }
          return num3;
        }
        throw $S06().Construct($T19().GetResourceString("Overflow_Int32"));
      };

      function Convert_ToInt32$93 (value) {
        return $T10().FCallToInt32(value);
      };

      function Convert_ToInt32$94 (value) {
        if (value === null) {
          return 0;
        }
        return $S22().CallStatic($T0A(), "Parse", null, value, $T22().get_CurrentCulture());
      };

      function Convert_ToInt32$95 (value, provider) {
        if (value === null) {
          return 0;
        }
        return $T0A().Parse(value, $T23().Integer, provider);
      };

      function Convert_ToInt32$96 (value) {
        return $IM06().Call(value, null, null);
      };

      function Convert_ToInt32$97 (value, fromBase) {
        if (!(((fromBase | 0) === 2) ||
            ((fromBase | 0) === 8) ||
            ((fromBase | 0) === 10) || ((fromBase | 0) === 16))) {
          throw $S02().Construct($T19().GetResourceString("Arg_InvalidBase"));
        }
        return $T24().StringToInt(value, fromBase, 4096);
      };

      function Convert_ToInt64$98 (value) {
        if (value !== null) {
          return $IM08().Call($T17().$Cast(value), null, null);
        }
        return $T0C().Create(0, 0, 0);
      };

      function Convert_ToInt64$99 (value, provider) {
        if (value !== null) {
          return $IM08().Call($T17().$Cast(value), null, provider);
        }
        return $T0C().Create(0, 0, 0);
      };

      function Convert_ToInt64$9A (value) {
        return (
          value
             ? 1
             : 0)
        ;
      };

      function Convert_ToInt64$9B (value) {
        return (value.charCodeAt(0)).ToInt64();
      };

      function Convert_ToInt64$9C (value) {
        return $T0C().FromNumber(value);
      };

      function Convert_ToInt64$9D (value) {
        return ($T0D().FromNumber(value)).ToInt64();
      };

      function Convert_ToInt64$9E (value) {
        return $T0C().FromNumber(value);
      };

      function Convert_ToInt64$9F (value) {
        return ($T0D().FromNumber(value)).ToInt64();
      };

      function Convert_ToInt64$A0 (value) {
        return $T0C().FromNumber(value);
      };

      function Convert_ToInt64$A1 (value) {
        return ($T0D().FromNumber(value)).ToInt64();
      };

      function Convert_ToInt64$A2 (value) {
        if (!$T0D().op_LessThanOrEqual(value, $T0D().Create(16777215, 16777215, 32767))) {
          throw $S06().Construct($T19().GetResourceString("Overflow_Int64"));
        }
        return value.ToInt64();
      };

      function Convert_ToInt64$A3 (value) {
        return value;
      };

      function Convert_ToInt64$A4 (value) {
        return $S23().CallStatic($thisType, "ToInt64", null, value);
      };

      function Convert_ToInt64$A5 (value) {
        return $T0C().$OverflowCheck($T0C().FromNumber(Math.round(value)));
      };

      function Convert_ToInt64$A6 (value) {
        return $T10().ToInt64($S0A().CallStatic($T10(), "Round", null, value, 0));
      };

      function Convert_ToInt64$A7 (value) {
        if (value === null) {
          return $T0C().Create(0, 0, 0);
        }
        return $S24().CallStatic($T0C(), "Parse", null, value, $T22().get_CurrentCulture());
      };

      function Convert_ToInt64$A8 (value, provider) {
        if (value === null) {
          return $T0C().Create(0, 0, 0);
        }
        return $T0C().Parse(value, $T23().Integer, provider);
      };

      function Convert_ToInt64$A9 (value) {
        return $IM08().Call(value, null, null);
      };

      function Convert_ToInt64$AA (value, fromBase) {
        if (!(((fromBase | 0) === 2) ||
            ((fromBase | 0) === 8) ||
            ((fromBase | 0) === 10) || ((fromBase | 0) === 16))) {
          throw $S02().Construct($T19().GetResourceString("Arg_InvalidBase"));
        }
        return $T24().StringToLong(value, fromBase, 4096);
      };

      function Convert_ToSByte$AB (value) {
        if (value !== null) {
          return $IM02().Call($T17().$Cast(value), null, null);
        }
        return 0;
      };

      function Convert_ToSByte$AC (value, provider) {
        if (value !== null) {
          return $IM02().Call($T17().$Cast(value), null, provider);
        }
        return 0;
      };

      function Convert_ToSByte$AD (value) {
        if (!value) {
          return 0;
        }
        return 1;
      };

      function Convert_ToSByte$AE (value) {
        return value;
      };

      function Convert_ToSByte$AF (value) {
        if ((value.charCodeAt(0) | 0) > (("").charCodeAt(0) | 0)) {
          throw $S06().Construct($T19().GetResourceString("Overflow_SByte"));
        }
        return value.charCodeAt(0);
      };

      function Convert_ToSByte$B0 (value) {
        if ((value | 0) > 127) {
          throw $S06().Construct($T19().GetResourceString("Overflow_SByte"));
        }
        return ((value + 0x80 & 0xFF) - 0x80);
      };

      function Convert_ToSByte$B1 (value) {
        if (!(((value | 0) >= -128) && ((value | 0) <= 127))) {
          throw $S06().Construct($T19().GetResourceString("Overflow_SByte"));
        }
        return ((value + 0x80 & 0xFF) - 0x80);
      };

      function Convert_ToSByte$B2 (value) {
        if ((value | 0) > 127) {
          throw $S06().Construct($T19().GetResourceString("Overflow_SByte"));
        }
        return ((value + 0x80 & 0xFF) - 0x80);
      };

      function Convert_ToSByte$B3 (value) {
        if (!(((value | 0) >= -128) && ((value | 0) <= 127))) {
          throw $S06().Construct($T19().GetResourceString("Overflow_SByte"));
        }
        return ((value + 0x80 & 0xFF) - 0x80);
      };

      function Convert_ToSByte$B4 (value) {
        if (!$T0D().op_LessThanOrEqual(
            $T0D().FromNumber(value),
            $T0D().Create(127, 0, 0)
          )) {
          throw $S06().Construct($T19().GetResourceString("Overflow_SByte"));
        }
        return ((value + 0x80 & 0xFF) - 0x80);
      };

      function Convert_ToSByte$B5 (value) {
        if (!($T0C().op_GreaterThanOrEqual(value, $T0C().Create(16777088, 16777215, 65535)) && $T0C().op_LessThanOrEqual(value, $T0C().Create(127, 0, 0)))) {
          throw $S06().Construct($T19().GetResourceString("Overflow_SByte"));
        }
        return value.ToNumber(255, true);
      };

      function Convert_ToSByte$B6 (value) {
        if (!$T0D().op_LessThanOrEqual(value, $T0D().Create(127, 0, 0))) {
          throw $S06().Construct($T19().GetResourceString("Overflow_SByte"));
        }
        return value.ToNumber(255, true);
      };

      function Convert_ToSByte$B7 (value) {
        return $S25().CallStatic($thisType, "ToSByte", null, value);
      };

      function Convert_ToSByte$B8 (value) {
        return $S26().CallStatic($thisType, "ToSByte", null, $S09().CallStatic($thisType, "ToInt32", null, value));
      };

      function Convert_ToSByte$B9 (value) {
        return $T10().ToSByte($S0A().CallStatic($T10(), "Round", null, value, 0));
      };

      function Convert_ToSByte$BA (value) {
        if (value === null) {
          return 0;
        }
        return $S27().CallStatic($T06(), "Parse", null, value, $T22().get_CurrentCulture());
      };

      function Convert_ToSByte$BB (value, provider) {
        return $S28().CallStatic($T06(), "Parse", null, value, $T23().Integer, provider);
      };

      function Convert_ToSByte$BC (value) {
        return $IM02().Call(value, null, null);
      };

      function Convert_ToSByte$BD (value, fromBase) {
        if (!(((fromBase | 0) === 2) ||
            ((fromBase | 0) === 8) ||
            ((fromBase | 0) === 10) || ((fromBase | 0) === 16))) {
          throw $S02().Construct($T19().GetResourceString("Arg_InvalidBase"));
        }
        var num = ($T24().StringToInt(value, fromBase, 5120) | 0);
        if (!(((fromBase | 0) === 10) || (num > 255))) {
          return ((num + 0x80 & 0xFF) - 0x80);
        }
        if (!((num >= -128) && (num <= 127))) {
          throw $S06().Construct($T19().GetResourceString("Overflow_SByte"));
        }
        return ((num + 0x80 & 0xFF) - 0x80);
      };

      function Convert_ToSingle$BE (value) {
        if (value !== null) {
          return $IM0A().Call($T17().$Cast(value), null, null);
        }
        return 0;
      };

      function Convert_ToSingle$BF (value, provider) {
        if (value !== null) {
          return $IM0A().Call($T17().$Cast(value), null, provider);
        }
        return 0;
      };

      function Convert_ToSingle$C0 (value) {
        return +value;
      };

      function Convert_ToSingle$C1 (value) {
        return +value;
      };

      function Convert_ToSingle$C2 (value) {
        return $IM0A().Call($T05().$Box(value), null, null);
      };

      function Convert_ToSingle$C3 (value) {
        return +value;
      };

      function Convert_ToSingle$C4 (value) {
        return +value;
      };

      function Convert_ToSingle$C5 (value) {
        return +value;
      };

      function Convert_ToSingle$C6 (value) {
        return Math.fround(+value);
      };

      function Convert_ToSingle$C7 (value) {
        return value.ToNumber(-1, false);
      };

      function Convert_ToSingle$C8 (value) {
        return Math.fround(value.ToNumber(-1, false));
      };

      function Convert_ToSingle$C9 (value) {
        return value;
      };

      function Convert_ToSingle$CA (value) {
        return Math.fround(value);
      };

      function Convert_ToSingle$CB (value) {
        return $S29().CallStatic($T10(), "op_Explicit", null, value);
      };

      function Convert_ToSingle$CC (value) {
        if (value === null) {
          return 0;
        }
        return $S2A().CallStatic($T0E(), "Parse", null, value, $T22().get_CurrentCulture());
      };

      function Convert_ToSingle$CD (value, provider) {
        if (value === null) {
          return 0;
        }
        return $S2B().CallStatic($T0E(), "Parse", null, value, $T23().$Flags("AllowThousands", "Float"), provider);
      };

      function Convert_ToSingle$CE (value) {
        return +((
            value
               ? 1
               : 0)
        );
      };

      function Convert_ToSingle$CF (value) {
        return $IM0A().Call(value, null, null);
      };

      function Convert_ToString$D0 (value) {
        return $S2C().CallStatic($thisType, "ToString", null, value, null);
      };

      function Convert_ToString$D1 (value, provider) {
        var convertible = $T17().$As(value);
        if (convertible !== null) {
          return $IM0E().Call(convertible, null, provider);
        }
        var formattable = $T27().$As(value);
        if (formattable !== null) {
          return $IM11().Call(formattable, null, null, provider);
        }
        if (value !== null) {
          return value.toString();
        }
        return $T12().Empty;
      };

      function Convert_ToString$D2 (value) {
        return value.toString();
      };

      function Convert_ToString$D3 (value, provider) {
        return value.ToString(provider);
      };

      function Convert_ToString$D4 (value) {
        return $S2D().CallStatic($T05(), "ToString", null, value);
      };

      function Convert_ToString$D5 (value, provider) {
        return $S2E().CallVirtual("ToString", null, value, provider);
      };

      function Convert_ToString$D6 (value) {
        return $T06().__Type__.__PublicInterface__.$ToString(value, null, $T22().get_CurrentCulture());
      };

      function Convert_ToString$D7 (value, provider) {
        return $T06().__Type__.__PublicInterface__.$ToString(value, null, provider);
      };

      function Convert_ToString$D8 (value) {
        return $T07().__Type__.__PublicInterface__.$ToString(value, null, $T22().get_CurrentCulture());
      };

      function Convert_ToString$D9 (value, provider) {
        return $T07().__Type__.__PublicInterface__.$ToString(value, null, provider);
      };

      function Convert_ToString$DA (value) {
        return $T08().__Type__.__PublicInterface__.$ToString(value, null, $T22().get_CurrentCulture());
      };

      function Convert_ToString$DB (value, provider) {
        return $T08().__Type__.__PublicInterface__.$ToString(value, null, provider);
      };

      function Convert_ToString$DC (value) {
        return $T09().__Type__.__PublicInterface__.$ToString(value, null, $T22().get_CurrentCulture());
      };

      function Convert_ToString$DD (value, provider) {
        return $T09().__Type__.__PublicInterface__.$ToString(value, null, provider);
      };

      function Convert_ToString$DE (value) {
        return $T0A().__Type__.__PublicInterface__.$ToString(value, null, $T22().get_CurrentCulture());
      };

      function Convert_ToString$DF (value, provider) {
        return $T0A().__Type__.__PublicInterface__.$ToString(value, null, provider);
      };

      function Convert_ToString$E0 (value) {
        return $T0B().__Type__.__PublicInterface__.$ToString(value, null, $T22().get_CurrentCulture());
      };

      function Convert_ToString$E1 (value, provider) {
        return $T0B().__Type__.__PublicInterface__.$ToString(value, null, provider);
      };

      function Convert_ToString$E2 (value) {
        return $T0C().__Type__.__PublicInterface__.$ToString(value, null, $T22().get_CurrentCulture());
      };

      function Convert_ToString$E3 (value, provider) {
        return $T0C().__Type__.__PublicInterface__.$ToString(value, null, provider);
      };

      function Convert_ToString$E4 (value) {
        return $T0D().__Type__.__PublicInterface__.$ToString(value, null, $T22().get_CurrentCulture());
      };

      function Convert_ToString$E5 (value, provider) {
        return $T0D().__Type__.__PublicInterface__.$ToString(value, null, provider);
      };

      function Convert_ToString$E6 (value) {
        return $T0E().__Type__.__PublicInterface__.$ToString(value, null, $T22().get_CurrentCulture());
      };

      function Convert_ToString$E7 (value, provider) {
        return $T0E().__Type__.__PublicInterface__.$ToString(value, null, provider);
      };

      function Convert_ToString$E8 (value) {
        return $T0F().__Type__.__PublicInterface__.$ToString(value, null, $T22().get_CurrentCulture());
      };

      function Convert_ToString$E9 (value, provider) {
        return $T0F().__Type__.__PublicInterface__.$ToString(value, null, provider);
      };

      function Convert_ToString$EA (value) {
        return $T10().__Type__.__PublicInterface__.$ToString(value, null, $T22().get_CurrentCulture());
      };

      function Convert_ToString$EB (value, provider) {
        return $T10().__Type__.__PublicInterface__.$ToString(value, null, provider);
      };

      function Convert_ToString$EC (value) {
        return value.toString();
      };

      function Convert_ToString$ED (value, provider) {
        return $S2F().CallVirtual("ToString", null, value, provider);
      };

      function Convert_ToString$EE (value) {
        return value;
      };

      function Convert_ToString$EF (value, provider) {
        return value;
      };

      function Convert_ToString$F0 (value, toBase) {
        if (!(((toBase | 0) === 2) ||
            ((toBase | 0) === 8) ||
            ((toBase | 0) === 10) || ((toBase | 0) === 16))) {
          throw $S02().Construct($T19().GetResourceString("Arg_InvalidBase"));
        }
        return $T24().IntToString(
          value,
          toBase,
          -1,
          " ",
          64
        );
      };

      function Convert_ToString$F1 (value, toBase) {
        if (!(((toBase | 0) === 2) ||
            ((toBase | 0) === 8) ||
            ((toBase | 0) === 10) || ((toBase | 0) === 16))) {
          throw $S02().Construct($T19().GetResourceString("Arg_InvalidBase"));
        }
        return $T24().IntToString(
          value,
          toBase,
          -1,
          " ",
          128
        );
      };

      function Convert_ToString$F2 (value, toBase) {
        if (!(((toBase | 0) === 2) ||
            ((toBase | 0) === 8) ||
            ((toBase | 0) === 10) || ((toBase | 0) === 16))) {
          throw $S02().Construct($T19().GetResourceString("Arg_InvalidBase"));
        }
        return $T24().IntToString(
          value,
          toBase,
          -1,
          " ",
          0
        );
      };

      function Convert_ToString$F3 (value, toBase) {
        if (!(((toBase | 0) === 2) ||
            ((toBase | 0) === 8) ||
            ((toBase | 0) === 10) || ((toBase | 0) === 16))) {
          throw $S02().Construct($T19().GetResourceString("Arg_InvalidBase"));
        }
        return $T24().LongToString(
          value,
          toBase,
          -1,
          " ",
          0
        );
      };

      function Convert_ToUInt16$F4 (value) {
        if (value !== null) {
          return $IM05().Call($T17().$Cast(value), null, null);
        }
        return 0;
      };

      function Convert_ToUInt16$F5 (value, provider) {
        if (value !== null) {
          return $IM05().Call($T17().$Cast(value), null, provider);
        }
        return 0;
      };

      function Convert_ToUInt16$F6 (value) {
        if (!value) {
          return 0;
        }
        return 1;
      };

      function Convert_ToUInt16$F7 (value) {
        return value.charCodeAt(0);
      };

      function Convert_ToUInt16$F8 (value) {
        if ((value | 0) < 0) {
          throw $S06().Construct($T19().GetResourceString("Overflow_UInt16"));
        }
        return value;
      };

      function Convert_ToUInt16$F9 (value) {
        return value;
      };

      function Convert_ToUInt16$FA (value) {
        if ((value | 0) < 0) {
          throw $S06().Construct($T19().GetResourceString("Overflow_UInt16"));
        }
        return (value & 0xFFFF);
      };

      function Convert_ToUInt16$FB (value) {
        if (!(((value | 0) >= 0) && ((value | 0) <= 65535))) {
          throw $S06().Construct($T19().GetResourceString("Overflow_UInt16"));
        }
        return (value & 0xFFFF);
      };

      function Convert_ToUInt16$FC (value) {
        return value;
      };

      function Convert_ToUInt16$FD (value) {
        if ((value >>> 0) > 65535) {
          throw $S06().Construct($T19().GetResourceString("Overflow_UInt16"));
        }
        return (value & 0xFFFF);
      };

      function Convert_ToUInt16$FE (value) {
        if (!($T0C().op_GreaterThanOrEqual(value, $T0C().Create(0, 0, 0)) && $T0C().op_LessThanOrEqual(value, $T0C().Create(65535, 0, 0)))) {
          throw $S06().Construct($T19().GetResourceString("Overflow_UInt16"));
        }
        return value.ToNumber(65535, false);
      };

      function Convert_ToUInt16$FF (value) {
        if (!$T0D().op_LessThanOrEqual(value, $T0D().Create(65535, 0, 0))) {
          throw $S06().Construct($T19().GetResourceString("Overflow_UInt16"));
        }
        return value.ToNumber(65535, false);
      };

      function Convert_ToUInt16$100 (value) {
        return $S30().CallStatic($thisType, "ToUInt16", null, value);
      };

      function Convert_ToUInt16$101 (value) {
        return $S31().CallStatic($thisType, "ToUInt16", null, $S09().CallStatic($thisType, "ToInt32", null, value));
      };

      function Convert_ToUInt16$102 (value) {
        return $T10().ToUInt16($S0A().CallStatic($T10(), "Round", null, value, 0));
      };

      function Convert_ToUInt16$103 (value) {
        if (value === null) {
          return 0;
        }
        return $S32().CallStatic($T09(), "Parse", null, value, $T22().get_CurrentCulture());
      };

      function Convert_ToUInt16$104 (value, provider) {
        if (value === null) {
          return 0;
        }
        return $S33().CallStatic($T09(), "Parse", null, value, $T23().Integer, provider);
      };

      function Convert_ToUInt16$105 (value) {
        return $IM05().Call(value, null, null);
      };

      function Convert_ToUInt16$106 (value, fromBase) {
        if (!(((fromBase | 0) === 2) ||
            ((fromBase | 0) === 8) ||
            ((fromBase | 0) === 10) || ((fromBase | 0) === 16))) {
          throw $S02().Construct($T19().GetResourceString("Arg_InvalidBase"));
        }
        var num = ($T24().StringToInt(value, fromBase, 4608) | 0);
        if (!((num >= 0) && (num <= 65535))) {
          throw $S06().Construct($T19().GetResourceString("Overflow_UInt16"));
        }
        return (num & 0xFFFF);
      };

      function Convert_ToUInt32$107 (value) {
        if (value !== null) {
          return $IM07().Call($T17().$Cast(value), null, null);
        }
        return 0;
      };

      function Convert_ToUInt32$108 (value, provider) {
        if (value !== null) {
          return $IM07().Call($T17().$Cast(value), null, provider);
        }
        return 0;
      };

      function Convert_ToUInt32$109 (value) {
        if (!value) {
          return 0;
        }
        return 1;
      };

      function Convert_ToUInt32$10A (value) {
        return value.charCodeAt(0);
      };

      function Convert_ToUInt32$10B (value) {
        if ((value | 0) < 0) {
          throw $S06().Construct($T19().GetResourceString("Overflow_UInt32"));
        }
        return value;
      };

      function Convert_ToUInt32$10C (value) {
        return value;
      };

      function Convert_ToUInt32$10D (value) {
        if ((value | 0) < 0) {
          throw $S06().Construct($T19().GetResourceString("Overflow_UInt32"));
        }
        return value;
      };

      function Convert_ToUInt32$10E (value) {
        return value;
      };

      function Convert_ToUInt32$10F (value) {
        if ((value | 0) < 0) {
          throw $S06().Construct($T19().GetResourceString("Overflow_UInt32"));
        }
        return (value >>> 0);
      };

      function Convert_ToUInt32$110 (value) {
        return value;
      };

      function Convert_ToUInt32$111 (value) {
        if (!($T0C().op_GreaterThanOrEqual(value, $T0C().Create(0, 0, 0)) && $T0C().op_LessThanOrEqual(value, ($T0D().FromNumber(-1)).ToInt64()))) {
          throw $S06().Construct($T19().GetResourceString("Overflow_UInt32"));
        }
        return value.ToNumber(4294967295, false);
      };

      function Convert_ToUInt32$112 (value) {
        if (!$T0D().op_LessThanOrEqual(value, $T0D().FromNumber(-1))) {
          throw $S06().Construct($T19().GetResourceString("Overflow_UInt32"));
        }
        return value.ToNumber(4294967295, false);
      };

      function Convert_ToUInt32$113 (value) {
        return $S34().CallStatic($thisType, "ToUInt32", null, value);
      };

      function Convert_ToUInt32$114 (value) {
        if (!((+value < -0.5) || (+value >= 4294967295.5))) {
          var num = ((value) | 0);
          var num2 = +value - +num;
          if (!((num2 <= 0.5) && ((num2 !== 0.5) ||
                ((num & 1) === 0)))) {
            num = ((num + 1) >>> 0);
          }
          return num;
        }
        throw $S06().Construct($T19().GetResourceString("Overflow_UInt32"));
      };

      function Convert_ToUInt32$115 (value) {
        return $T10().ToUInt32($S0A().CallStatic($T10(), "Round", null, value, 0));
      };

      function Convert_ToUInt32$116 (value) {
        if (value === null) {
          return 0;
        }
        return $S35().CallStatic($T0B(), "Parse", null, value, $T22().get_CurrentCulture());
      };

      function Convert_ToUInt32$117 (value, provider) {
        if (value === null) {
          return 0;
        }
        return $T0B().Parse(value, $T23().Integer, provider);
      };

      function Convert_ToUInt32$118 (value) {
        return $IM07().Call(value, null, null);
      };

      function Convert_ToUInt32$119 (value, fromBase) {
        if (!(((fromBase | 0) === 2) ||
            ((fromBase | 0) === 8) ||
            ((fromBase | 0) === 10) || ((fromBase | 0) === 16))) {
          throw $S02().Construct($T19().GetResourceString("Arg_InvalidBase"));
        }
        return ($T24().StringToInt(value, fromBase, 4608) >>> 0);
      };

      function Convert_ToUInt64$11A (value) {
        if (value !== null) {
          return $IM09().Call($T17().$Cast(value), null, null);
        }
        return $T0D().Create(0, 0, 0);
      };

      function Convert_ToUInt64$11B (value, provider) {
        if (value !== null) {
          return $IM09().Call($T17().$Cast(value), null, provider);
        }
        return $T0D().Create(0, 0, 0);
      };

      function Convert_ToUInt64$11C (value) {
        if (!value) {
          return $T0D().Create(0, 0, 0);
        }
        return $T0D().Create(1, 0, 0);
      };

      function Convert_ToUInt64$11D (value) {
        return value.charCodeAt(0);
      };

      function Convert_ToUInt64$11E (value) {
        if ((value | 0) < 0) {
          throw $S06().Construct($T19().GetResourceString("Overflow_UInt64"));
        }
        return ($T0C().FromNumber(value)).ToUInt64();
      };

      function Convert_ToUInt64$11F (value) {
        return $T0D().FromNumber(value);
      };

      function Convert_ToUInt64$120 (value) {
        if ((value | 0) < 0) {
          throw $S06().Construct($T19().GetResourceString("Overflow_UInt64"));
        }
        return ($T0C().FromNumber(value)).ToUInt64();
      };

      function Convert_ToUInt64$121 (value) {
        return $T0D().FromNumber(value);
      };

      function Convert_ToUInt64$122 (value) {
        if ((value | 0) < 0) {
          throw $S06().Construct($T19().GetResourceString("Overflow_UInt64"));
        }
        return ($T0C().FromNumber(value)).ToUInt64();
      };

      function Convert_ToUInt64$123 (value) {
        return $T0D().FromNumber(value);
      };

      function Convert_ToUInt64$124 (value) {
        if (!$T0C().op_GreaterThanOrEqual(value, $T0C().Create(0, 0, 0))) {
          throw $S06().Construct($T19().GetResourceString("Overflow_UInt64"));
        }
        return value.ToUInt64();
      };

      function Convert_ToUInt64$125 (value) {
        return value;
      };

      function Convert_ToUInt64$126 (value) {
        return $S36().CallStatic($thisType, "ToUInt64", null, value);
      };

      function Convert_ToUInt64$127 (value) {
        return $T0D().$OverflowCheck($T0D().FromNumber(Math.round(value)));
      };

      function Convert_ToUInt64$128 (value) {
        return $T10().ToUInt64($S0A().CallStatic($T10(), "Round", null, value, 0));
      };

      function Convert_ToUInt64$129 (value) {
        if (value === null) {
          return $T0D().Create(0, 0, 0);
        }
        return $S37().CallStatic($T0D(), "Parse", null, value, $T22().get_CurrentCulture());
      };

      function Convert_ToUInt64$12A (value, provider) {
        if (value === null) {
          return $T0D().Create(0, 0, 0);
        }
        return $T0D().Parse(value, $T23().Integer, provider);
      };

      function Convert_ToUInt64$12B (value) {
        return $IM09().Call(value, null, null);
      };

      function Convert_ToUInt64$12C (value, fromBase) {
        if (!(((fromBase | 0) === 2) ||
            ((fromBase | 0) === 8) ||
            ((fromBase | 0) === 10) || ((fromBase | 0) === 16))) {
          throw $S02().Construct($T19().GetResourceString("Arg_InvalidBase"));
        }
        return ($T24().StringToLong(value, fromBase, 4608)).ToUInt64();
      };

      JSIL.MakeStaticClass("System.Convert", true, [], function ($ib) {
        $ = $ib;

        $.Method({Static:true , Public:true }, "ChangeType",
          new JSIL.MethodSignature($.Object, [$.Object, $asm01.TypeRef("System.TypeCode")]),
          Convert_ChangeType$00
        );

        $.Method({Static:true , Public:true }, "ChangeType",
          new JSIL.MethodSignature($.Object, [
              $.Object, $asm01.TypeRef("System.TypeCode"),
              $asm01.TypeRef("System.IFormatProvider")
            ]),
          Convert_ChangeType$01
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ChangeType",
          new JSIL.MethodSignature($.Object, [$.Object, $asm01.TypeRef("System.Type")]),
          Convert_ChangeType$02
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ChangeType",
          new JSIL.MethodSignature($.Object, [
              $.Object, $asm01.TypeRef("System.Type"),
              $asm01.TypeRef("System.IFormatProvider")
            ]),
          Convert_ChangeType$03
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:false}, "ConvertToBase64Array",
          new JSIL.MethodSignature($.Int32, [
              $jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $jsilcore.TypeRef("JSIL.Pointer", [$.Byte]),
              $.Int32, $.Int32,
              $.Boolean
            ]),
          JSIL.UntranslatableFunction("System.Int32 System.Convert::ConvertToBase64Array(System.Char*,System.Byte*,System.Int32,System.Int32,System.Boolean)")
        )
          .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

        $.Method({Static:true , Public:false}, "DefaultToType",
          new JSIL.MethodSignature($.Object, [
              $asm01.TypeRef("System.IConvertible"), $asm01.TypeRef("System.Type"),
              $asm01.TypeRef("System.IFormatProvider")
            ]),
          Convert_DefaultToType
        );

        $.Method({Static:true , Public:false}, "FromBase64_ComputeResultLength",
          new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $.Int32]),
          JSIL.UntranslatableFunction("System.Int32 System.Convert::FromBase64_ComputeResultLength(System.Char*,System.Int32)")
        )
          .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

        $.Method({Static:true , Public:false}, "FromBase64_Decode",
          new JSIL.MethodSignature($.Int32, [
              $jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $.Int32,
              $jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), $.Int32
            ]),
          JSIL.UntranslatableFunction("System.Int32 System.Convert::FromBase64_Decode(System.Char*,System.Int32,System.Byte*,System.Int32)")
        )
          .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

        $.Method({Static:true , Public:true }, "FromBase64CharArray",
          new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
              $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32,
              $.Int32
            ]),
          JSIL.UntranslatableFunction("System.Byte[] System.Convert::FromBase64CharArray(System.Char[],System.Int32,System.Int32)")
        )
          .Attribute($asm01.TypeRef("System.Security.SecuritySafeCriticalAttribute"))
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:false}, "FromBase64CharPtr",
          new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $.Int32]),
          JSIL.UntranslatableFunction("System.Byte[] System.Convert::FromBase64CharPtr(System.Char*,System.Int32)")
        )
          .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

        $.ExternalMethod({Static:true , Public:true }, "FromBase64String",
          new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String])
        )
          .Attribute($asm01.TypeRef("System.Security.SecuritySafeCriticalAttribute"))
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "GetTypeCode",
          new JSIL.MethodSignature($asm01.TypeRef("System.TypeCode"), [$.Object]),
          Convert_GetTypeCode
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "IsDBNull",
          new JSIL.MethodSignature($.Boolean, [$.Object]),
          Convert_IsDBNull
        );

        $.Method({Static:true , Public:false}, "ToBase64_CalculateAndValidateOutputLength",
          new JSIL.MethodSignature($.Int32, [$.Int32, $.Boolean]),
          Convert_ToBase64_CalculateAndValidateOutputLength
        );

        $.Method({Static:true , Public:true }, "ToBase64CharArray",
          new JSIL.MethodSignature($.Int32, [
              $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32,
              $.Int32, $jsilcore.TypeRef("System.Array", [$.Char]),
              $.Int32
            ]),
          Convert_ToBase64CharArray$04
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToBase64CharArray",
          new JSIL.MethodSignature($.Int32, [
              $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32,
              $.Int32, $jsilcore.TypeRef("System.Array", [$.Char]),
              $.Int32, $asm01.TypeRef("System.Base64FormattingOptions")
            ]),
          JSIL.UntranslatableFunction("System.Int32 System.Convert::ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)")
        )
          .Attribute($asm01.TypeRef("System.Security.SecuritySafeCriticalAttribute"))
          .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

        $.ExternalMethod({Static:true , Public:true }, "ToBase64String",
          new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$.Byte])])
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.ExternalMethod({Static:true , Public:true }, "ToBase64String",
          new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$.Byte]), $asm01.TypeRef("System.Base64FormattingOptions")])
        )
          .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

        $.ExternalMethod({Static:true , Public:true }, "ToBase64String",
          new JSIL.MethodSignature($.String, [
              $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32,
              $.Int32
            ])
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.ExternalMethod({Static:true , Public:true }, "ToBase64String",
          new JSIL.MethodSignature($.String, [
              $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32,
              $.Int32, $asm01.TypeRef("System.Base64FormattingOptions")
            ])
        )
          .Attribute($asm01.TypeRef("System.Security.SecuritySafeCriticalAttribute"))
          .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

        $.Method({Static:true , Public:true }, "ToBoolean",
          new JSIL.MethodSignature($.Boolean, [$.Object]),
          Convert_ToBoolean$05
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToBoolean",
          new JSIL.MethodSignature($.Boolean, [$.Object, $asm01.TypeRef("System.IFormatProvider")]),
          Convert_ToBoolean$06
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToBoolean",
          new JSIL.MethodSignature($.Boolean, [$.Boolean]),
          Convert_ToBoolean$07
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToBoolean",
          new JSIL.MethodSignature($.Boolean, [$.SByte]),
          Convert_ToBoolean$08
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToBoolean",
          new JSIL.MethodSignature($.Boolean, [$.Char]),
          Convert_ToBoolean$09
        );

        $.Method({Static:true , Public:true }, "ToBoolean",
          new JSIL.MethodSignature($.Boolean, [$.Byte]),
          Convert_ToBoolean$0A
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToBoolean",
          new JSIL.MethodSignature($.Boolean, [$.Int16]),
          Convert_ToBoolean$0B
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToBoolean",
          new JSIL.MethodSignature($.Boolean, [$.UInt16]),
          Convert_ToBoolean$0C
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToBoolean",
          new JSIL.MethodSignature($.Boolean, [$.Int32]),
          Convert_ToBoolean$0D
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToBoolean",
          new JSIL.MethodSignature($.Boolean, [$.UInt32]),
          Convert_ToBoolean$0E
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToBoolean",
          new JSIL.MethodSignature($.Boolean, [$.Int64]),
          Convert_ToBoolean$0F
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToBoolean",
          new JSIL.MethodSignature($.Boolean, [$.UInt64]),
          Convert_ToBoolean$10
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToBoolean",
          new JSIL.MethodSignature($.Boolean, [$.String]),
          Convert_ToBoolean$11
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToBoolean",
          new JSIL.MethodSignature($.Boolean, [$.String, $asm01.TypeRef("System.IFormatProvider")]),
          Convert_ToBoolean$12
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToBoolean",
          new JSIL.MethodSignature($.Boolean, [$.Single]),
          Convert_ToBoolean$13
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToBoolean",
          new JSIL.MethodSignature($.Boolean, [$.Double]),
          Convert_ToBoolean$14
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToBoolean",
          new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Decimal")]),
          Convert_ToBoolean$15
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToBoolean",
          new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.DateTime")]),
          Convert_ToBoolean$16
        );

        $.Method({Static:true , Public:true }, "ToByte",
          new JSIL.MethodSignature($.Byte, [$.Object]),
          Convert_ToByte$17
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToByte",
          new JSIL.MethodSignature($.Byte, [$.Object, $asm01.TypeRef("System.IFormatProvider")]),
          Convert_ToByte$18
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToByte",
          new JSIL.MethodSignature($.Byte, [$.Boolean]),
          Convert_ToByte$19
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToByte",
          new JSIL.MethodSignature($.Byte, [$.Byte]),
          Convert_ToByte$1A
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToByte",
          new JSIL.MethodSignature($.Byte, [$.Char]),
          Convert_ToByte$1B
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToByte",
          new JSIL.MethodSignature($.Byte, [$.SByte]),
          Convert_ToByte$1C
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToByte",
          new JSIL.MethodSignature($.Byte, [$.Int16]),
          Convert_ToByte$1D
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToByte",
          new JSIL.MethodSignature($.Byte, [$.UInt16]),
          Convert_ToByte$1E
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToByte",
          new JSIL.MethodSignature($.Byte, [$.Int32]),
          Convert_ToByte$1F
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToByte",
          new JSIL.MethodSignature($.Byte, [$.UInt32]),
          Convert_ToByte$20
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToByte",
          new JSIL.MethodSignature($.Byte, [$.Int64]),
          Convert_ToByte$21
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToByte",
          new JSIL.MethodSignature($.Byte, [$.UInt64]),
          Convert_ToByte$22
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToByte",
          new JSIL.MethodSignature($.Byte, [$.Single]),
          Convert_ToByte$23
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToByte",
          new JSIL.MethodSignature($.Byte, [$.Double]),
          Convert_ToByte$24
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToByte",
          new JSIL.MethodSignature($.Byte, [$asm01.TypeRef("System.Decimal")]),
          Convert_ToByte$25
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToByte",
          new JSIL.MethodSignature($.Byte, [$.String]),
          Convert_ToByte$26
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToByte",
          new JSIL.MethodSignature($.Byte, [$.String, $asm01.TypeRef("System.IFormatProvider")]),
          Convert_ToByte$27
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToByte",
          new JSIL.MethodSignature($.Byte, [$asm01.TypeRef("System.DateTime")]),
          Convert_ToByte$28
        );

        $.Method({Static:true , Public:true }, "ToByte",
          new JSIL.MethodSignature($.Byte, [$.String, $.Int32]),
          Convert_ToByte$29
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToChar",
          new JSIL.MethodSignature($.Char, [$.Object]),
          Convert_ToChar$2A
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToChar",
          new JSIL.MethodSignature($.Char, [$.Object, $asm01.TypeRef("System.IFormatProvider")]),
          Convert_ToChar$2B
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToChar",
          new JSIL.MethodSignature($.Char, [$.Boolean]),
          Convert_ToChar$2C
        );

        $.Method({Static:true , Public:true }, "ToChar",
          new JSIL.MethodSignature($.Char, [$.Char]),
          Convert_ToChar$2D
        );

        $.Method({Static:true , Public:true }, "ToChar",
          new JSIL.MethodSignature($.Char, [$.SByte]),
          Convert_ToChar$2E
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToChar",
          new JSIL.MethodSignature($.Char, [$.Byte]),
          Convert_ToChar$2F
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToChar",
          new JSIL.MethodSignature($.Char, [$.Int16]),
          Convert_ToChar$30
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToChar",
          new JSIL.MethodSignature($.Char, [$.UInt16]),
          Convert_ToChar$31
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToChar",
          new JSIL.MethodSignature($.Char, [$.Int32]),
          Convert_ToChar$32
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToChar",
          new JSIL.MethodSignature($.Char, [$.UInt32]),
          Convert_ToChar$33
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToChar",
          new JSIL.MethodSignature($.Char, [$.Int64]),
          Convert_ToChar$34
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToChar",
          new JSIL.MethodSignature($.Char, [$.UInt64]),
          Convert_ToChar$35
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToChar",
          new JSIL.MethodSignature($.Char, [$.String]),
          Convert_ToChar$36
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToChar",
          new JSIL.MethodSignature($.Char, [$.String, $asm01.TypeRef("System.IFormatProvider")]),
          Convert_ToChar$37
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToChar",
          new JSIL.MethodSignature($.Char, [$.Single]),
          Convert_ToChar$38
        );

        $.Method({Static:true , Public:true }, "ToChar",
          new JSIL.MethodSignature($.Char, [$.Double]),
          Convert_ToChar$39
        );

        $.Method({Static:true , Public:true }, "ToChar",
          new JSIL.MethodSignature($.Char, [$asm01.TypeRef("System.Decimal")]),
          Convert_ToChar$3A
        );

        $.Method({Static:true , Public:true }, "ToChar",
          new JSIL.MethodSignature($.Char, [$asm01.TypeRef("System.DateTime")]),
          Convert_ToChar$3B
        );

        $.Method({Static:true , Public:true }, "ToDateTime",
          new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$asm01.TypeRef("System.DateTime")]),
          Convert_ToDateTime$3C
        );

        $.Method({Static:true , Public:true }, "ToDateTime",
          new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$.Object]),
          Convert_ToDateTime$3D
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToDateTime",
          new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$.Object, $asm01.TypeRef("System.IFormatProvider")]),
          Convert_ToDateTime$3E
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToDateTime",
          new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$.String]),
          Convert_ToDateTime$3F
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToDateTime",
          new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$.String, $asm01.TypeRef("System.IFormatProvider")]),
          Convert_ToDateTime$40
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToDateTime",
          new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$.SByte]),
          Convert_ToDateTime$41
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

        $.Method({Static:true , Public:true }, "ToDateTime",
          new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$.Byte]),
          Convert_ToDateTime$42
        );

        $.Method({Static:true , Public:true }, "ToDateTime",
          new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$.Int16]),
          Convert_ToDateTime$43
        );

        $.Method({Static:true , Public:true }, "ToDateTime",
          new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$.UInt16]),
          Convert_ToDateTime$44
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

        $.Method({Static:true , Public:true }, "ToDateTime",
          new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$.Int32]),
          Convert_ToDateTime$45
        );

        $.Method({Static:true , Public:true }, "ToDateTime",
          new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$.UInt32]),
          Convert_ToDateTime$46
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

        $.Method({Static:true , Public:true }, "ToDateTime",
          new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$.Int64]),
          Convert_ToDateTime$47
        );

        $.Method({Static:true , Public:true }, "ToDateTime",
          new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$.UInt64]),
          Convert_ToDateTime$48
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

        $.Method({Static:true , Public:true }, "ToDateTime",
          new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$.Boolean]),
          Convert_ToDateTime$49
        );

        $.Method({Static:true , Public:true }, "ToDateTime",
          new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$.Char]),
          Convert_ToDateTime$4A
        );

        $.Method({Static:true , Public:true }, "ToDateTime",
          new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$.Single]),
          Convert_ToDateTime$4B
        );

        $.Method({Static:true , Public:true }, "ToDateTime",
          new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$.Double]),
          Convert_ToDateTime$4C
        );

        $.Method({Static:true , Public:true }, "ToDateTime",
          new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$asm01.TypeRef("System.Decimal")]),
          Convert_ToDateTime$4D
        );

        $.Method({Static:true , Public:true }, "ToDecimal",
          new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [$.Object]),
          Convert_ToDecimal$4E
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToDecimal",
          new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [$.Object, $asm01.TypeRef("System.IFormatProvider")]),
          Convert_ToDecimal$4F
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToDecimal",
          new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [$.SByte]),
          Convert_ToDecimal$50
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToDecimal",
          new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [$.Byte]),
          Convert_ToDecimal$51
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToDecimal",
          new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [$.Char]),
          Convert_ToDecimal$52
        );

        $.Method({Static:true , Public:true }, "ToDecimal",
          new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [$.Int16]),
          Convert_ToDecimal$53
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToDecimal",
          new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [$.UInt16]),
          Convert_ToDecimal$54
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToDecimal",
          new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [$.Int32]),
          Convert_ToDecimal$55
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToDecimal",
          new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [$.UInt32]),
          Convert_ToDecimal$56
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToDecimal",
          new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [$.Int64]),
          Convert_ToDecimal$57
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToDecimal",
          new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [$.UInt64]),
          Convert_ToDecimal$58
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToDecimal",
          new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [$.Single]),
          Convert_ToDecimal$59
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToDecimal",
          new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [$.Double]),
          Convert_ToDecimal$5A
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToDecimal",
          new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [$.String]),
          Convert_ToDecimal$5B
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToDecimal",
          new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [$.String, $asm01.TypeRef("System.IFormatProvider")]),
          Convert_ToDecimal$5C
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToDecimal",
          new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [$asm01.TypeRef("System.Decimal")]),
          Convert_ToDecimal$5D
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToDecimal",
          new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [$.Boolean]),
          Convert_ToDecimal$5E
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToDecimal",
          new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [$asm01.TypeRef("System.DateTime")]),
          Convert_ToDecimal$5F
        );

        $.Method({Static:true , Public:true }, "ToDouble",
          new JSIL.MethodSignature($.Double, [$.Object]),
          Convert_ToDouble$60
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToDouble",
          new JSIL.MethodSignature($.Double, [$.Object, $asm01.TypeRef("System.IFormatProvider")]),
          Convert_ToDouble$61
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToDouble",
          new JSIL.MethodSignature($.Double, [$.SByte]),
          Convert_ToDouble$62
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToDouble",
          new JSIL.MethodSignature($.Double, [$.Byte]),
          Convert_ToDouble$63
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToDouble",
          new JSIL.MethodSignature($.Double, [$.Int16]),
          Convert_ToDouble$64
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToDouble",
          new JSIL.MethodSignature($.Double, [$.Char]),
          Convert_ToDouble$65
        );

        $.Method({Static:true , Public:true }, "ToDouble",
          new JSIL.MethodSignature($.Double, [$.UInt16]),
          Convert_ToDouble$66
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToDouble",
          new JSIL.MethodSignature($.Double, [$.Int32]),
          Convert_ToDouble$67
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToDouble",
          new JSIL.MethodSignature($.Double, [$.UInt32]),
          Convert_ToDouble$68
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToDouble",
          new JSIL.MethodSignature($.Double, [$.Int64]),
          Convert_ToDouble$69
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToDouble",
          new JSIL.MethodSignature($.Double, [$.UInt64]),
          Convert_ToDouble$6A
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToDouble",
          new JSIL.MethodSignature($.Double, [$.Single]),
          Convert_ToDouble$6B
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToDouble",
          new JSIL.MethodSignature($.Double, [$.Double]),
          Convert_ToDouble$6C
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToDouble",
          new JSIL.MethodSignature($.Double, [$asm01.TypeRef("System.Decimal")]),
          Convert_ToDouble$6D
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToDouble",
          new JSIL.MethodSignature($.Double, [$.String]),
          Convert_ToDouble$6E
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToDouble",
          new JSIL.MethodSignature($.Double, [$.String, $asm01.TypeRef("System.IFormatProvider")]),
          Convert_ToDouble$6F
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToDouble",
          new JSIL.MethodSignature($.Double, [$.Boolean]),
          Convert_ToDouble$70
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToDouble",
          new JSIL.MethodSignature($.Double, [$asm01.TypeRef("System.DateTime")]),
          Convert_ToDouble$71
        );

        $.Method({Static:true , Public:true }, "ToInt16",
          new JSIL.MethodSignature($.Int16, [$.Object]),
          Convert_ToInt16$72
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToInt16",
          new JSIL.MethodSignature($.Int16, [$.Object, $asm01.TypeRef("System.IFormatProvider")]),
          Convert_ToInt16$73
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToInt16",
          new JSIL.MethodSignature($.Int16, [$.Boolean]),
          Convert_ToInt16$74
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToInt16",
          new JSIL.MethodSignature($.Int16, [$.Char]),
          Convert_ToInt16$75
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToInt16",
          new JSIL.MethodSignature($.Int16, [$.SByte]),
          Convert_ToInt16$76
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToInt16",
          new JSIL.MethodSignature($.Int16, [$.Byte]),
          Convert_ToInt16$77
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToInt16",
          new JSIL.MethodSignature($.Int16, [$.UInt16]),
          Convert_ToInt16$78
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToInt16",
          new JSIL.MethodSignature($.Int16, [$.Int32]),
          Convert_ToInt16$79
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToInt16",
          new JSIL.MethodSignature($.Int16, [$.UInt32]),
          Convert_ToInt16$7A
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToInt16",
          new JSIL.MethodSignature($.Int16, [$.Int16]),
          Convert_ToInt16$7B
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToInt16",
          new JSIL.MethodSignature($.Int16, [$.Int64]),
          Convert_ToInt16$7C
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToInt16",
          new JSIL.MethodSignature($.Int16, [$.UInt64]),
          Convert_ToInt16$7D
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToInt16",
          new JSIL.MethodSignature($.Int16, [$.Single]),
          Convert_ToInt16$7E
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToInt16",
          new JSIL.MethodSignature($.Int16, [$.Double]),
          Convert_ToInt16$7F
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToInt16",
          new JSIL.MethodSignature($.Int16, [$asm01.TypeRef("System.Decimal")]),
          Convert_ToInt16$80
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToInt16",
          new JSIL.MethodSignature($.Int16, [$.String]),
          Convert_ToInt16$81
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToInt16",
          new JSIL.MethodSignature($.Int16, [$.String, $asm01.TypeRef("System.IFormatProvider")]),
          Convert_ToInt16$82
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToInt16",
          new JSIL.MethodSignature($.Int16, [$asm01.TypeRef("System.DateTime")]),
          Convert_ToInt16$83
        );

        $.Method({Static:true , Public:true }, "ToInt16",
          new JSIL.MethodSignature($.Int16, [$.String, $.Int32]),
          Convert_ToInt16$84
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToInt32",
          new JSIL.MethodSignature($.Int32, [$.Object]),
          Convert_ToInt32$85
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToInt32",
          new JSIL.MethodSignature($.Int32, [$.Object, $asm01.TypeRef("System.IFormatProvider")]),
          Convert_ToInt32$86
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToInt32",
          new JSIL.MethodSignature($.Int32, [$.Boolean]),
          Convert_ToInt32$87
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToInt32",
          new JSIL.MethodSignature($.Int32, [$.Char]),
          Convert_ToInt32$88
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToInt32",
          new JSIL.MethodSignature($.Int32, [$.SByte]),
          Convert_ToInt32$89
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToInt32",
          new JSIL.MethodSignature($.Int32, [$.Byte]),
          Convert_ToInt32$8A
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToInt32",
          new JSIL.MethodSignature($.Int32, [$.Int16]),
          Convert_ToInt32$8B
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToInt32",
          new JSIL.MethodSignature($.Int32, [$.UInt16]),
          Convert_ToInt32$8C
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToInt32",
          new JSIL.MethodSignature($.Int32, [$.UInt32]),
          Convert_ToInt32$8D
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToInt32",
          new JSIL.MethodSignature($.Int32, [$.Int32]),
          Convert_ToInt32$8E
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToInt32",
          new JSIL.MethodSignature($.Int32, [$.Int64]),
          Convert_ToInt32$8F
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToInt32",
          new JSIL.MethodSignature($.Int32, [$.UInt64]),
          Convert_ToInt32$90
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToInt32",
          new JSIL.MethodSignature($.Int32, [$.Single]),
          Convert_ToInt32$91
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToInt32",
          new JSIL.MethodSignature($.Int32, [$.Double]),
          Convert_ToInt32$92
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToInt32",
          new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.Decimal")]),
          Convert_ToInt32$93
        )
          .Attribute($asm01.TypeRef("System.Security.SecuritySafeCriticalAttribute"))
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToInt32",
          new JSIL.MethodSignature($.Int32, [$.String]),
          Convert_ToInt32$94
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToInt32",
          new JSIL.MethodSignature($.Int32, [$.String, $asm01.TypeRef("System.IFormatProvider")]),
          Convert_ToInt32$95
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToInt32",
          new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.DateTime")]),
          Convert_ToInt32$96
        );

        $.Method({Static:true , Public:true }, "ToInt32",
          new JSIL.MethodSignature($.Int32, [$.String, $.Int32]),
          Convert_ToInt32$97
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToInt64",
          new JSIL.MethodSignature($.Int64, [$.Object]),
          Convert_ToInt64$98
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToInt64",
          new JSIL.MethodSignature($.Int64, [$.Object, $asm01.TypeRef("System.IFormatProvider")]),
          Convert_ToInt64$99
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToInt64",
          new JSIL.MethodSignature($.Int64, [$.Boolean]),
          Convert_ToInt64$9A
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToInt64",
          new JSIL.MethodSignature($.Int64, [$.Char]),
          Convert_ToInt64$9B
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToInt64",
          new JSIL.MethodSignature($.Int64, [$.SByte]),
          Convert_ToInt64$9C
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToInt64",
          new JSIL.MethodSignature($.Int64, [$.Byte]),
          Convert_ToInt64$9D
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToInt64",
          new JSIL.MethodSignature($.Int64, [$.Int16]),
          Convert_ToInt64$9E
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToInt64",
          new JSIL.MethodSignature($.Int64, [$.UInt16]),
          Convert_ToInt64$9F
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToInt64",
          new JSIL.MethodSignature($.Int64, [$.Int32]),
          Convert_ToInt64$A0
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToInt64",
          new JSIL.MethodSignature($.Int64, [$.UInt32]),
          Convert_ToInt64$A1
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToInt64",
          new JSIL.MethodSignature($.Int64, [$.UInt64]),
          Convert_ToInt64$A2
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToInt64",
          new JSIL.MethodSignature($.Int64, [$.Int64]),
          Convert_ToInt64$A3
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToInt64",
          new JSIL.MethodSignature($.Int64, [$.Single]),
          Convert_ToInt64$A4
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToInt64",
          new JSIL.MethodSignature($.Int64, [$.Double]),
          Convert_ToInt64$A5
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToInt64",
          new JSIL.MethodSignature($.Int64, [$asm01.TypeRef("System.Decimal")]),
          Convert_ToInt64$A6
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToInt64",
          new JSIL.MethodSignature($.Int64, [$.String]),
          Convert_ToInt64$A7
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToInt64",
          new JSIL.MethodSignature($.Int64, [$.String, $asm01.TypeRef("System.IFormatProvider")]),
          Convert_ToInt64$A8
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToInt64",
          new JSIL.MethodSignature($.Int64, [$asm01.TypeRef("System.DateTime")]),
          Convert_ToInt64$A9
        );

        $.Method({Static:true , Public:true }, "ToInt64",
          new JSIL.MethodSignature($.Int64, [$.String, $.Int32]),
          Convert_ToInt64$AA
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToSByte",
          new JSIL.MethodSignature($.SByte, [$.Object]),
          Convert_ToSByte$AB
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToSByte",
          new JSIL.MethodSignature($.SByte, [$.Object, $asm01.TypeRef("System.IFormatProvider")]),
          Convert_ToSByte$AC
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToSByte",
          new JSIL.MethodSignature($.SByte, [$.Boolean]),
          Convert_ToSByte$AD
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToSByte",
          new JSIL.MethodSignature($.SByte, [$.SByte]),
          Convert_ToSByte$AE
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToSByte",
          new JSIL.MethodSignature($.SByte, [$.Char]),
          Convert_ToSByte$AF
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToSByte",
          new JSIL.MethodSignature($.SByte, [$.Byte]),
          Convert_ToSByte$B0
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToSByte",
          new JSIL.MethodSignature($.SByte, [$.Int16]),
          Convert_ToSByte$B1
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToSByte",
          new JSIL.MethodSignature($.SByte, [$.UInt16]),
          Convert_ToSByte$B2
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToSByte",
          new JSIL.MethodSignature($.SByte, [$.Int32]),
          Convert_ToSByte$B3
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToSByte",
          new JSIL.MethodSignature($.SByte, [$.UInt32]),
          Convert_ToSByte$B4
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToSByte",
          new JSIL.MethodSignature($.SByte, [$.Int64]),
          Convert_ToSByte$B5
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToSByte",
          new JSIL.MethodSignature($.SByte, [$.UInt64]),
          Convert_ToSByte$B6
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToSByte",
          new JSIL.MethodSignature($.SByte, [$.Single]),
          Convert_ToSByte$B7
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToSByte",
          new JSIL.MethodSignature($.SByte, [$.Double]),
          Convert_ToSByte$B8
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToSByte",
          new JSIL.MethodSignature($.SByte, [$asm01.TypeRef("System.Decimal")]),
          Convert_ToSByte$B9
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToSByte",
          new JSIL.MethodSignature($.SByte, [$.String]),
          Convert_ToSByte$BA
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToSByte",
          new JSIL.MethodSignature($.SByte, [$.String, $asm01.TypeRef("System.IFormatProvider")]),
          Convert_ToSByte$BB
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToSByte",
          new JSIL.MethodSignature($.SByte, [$asm01.TypeRef("System.DateTime")]),
          Convert_ToSByte$BC
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

        $.Method({Static:true , Public:true }, "ToSByte",
          new JSIL.MethodSignature($.SByte, [$.String, $.Int32]),
          Convert_ToSByte$BD
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToSingle",
          new JSIL.MethodSignature($.Single, [$.Object]),
          Convert_ToSingle$BE
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToSingle",
          new JSIL.MethodSignature($.Single, [$.Object, $asm01.TypeRef("System.IFormatProvider")]),
          Convert_ToSingle$BF
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToSingle",
          new JSIL.MethodSignature($.Single, [$.SByte]),
          Convert_ToSingle$C0
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToSingle",
          new JSIL.MethodSignature($.Single, [$.Byte]),
          Convert_ToSingle$C1
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToSingle",
          new JSIL.MethodSignature($.Single, [$.Char]),
          Convert_ToSingle$C2
        );

        $.Method({Static:true , Public:true }, "ToSingle",
          new JSIL.MethodSignature($.Single, [$.Int16]),
          Convert_ToSingle$C3
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToSingle",
          new JSIL.MethodSignature($.Single, [$.UInt16]),
          Convert_ToSingle$C4
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToSingle",
          new JSIL.MethodSignature($.Single, [$.Int32]),
          Convert_ToSingle$C5
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToSingle",
          new JSIL.MethodSignature($.Single, [$.UInt32]),
          Convert_ToSingle$C6
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToSingle",
          new JSIL.MethodSignature($.Single, [$.Int64]),
          Convert_ToSingle$C7
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToSingle",
          new JSIL.MethodSignature($.Single, [$.UInt64]),
          Convert_ToSingle$C8
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToSingle",
          new JSIL.MethodSignature($.Single, [$.Single]),
          Convert_ToSingle$C9
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToSingle",
          new JSIL.MethodSignature($.Single, [$.Double]),
          Convert_ToSingle$CA
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToSingle",
          new JSIL.MethodSignature($.Single, [$asm01.TypeRef("System.Decimal")]),
          Convert_ToSingle$CB
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToSingle",
          new JSIL.MethodSignature($.Single, [$.String]),
          Convert_ToSingle$CC
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToSingle",
          new JSIL.MethodSignature($.Single, [$.String, $asm01.TypeRef("System.IFormatProvider")]),
          Convert_ToSingle$CD
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToSingle",
          new JSIL.MethodSignature($.Single, [$.Boolean]),
          Convert_ToSingle$CE
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToSingle",
          new JSIL.MethodSignature($.Single, [$asm01.TypeRef("System.DateTime")]),
          Convert_ToSingle$CF
        );

        $.Method({Static:true , Public:true }, "ToString",
          new JSIL.MethodSignature($.String, [$.Object]),
          Convert_ToString$D0
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToString",
          new JSIL.MethodSignature($.String, [$.Object, $asm01.TypeRef("System.IFormatProvider")]),
          Convert_ToString$D1
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToString",
          new JSIL.MethodSignature($.String, [$.Boolean]),
          Convert_ToString$D2
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToString",
          new JSIL.MethodSignature($.String, [$.Boolean, $asm01.TypeRef("System.IFormatProvider")]),
          Convert_ToString$D3
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToString",
          new JSIL.MethodSignature($.String, [$.Char]),
          Convert_ToString$D4
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToString",
          new JSIL.MethodSignature($.String, [$.Char, $asm01.TypeRef("System.IFormatProvider")]),
          Convert_ToString$D5
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToString",
          new JSIL.MethodSignature($.String, [$.SByte]),
          Convert_ToString$D6
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToString",
          new JSIL.MethodSignature($.String, [$.SByte, $asm01.TypeRef("System.IFormatProvider")]),
          Convert_ToString$D7
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToString",
          new JSIL.MethodSignature($.String, [$.Byte]),
          Convert_ToString$D8
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToString",
          new JSIL.MethodSignature($.String, [$.Byte, $asm01.TypeRef("System.IFormatProvider")]),
          Convert_ToString$D9
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToString",
          new JSIL.MethodSignature($.String, [$.Int16]),
          Convert_ToString$DA
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToString",
          new JSIL.MethodSignature($.String, [$.Int16, $asm01.TypeRef("System.IFormatProvider")]),
          Convert_ToString$DB
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToString",
          new JSIL.MethodSignature($.String, [$.UInt16]),
          Convert_ToString$DC
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToString",
          new JSIL.MethodSignature($.String, [$.UInt16, $asm01.TypeRef("System.IFormatProvider")]),
          Convert_ToString$DD
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToString",
          new JSIL.MethodSignature($.String, [$.Int32]),
          Convert_ToString$DE
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToString",
          new JSIL.MethodSignature($.String, [$.Int32, $asm01.TypeRef("System.IFormatProvider")]),
          Convert_ToString$DF
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToString",
          new JSIL.MethodSignature($.String, [$.UInt32]),
          Convert_ToString$E0
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToString",
          new JSIL.MethodSignature($.String, [$.UInt32, $asm01.TypeRef("System.IFormatProvider")]),
          Convert_ToString$E1
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToString",
          new JSIL.MethodSignature($.String, [$.Int64]),
          Convert_ToString$E2
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToString",
          new JSIL.MethodSignature($.String, [$.Int64, $asm01.TypeRef("System.IFormatProvider")]),
          Convert_ToString$E3
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToString",
          new JSIL.MethodSignature($.String, [$.UInt64]),
          Convert_ToString$E4
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToString",
          new JSIL.MethodSignature($.String, [$.UInt64, $asm01.TypeRef("System.IFormatProvider")]),
          Convert_ToString$E5
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToString",
          new JSIL.MethodSignature($.String, [$.Single]),
          Convert_ToString$E6
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToString",
          new JSIL.MethodSignature($.String, [$.Single, $asm01.TypeRef("System.IFormatProvider")]),
          Convert_ToString$E7
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToString",
          new JSIL.MethodSignature($.String, [$.Double]),
          Convert_ToString$E8
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToString",
          new JSIL.MethodSignature($.String, [$.Double, $asm01.TypeRef("System.IFormatProvider")]),
          Convert_ToString$E9
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToString",
          new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.Decimal")]),
          Convert_ToString$EA
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToString",
          new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.Decimal"), $asm01.TypeRef("System.IFormatProvider")]),
          Convert_ToString$EB
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToString",
          new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.DateTime")]),
          Convert_ToString$EC
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToString",
          new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.DateTime"), $asm01.TypeRef("System.IFormatProvider")]),
          Convert_ToString$ED
        )
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToString",
          new JSIL.MethodSignature($.String, [$.String]),
          Convert_ToString$EE
        );

        $.Method({Static:true , Public:true }, "ToString",
          new JSIL.MethodSignature($.String, [$.String, $asm01.TypeRef("System.IFormatProvider")]),
          Convert_ToString$EF
        );

        $.Method({Static:true , Public:true }, "ToString",
          new JSIL.MethodSignature($.String, [$.Byte, $.Int32]),
          Convert_ToString$F0
        )
          .Attribute($asm01.TypeRef("System.Security.SecuritySafeCriticalAttribute"))
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToString",
          new JSIL.MethodSignature($.String, [$.Int16, $.Int32]),
          Convert_ToString$F1
        )
          .Attribute($asm01.TypeRef("System.Security.SecuritySafeCriticalAttribute"))
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToString",
          new JSIL.MethodSignature($.String, [$.Int32, $.Int32]),
          Convert_ToString$F2
        )
          .Attribute($asm01.TypeRef("System.Security.SecuritySafeCriticalAttribute"))
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToString",
          new JSIL.MethodSignature($.String, [$.Int64, $.Int32]),
          Convert_ToString$F3
        )
          .Attribute($asm01.TypeRef("System.Security.SecuritySafeCriticalAttribute"))
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToUInt16",
          new JSIL.MethodSignature($.UInt16, [$.Object]),
          Convert_ToUInt16$F4
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToUInt16",
          new JSIL.MethodSignature($.UInt16, [$.Object, $asm01.TypeRef("System.IFormatProvider")]),
          Convert_ToUInt16$F5
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToUInt16",
          new JSIL.MethodSignature($.UInt16, [$.Boolean]),
          Convert_ToUInt16$F6
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToUInt16",
          new JSIL.MethodSignature($.UInt16, [$.Char]),
          Convert_ToUInt16$F7
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToUInt16",
          new JSIL.MethodSignature($.UInt16, [$.SByte]),
          Convert_ToUInt16$F8
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToUInt16",
          new JSIL.MethodSignature($.UInt16, [$.Byte]),
          Convert_ToUInt16$F9
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToUInt16",
          new JSIL.MethodSignature($.UInt16, [$.Int16]),
          Convert_ToUInt16$FA
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToUInt16",
          new JSIL.MethodSignature($.UInt16, [$.Int32]),
          Convert_ToUInt16$FB
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToUInt16",
          new JSIL.MethodSignature($.UInt16, [$.UInt16]),
          Convert_ToUInt16$FC
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToUInt16",
          new JSIL.MethodSignature($.UInt16, [$.UInt32]),
          Convert_ToUInt16$FD
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToUInt16",
          new JSIL.MethodSignature($.UInt16, [$.Int64]),
          Convert_ToUInt16$FE
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToUInt16",
          new JSIL.MethodSignature($.UInt16, [$.UInt64]),
          Convert_ToUInt16$FF
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToUInt16",
          new JSIL.MethodSignature($.UInt16, [$.Single]),
          Convert_ToUInt16$100
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToUInt16",
          new JSIL.MethodSignature($.UInt16, [$.Double]),
          Convert_ToUInt16$101
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToUInt16",
          new JSIL.MethodSignature($.UInt16, [$asm01.TypeRef("System.Decimal")]),
          Convert_ToUInt16$102
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToUInt16",
          new JSIL.MethodSignature($.UInt16, [$.String]),
          Convert_ToUInt16$103
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToUInt16",
          new JSIL.MethodSignature($.UInt16, [$.String, $asm01.TypeRef("System.IFormatProvider")]),
          Convert_ToUInt16$104
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToUInt16",
          new JSIL.MethodSignature($.UInt16, [$asm01.TypeRef("System.DateTime")]),
          Convert_ToUInt16$105
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

        $.Method({Static:true , Public:true }, "ToUInt16",
          new JSIL.MethodSignature($.UInt16, [$.String, $.Int32]),
          Convert_ToUInt16$106
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToUInt32",
          new JSIL.MethodSignature($.UInt32, [$.Object]),
          Convert_ToUInt32$107
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToUInt32",
          new JSIL.MethodSignature($.UInt32, [$.Object, $asm01.TypeRef("System.IFormatProvider")]),
          Convert_ToUInt32$108
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToUInt32",
          new JSIL.MethodSignature($.UInt32, [$.Boolean]),
          Convert_ToUInt32$109
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToUInt32",
          new JSIL.MethodSignature($.UInt32, [$.Char]),
          Convert_ToUInt32$10A
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToUInt32",
          new JSIL.MethodSignature($.UInt32, [$.SByte]),
          Convert_ToUInt32$10B
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToUInt32",
          new JSIL.MethodSignature($.UInt32, [$.Byte]),
          Convert_ToUInt32$10C
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToUInt32",
          new JSIL.MethodSignature($.UInt32, [$.Int16]),
          Convert_ToUInt32$10D
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToUInt32",
          new JSIL.MethodSignature($.UInt32, [$.UInt16]),
          Convert_ToUInt32$10E
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToUInt32",
          new JSIL.MethodSignature($.UInt32, [$.Int32]),
          Convert_ToUInt32$10F
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToUInt32",
          new JSIL.MethodSignature($.UInt32, [$.UInt32]),
          Convert_ToUInt32$110
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToUInt32",
          new JSIL.MethodSignature($.UInt32, [$.Int64]),
          Convert_ToUInt32$111
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToUInt32",
          new JSIL.MethodSignature($.UInt32, [$.UInt64]),
          Convert_ToUInt32$112
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToUInt32",
          new JSIL.MethodSignature($.UInt32, [$.Single]),
          Convert_ToUInt32$113
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToUInt32",
          new JSIL.MethodSignature($.UInt32, [$.Double]),
          Convert_ToUInt32$114
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToUInt32",
          new JSIL.MethodSignature($.UInt32, [$asm01.TypeRef("System.Decimal")]),
          Convert_ToUInt32$115
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToUInt32",
          new JSIL.MethodSignature($.UInt32, [$.String]),
          Convert_ToUInt32$116
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToUInt32",
          new JSIL.MethodSignature($.UInt32, [$.String, $asm01.TypeRef("System.IFormatProvider")]),
          Convert_ToUInt32$117
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToUInt32",
          new JSIL.MethodSignature($.UInt32, [$asm01.TypeRef("System.DateTime")]),
          Convert_ToUInt32$118
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

        $.Method({Static:true , Public:true }, "ToUInt32",
          new JSIL.MethodSignature($.UInt32, [$.String, $.Int32]),
          Convert_ToUInt32$119
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToUInt64",
          new JSIL.MethodSignature($.UInt64, [$.Object]),
          Convert_ToUInt64$11A
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToUInt64",
          new JSIL.MethodSignature($.UInt64, [$.Object, $asm01.TypeRef("System.IFormatProvider")]),
          Convert_ToUInt64$11B
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToUInt64",
          new JSIL.MethodSignature($.UInt64, [$.Boolean]),
          Convert_ToUInt64$11C
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToUInt64",
          new JSIL.MethodSignature($.UInt64, [$.Char]),
          Convert_ToUInt64$11D
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToUInt64",
          new JSIL.MethodSignature($.UInt64, [$.SByte]),
          Convert_ToUInt64$11E
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToUInt64",
          new JSIL.MethodSignature($.UInt64, [$.Byte]),
          Convert_ToUInt64$11F
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToUInt64",
          new JSIL.MethodSignature($.UInt64, [$.Int16]),
          Convert_ToUInt64$120
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToUInt64",
          new JSIL.MethodSignature($.UInt64, [$.UInt16]),
          Convert_ToUInt64$121
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToUInt64",
          new JSIL.MethodSignature($.UInt64, [$.Int32]),
          Convert_ToUInt64$122
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToUInt64",
          new JSIL.MethodSignature($.UInt64, [$.UInt32]),
          Convert_ToUInt64$123
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToUInt64",
          new JSIL.MethodSignature($.UInt64, [$.Int64]),
          Convert_ToUInt64$124
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToUInt64",
          new JSIL.MethodSignature($.UInt64, [$.UInt64]),
          Convert_ToUInt64$125
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToUInt64",
          new JSIL.MethodSignature($.UInt64, [$.Single]),
          Convert_ToUInt64$126
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToUInt64",
          new JSIL.MethodSignature($.UInt64, [$.Double]),
          Convert_ToUInt64$127
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToUInt64",
          new JSIL.MethodSignature($.UInt64, [$asm01.TypeRef("System.Decimal")]),
          Convert_ToUInt64$128
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToUInt64",
          new JSIL.MethodSignature($.UInt64, [$.String]),
          Convert_ToUInt64$129
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToUInt64",
          new JSIL.MethodSignature($.UInt64, [$.String, $asm01.TypeRef("System.IFormatProvider")]),
          Convert_ToUInt64$12A
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Method({Static:true , Public:true }, "ToUInt64",
          new JSIL.MethodSignature($.UInt64, [$asm01.TypeRef("System.DateTime")]),
          Convert_ToUInt64$12B
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

        $.Method({Static:true , Public:true }, "ToUInt64",
          new JSIL.MethodSignature($.UInt64, [$.String, $.Int32]),
          Convert_ToUInt64$12C
        )
          .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
          .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

        $.Field({Static:true , Public:false, ReadOnly:true }, "ConvertTypes", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.RuntimeType")]));

        $.Field({Static:true , Public:false, ReadOnly:true }, "EnumType", $asm01.TypeRef("System.RuntimeType"), function ($pi) {
            return $asm01.System.RuntimeType.$Cast($asm01.System.Enum.__Type__);
          });

        $.Field({Static:true , Public:false, ReadOnly:true }, "base64Table", $jsilcore.TypeRef("System.Array", [$.Char]));

        $.Constant({Static:true , Public:false}, "base64LineBreakPosition", $.Int32, 76);

        $.Field({Static:true , Public:true , ReadOnly:true }, "DBNull", $.Object, function ($pi) {
            return $asm01.System.DBNull.Value;
          });


        function Convert__cctor () {
          $thisType.ConvertTypes = JSIL.Array.New($T00(), [$T00().$Cast($T01().__Type__), $T00().$Cast($T02().__Type__), $T00().$Cast($T03().__Type__), $T00().$Cast($T04().__Type__), $T00().$Cast($T05().__Type__), $T00().$Cast($T06().__Type__), $T00().$Cast($T07().__Type__), $T00().$Cast($T08().__Type__), $T00().$Cast($T09().__Type__), $T00().$Cast($T0A().__Type__), $T00().$Cast($T0B().__Type__), $T00().$Cast($T0C().__Type__), $T00().$Cast($T0D().__Type__), $T00().$Cast($T0E().__Type__), $T00().$Cast($T0F().__Type__), $T00().$Cast($T10().__Type__), $T00().$Cast($T11().__Type__), $T00().$Cast($T02().__Type__), $T00().$Cast($T12().__Type__)]);
          $thisType.EnumType = $T00().$Cast($T13().__Type__);
          $thisType.base64Table = JSIL.Array.New($T05(), ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "+", "/", "="]);
          $thisType.DBNull = $T03().Value;
        };

        $.Method({Static:true , Public:false}, ".cctor",
          JSIL.MethodSignature.Void,
          Convert__cctor
        );


        return function (newThisType) { $thisType = newThisType; };
      })
        .Attribute($asm01.TypeRef("__DynamicallyInvokableAttribute"));

    })();

  }
)();
